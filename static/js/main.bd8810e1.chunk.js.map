{"version":3,"sources":["slides/class2/slides/index.jsx","slides sync /^/.//.*$","constants/classes.js","components/Menu.js","components/Spectacle.js","utils/withSlides.js","components/App.js","index.js","slides/class1/index.jsx","slides/class2/index.jsx","slides/class2/slides/DomIntro.jsx"],"names":["map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","classes","classNumber","slidesDirectory","Menu","className","to","theme","colors","primary","secondary","backgroundColor","fonts","header","text","template","justifyContent","position","bottom","width","padding","Presentation","slides","style","selectSlides","require","default","withSlides","Children","App","exact","path","component","render","ReactDOM","StrictMode","document","getElementById","margin","gridTemplateColumns","gridColumnGap","fontSize","href","language","src","process","gridTemplateRows","gridRowGap","fontsize","textAlign","alt","height","color","display"],"mappings":"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","file":"static/js/main.bd8810e1.chunk.js","sourcesContent":["export { default as DomIntro } from './DomIntro';\n","var map = {\n\t\"./class1\": 50,\n\t\"./class1/\": 50,\n\t\"./class1/index\": 50,\n\t\"./class1/index.jsx\": 50,\n\t\"./class2\": 51,\n\t\"./class2/\": 51,\n\t\"./class2/index\": 51,\n\t\"./class2/index.jsx\": 51,\n\t\"./class2/slides\": 32,\n\t\"./class2/slides/\": 32,\n\t\"./class2/slides/DomIntro\": 52,\n\t\"./class2/slides/DomIntro.jsx\": 52,\n\t\"./class2/slides/index\": 32,\n\t\"./class2/slides/index.jsx\": 32\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 477;","const classes = [\n  {\n    classNumber: 1,\n    slidesDirectory: \"class1\",\n  },\n  {\n    classNumber: 2,\n    slidesDirectory: \"class2\",\n  },\n];\n\nexport default classes;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport classes from \"../constants/classes\";\n\nconst Menu = () => {\n  return (\n    <div className=\"menu\">\n      <h1 className=\"menu-header\">👋 JS Training Classes 🚀</h1>\n      <ul className=\"menu-list\">\n        {classes.map(({ classNumber }) => {\n          return (\n            <li key={classNumber}>\n              <Link\n                className=\"menu-list-item\"\n                to={`classes/${classNumber}`}\n              >{`📖 Clase ${classNumber}`}</Link>\n            </li>\n          );\n        })}\n        <li className=\"menu-list-item\">📖 Clase 3</li>\n        <li className=\"menu-list-item\">📖 Clase 4</li>\n      </ul>\n    </div>\n  );\n};\n\nexport default Menu;\n","import React from \"react\";\n\nimport {\n  FlexBox,\n  FullScreen,\n  Deck,\n  Box,\n} from \"spectacle\";\n\nconst theme = {\n  colors: {\n    primary: \"#d9d9d9\",\n    secondary: \"#d9d9d9\",\n    backgroundColor: \"#0d0d0d\"\n  },\n  fonts: {\n    header: 'Roboto',\n    text: 'Roboto',\n  },\n};\n\nconst template = () => (\n  <FlexBox\n    justifyContent=\"space-between\"\n    position=\"absolute\"\n    bottom={0}\n    width={1}\n  >\n    <Box padding=\"0 1em\">\n      <FullScreen />\n    </Box>\n    <Box padding=\"1em\">\n    </Box>\n  </FlexBox>\n);\n\nconst Presentation = ({ slides }) => (\n  <Deck theme={theme} template={template}>\n    <div style={{ backgroundColor: \"#ffd84d\" }}>\n      {slides}\n    </div>\n  </Deck>\n);\n\nexport default Presentation;\n","import React from \"react\";\n\nconst selectSlides = (slidesDirectory) => {\n  return require(`../slides/${slidesDirectory}`).default();\n};\n\nconst withSlides = (Children, slidesDirectory) => {\n  return <Children slides={selectSlides(slidesDirectory)} />;\n};\n\nexport default withSlides;\n","import React from \"react\";\nimport { HashRouter, Switch, Route, Redirect } from \"react-router-dom\";\nimport Menu from \"./Menu\";\nimport Presentation from \"./Spectacle\";\nimport withSlides from \"../utils/withSlides\";\nimport classes from \"../constants/classes\";\n\nconst App = () => {\n  return (\n    // https://create-react-app.dev/docs/deployment/#notes-on-client-side-routing\n    <HashRouter>\n      <Switch>\n        <Route exact path=\"/menu\" component={Menu} />\n\n        {classes.map(({ classNumber, slidesDirectory }) => (\n          <Route\n            key={classNumber}\n            exact\n            path={`/classes/${classNumber}`}\n            render={() => withSlides(Presentation, slidesDirectory)}\n          />\n        ))}\n\n        <Route path=\"/\">\n          <Redirect to=\"menu\" />\n        </Route>\n      </Switch>\n    </HashRouter>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./components/App\";\n\nimport \"./styles/styles.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n","import React from \"react\";\nimport {\n  Slide,\n  Heading,\n  ListItem,\n  Grid,\n  OrderedList,\n  Text,\n  UnorderedList,\n  CodePane,\n  Notes,\n  FlexBox\n} from \"spectacle\";\nimport '../../styles/styles.css';\n\nexport default () => (\n  <>\n    {/* Intro to JS */}\n    <Slide backgroundColor=\"#0d0d0d\" className=\"flex-center-column\">\n      <Heading margin=\"0px\" className=\"font-size-heading\">\n        <i>Agenda</i>\n      </Heading>\n\n      <OrderedList>\n        <Grid gridTemplateColumns=\"1fr 1fr\" gridColumnGap={15} fontSize={30}>\n          <ListItem>\n            Surgimiento de JS\n          </ListItem>\n          <ListItem>\n            Características\n          </ListItem>\n          <ListItem>\n            ¿Qué es ECMAScript?\n          </ListItem>\n          <ListItem>\n            Sintaxis básica\n          </ListItem>\n          <ListItem>\n            Variables - var, let, const\n          </ListItem>\n          <ListItem>\n            Tipos de datos\n          </ListItem>\n          <ListItem>\n            Operadores lógicos\n          </ListItem>\n          <ListItem>\n            Estructuras de control\n          </ListItem>\n          <ListItem>\n            Excepciones\n          </ListItem>\n          <ListItem>\n            Funciones\n          </ListItem>\n          <ListItem>\n            Window API\n          </ListItem>\n          <ListItem>\n            Debugging\n          </ListItem>\n        </Grid>\n      </OrderedList>\n    </Slide>\n\n    <Slide backgroundColor=\"#0d0d0d\">\n      <Heading margin=\"0px\" padding=\"0px\" className=\"font-size-heading\">\n        <i>Javascript</i>\n      </Heading>\n\n      <Text fontSize={30}>\n        JavaScript fue creado inicialmente con un único propósito, \"traer vida a las páginas web\" - <i>make web pages alive</i>. Hoy en día se utiliza en muchos otros entornos también.\n      </Text>\n      <Text fontSize={30}>\n        Fue desarrollado originalmente por Brendan Eich de Netscape con el nombre de Mocha, el cual fue renombrado posteriormente a LiveScript, para finalmente quedar como JavaScript. Este último cambio de nombre se realizó en diciembre de 1995.\n      </Text>\n    </Slide>\n\n    <Slide backgroundColor=\"#0d0d0d\">\n      <Heading margin=\"0px\" padding=\"0px\" className=\"font-size-heading\">\n        <i>Javascript</i>\n      </Heading>\n\n      <Text fontSize={30}>\n        Los programas escritos en JavaScript son llamados scripts y no necesitan de ningún tipo de procesamiento especial o compilación para ser ejecutados. De hecho, pueden ser escritos directamente en el código HTML de una página web y se ejecutará cuando ésta sea cargada.\n      </Text>\n\n      <Text fontSize={30}>\n        Se define como orientado a objetos, basado en prototipos, imperativo, débilmente tipado y dinámico.\n      </Text>\n    </Slide>\n\n    <Slide backgroundColor=\"#0d0d0d\">\n      <Heading margin=\"0px\" padding=\"0px\" className=\"font-size-heading\">\n        <i>Javascript</i>\n      </Heading>\n\n      <Text fontSize={30}>\n        Podemos destacar varias cosas únicas del lenguaje\n      </Text>\n\n      <UnorderedList fontSize={30}>\n        <ListItem>\n          Es el lenguaje con integración completa con HTML y CSS más adoptado de la web.\n        </ListItem>\n        <ListItem>\n          Simple de usar.\n        </ListItem>\n        <ListItem>\n          Muy utilizado en la industria y actualmente en toda la web.\n        </ListItem>\n        <ListItem>\n          En la actualidad existen muchos lenguajes construidos que se \"transpilan\" luego a JS y extienden o proveen nuevas funcionalidades.\n        </ListItem>\n        <ListItem>\n          Es un lenguaje multi-paradigma.\n        </ListItem>\n        <ListItem>\n          Existe una gran variedad de frameworks JS, tanto Frontend como Backend.\n        </ListItem>\n      </UnorderedList>\n    </Slide>\n\n    <Slide backgroundColor=\"#0d0d0d\">\n      <Heading margin=\"0px\" padding=\"0px\" className=\"font-size-heading\">\n        <i>ECMAScript</i>\n      </Heading>\n\n      <Text fontSize={30}>\n        <a href=\"https://en.wikipedia.org/wiki/ECMAScript\">\n          ECMAScript\n        </a> es un estándar que define un lenguaje de tipos dinámicos ligeramente inspirado en Java y otros lenguajes del estilo de C. Soporta algunas características de la programación orientada a objetos mediante objetos basados en prototipos y pseudoclases.\n      </Text>\n      <Text fontSize={30}>\n        El objetivo de este estandar es asegurar la interoperabilidad de las páginas web entre diferentes navegadores web.\n      </Text>\n      <Text fontSize={30}>\n        JavaScript es un lenguaje de programación que implementa este estandar - ECMAScript está basado en JavaScript.\n      </Text>\n    </Slide>\n\n    {/* let and const */}\n    <Slide backgroundColor=\"#0d0d0d\">\n      <Heading margin=\"0px\" className=\"font-size-heading\">\n        Variables\n      </Heading>\n\n      <Text fontSize={30}>\n        Las variables son contenedores que nos permiten almacenar valores para su posterior uso y/o manipulación.\n      </Text>\n\n      <Text fontSize={30}>\n        Para declarar una variable podemos utilizar la palabra clave <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let\"><b>let</b></a>.\n      </Text>\n\n      <CodePane language=\"js\">\n        {`\n          let myVariable;\n          // Initialize with an initial value\n          let myVariable = 'Hola Snapplerxs!';\n        `}\n      </CodePane>\n    </Slide>\n\n    <Slide backgroundColor=\"#0d0d0d\">\n      <Heading margin=\"0px\" className=\"font-size-heading\">\n        Variables\n      </Heading>\n\n      <Text fontSize={30}>\n        JavaScript es un lenguaje dinámico y de tipado flexible. En parte esto significa que las variables no están asociadas directamente con ningún tipo de valor en particular y se les pueden asignar o reasignar valores de todos los tipos.\n      </Text>\n\n      <CodePane language=\"js\">\n        {`\n          let foo = 42; // foo is a number\n          foo = 'bar';  // foo is a string\n          foo = true;   // foo is a boolean\n\n          // Uncaught SyntaxError: Identifier 'foo' has already been declared\n          let foo = 10;\n        `}\n      </CodePane>\n    </Slide>\n\n    <Slide backgroundColor=\"#0d0d0d\">\n      <Heading margin=\"0px\" className=\"font-size-heading\">\n        Variables\n      </Heading>\n\n      <Text fontSize={30}>\n        Para definir variables también podemos utilizar la palabra clave <b>var</b>.\n      </Text>\n\n      <Text fontSize={30}>\n        <b>var</b> se comporta distinto a <b>let</b> y su uso actualmente no es muy recomendado. Explicaremos las razones más adelante.\n      </Text>\n\n      <CodePane language=\"js\">\n        {`\n          var foo = 42; // foo is a number\n        `}\n      </CodePane>\n    </Slide>\n\n    <Slide backgroundColor=\"#0d0d0d\">\n      <Heading margin=\"0px\" className=\"font-size-heading\">\n        Constantes\n      </Heading>\n\n      <Text fontSize={30}>\n        A diferencia de las variables, las constantes no pueden cambiar su valor posteriormente. Se debe especificar el valor al momento de su declaración.\n      </Text>\n\n      <Text fontSize={30}>\n        Para definir una constante, usamos la palabra clave <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const\">const</a>.\n      </Text>\n\n      <CodePane language=\"js\">\n        {`\n          const FOO = \"bar\";\n\n          // this will throw an error - Uncaught TypeError: Assignment to constant variable.\n          FOO = 20;\n\n          // trying to redeclare a constant throws an error\n          // Uncaught SyntaxError: Identifier 'FOO' has already been declared\n          const FOO = 20;\n        `}\n      </CodePane>\n\n      <Notes>\n        Las constantes pueden ser declaradas con mayúsculas o minúsculas, pero generalmente se definen con todas sus letras en mayúscula a modo de convención.\n      </Notes>\n    </Slide>\n\n    {/* Comments */}\n    <Slide backgroundColor=\"#0d0d0d\">\n      <Heading margin=\"0px\" padding=\"0px\" className=\"font-size-heading\">\n        Comentarios\n      </Heading>\n\n      <Text fontSize={30}>\n        En JavaScript, al igual que en todos los lenguajes, tenemos la posibilidad de agregar comentarios en nuestro código.\n      </Text>\n\n      <Text fontSize={30}>\n        Podemos agregar comentarios single line o multi line.\n      </Text>\n\n      <CodePane language=\"js\">\n        {`\n          // This is a single line comment.\n\n          /*\n          You can use this kind of comments\n          for documentation or to explain\n          any complex sentence.\n          */\n        `}\n      </CodePane>\n\n    </Slide>\n\n    {/* Data types and data structures */}\n    <Slide backgroundColor=\"#0d0d0d\">\n      <Heading margin=\"0px\" className=\"font-size-heading\">\n        Valores y estructuras de datos\n      </Heading>\n\n      <Text fontSize={30}>\n        Todos los lenguajes de programación tienen estructuras de datos integradas.\n      </Text>\n\n      <Text fontSize={30}>\n        Generalmente varían sus nombres o formas de utilización de un lenguaje a otro.\n      </Text>\n    </Slide>\n\n    {/* Primitives */}\n    <Slide backgroundColor=\"#0d0d0d\">\n      <Heading margin=\"0px\" className=\"font-size-heading\">\n        Tipos de datos primitivos\n      </Heading>\n\n      <Text className=\"align-center\" fontSize={30} margin=\"0px\" padding=\"0px\">\n        JavaScript cuenta con un conjunto de tipos que son llamados <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#primitive_values\">tipos primitivos</a>. Estos tipos definen valores que son inmutables.\n      </Text>\n\n      <UnorderedList className=\"flex-center-column\" fontSize={30}>\n        <ListItem>\n          <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined\">Undefined</a>\n        </ListItem>\n        <ListItem>\n          <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean\">Boolean</a>\n        </ListItem>\n        <ListItem>\n          <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number\">Number</a>\n        </ListItem>\n        <ListItem>\n          <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String\">String</a>\n        </ListItem>\n        <ListItem>\n          <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt\">BigInt</a>\n        </ListItem>\n        <ListItem>\n          <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/symbol\">Symbol</a>\n        </ListItem>\n      </UnorderedList>\n    </Slide>\n\n    <Slide backgroundColor=\"#0d0d0d\">\n      <Heading margin=\"0px\" className=\"font-size-heading\">\n        Undefined\n      </Heading>\n\n      <Text className=\"align-center\" fontSize={30}>\n        <b>undefined</b> es una variable global que posee como valor inicial el tipo primitivo undefined.\n      </Text>\n\n      <UnorderedList fontSize={30}>\n        <ListItem>\n          Una variable que no tiene un valor asignado, es creada con el valor undefined.\n        </ListItem>\n        <ListItem>\n          Una función que no posee una sentencia return, devuelve undefined.\n        </ListItem>\n      </UnorderedList>\n\n      <CodePane language=\"js\">\n        {`\n          let foo;\n\n          console.log(foo); // undefined\n          typeof foo // \"undefined\"\n        `}\n      </CodePane>\n    </Slide>\n\n    <Slide backgroundColor=\"#0d0d0d\">\n      <Heading margin=\"0px\" className=\"font-size-heading align-center\" style={{ width: \"80%\" }}>\n        Null\n      </Heading>\n\n      <div style={{ width: '80%' }}>\n        <Text fontSize={30}>\n          Este valor se utiliza para representar la no existencia o invalidez de algo, generalmente de manera intencional.\n        </Text>\n\n        <FlexBox justifyContent=\"space-between\" style={{ width: '80%' }}>\n          <CodePane language=\"js\">\n            {`\n              const foo = null;\n\n              console.log(foo); // null\n              typeof foo // ?\n            `}\n          </CodePane>\n\n          <iframe src={`${process.env.PUBLIC_URL}/snippets/class1/null.html`}></iframe>\n        </FlexBox>\n      </div>\n    </Slide>\n\n    <Slide backgroundColor=\"#0d0d0d\">\n      <Heading margin=\"0px\" fontSize=\"50px\">\n        Null vs Undefined\n      </Heading>\n\n      <Text fontSize={30}>\n        Null y undefined son dos tipos primitivos diferentes y no existe un comportamiento intuitivo cuando estos tipos se comparan con otros. Para más info ver este <a href=\"https://javascript.info/comparison#comparison-with-null-and-undefined\">link</a>.\n      </Text>\n\n      <Text fontSize={30}>\n        Generalmente el valor null es algo que se utiliza de manera intencional para indicar la no existencia de algo, mientras que undefined no suele usarse tanto de manera intencional, y representa que una variable fue declarada pero aún no tiene un valor definido.\n      </Text>\n\n      <CodePane language=\"js\">\n        {`\n          const logHi = (str = 'hi') => console.log(str);\n\n          logHi(undefined); // 'hi'\n\n          logHi(null); // null\n        `}\n      </CodePane>\n\n      <Notes>\n        logHi(undefined); // imprime hi\n\n        logHi(null); // imprime null\n      </Notes>\n    </Slide>\n\n    <Slide backgroundColor=\"#0d0d0d\">\n      <Heading margin=\"0px\" fontSize=\"50px\">\n        Boolean\n      </Heading>\n\n      <Text fontSize={30}>\n        Representa una entidad lógica que solo puede tomar los valores <b>true</b> o <b>false</b>.\n      </Text>\n\n      <Text fontSize={30}>\n        Podemos usar la función Boolean para convertir cualquier elemento a boolean.\n      </Text>\n\n      <Text fontSize={30}>\n        Si el valor es omitido o es 0, -0, null, false, NaN, undefined, o un String vacío (\"\"), el objeto tendrá un valor inicial <b>false</b>.\n      </Text>\n\n      <Text fontSize={30}>\n        El resto de los valores, incluyendo Arrays vacíos y el String \"false\", crean un objeto con un valor inicial de <b>true</b>.\n      </Text>\n    </Slide>\n\n    <Slide backgroundColor=\"#0d0d0d\">\n      <div style={{ width: '80%' }}>\n        <Heading margin=\"0px\" className=\"font-size-heading\">\n          Boolean\n        </Heading>\n\n        <Grid gridTemplateRows=\"1fr 1fr\" gridRowGap={50}>\n          <FlexBox justifyContent=\"space-between\" style={{ width: '80%' }}>\n            <CodePane language=\"js\">\n              {`\n                const bool = true;\n                \n                if (bool) {\n                  console.log(\"Hola Snapplerxs!\");\n                };\n                `}\n            </CodePane>\n\n            <iframe src={`${process.env.PUBLIC_URL}/snippets/class1/boolean1.html`}></iframe>\n          </FlexBox>\n\n          <FlexBox justifyContent=\"space-between\" style={{ width: '80%' }}>\n            <CodePane language=\"js\">\n              {`\n                const bool = false;\n\n                if (bool) {\n                  console.log(\"Hola Snapplerxs!\");\n                };\n                `}\n            </CodePane>\n\n            <iframe src={`${process.env.PUBLIC_URL}/snippets/class1/boolean2.html`}></iframe>\n          </FlexBox>\n        </Grid>\n      </div>\n    </Slide>\n\n    <Slide backgroundColor=\"#0d0d0d\">\n      <div style={{ width: '80%' }}>\n\n        <Heading margin=\"0px\" className=\"font-size-heading\">\n          Boolean\n        </Heading>\n\n        <Grid gridTemplateRows=\"1fr 1fr\" gridRowGap={50}>\n          <FlexBox justifyContent=\"space-between\" style={{ width: '80%' }}>\n            <CodePane language=\"js\">\n              {`\n                const bool = Boolean(false);\n\n                if (bool) {\n                  console.log(\"Hola Snapplerxs!\");\n                };\n                `}\n            </CodePane>\n\n            <iframe src={`${process.env.PUBLIC_URL}/snippets/class1/boolean3.html`}></iframe>\n          </FlexBox>\n\n          <FlexBox justifyContent=\"space-between\" style={{ width: '80%' }}>\n            <CodePane language=\"js\">\n              {`\n                const bool = new Boolean(false);\n\n                if (bool) {\n                  console.log(\"Hola Snapplerxs!\");\n                };\n                `}\n            </CodePane>\n\n            <iframe src={`${process.env.PUBLIC_URL}/snippets/class1/boolean4.html`}></iframe>\n          </FlexBox>\n        </Grid>\n      </div>\n\n      <Notes>\n        No confundir el objeto Booelan con los valores primitivos Boolean ni con la función Boolean.\n\n        La función Boolean puede ser usada para generar valores primitivos, pero al hacer un new estamos creando un objeto, que al ser evaluado tendrá un valor de verdad verdadero.\n      </Notes>\n    </Slide>\n\n    <Slide backgroundColor=\"#0d0d0d\">\n      <Heading margin=\"0px\" fontSize=\"50px\">\n        Number\n      </Heading>\n\n      <Text fontSize={30}>\n        ECMAScript posee dos tipos distintos de números: <b>Number</b> y <b>BigInt</b>.\n      </Text>\n\n      <Text fontSize={30}>\n        Number es un valor binario de 64 bits de doble precisión. Representa números entre <b>- (2 ^ 53 - 1)</b> y <b>2 ^ 53 - 1</b>.\n      </Text>\n\n      <Text fontSize={30}>\n        Además de representar números de punto flotante, el tipo de número tiene tres valores simbólicos: + Infinito, -Infinito y NaN (\"No es un número\").\n      </Text>\n\n    </Slide>\n\n    <Slide backgroundColor=\"#0d0d0d\">\n      <Heading margin=\"0px\" fontSize=\"50px\">\n        Number\n      </Heading>\n\n      <Text fontSize={30}>\n        Para verificar el valor más grande o el valor más pequeño disponible dentro de ± Infinito, se pueden usar las constantes <b>Number.MAX_VALUE</b> o <b>Number.MIN_VALUE</b>\n      </Text>\n\n      <Text fontSize={30}>\n        El 0 que puede ser representado como +0 y -0. En la práctica esto no tiene mucho impacto ya que -0 === +0, sin embargo se puede notar algunas diferencias al dividir por 0.\n      </Text>\n\n      <CodePane language=\"js\">\n        {`\n          42 / +0 == Infinity\n          42 / -0 == -Infinity\n        `}\n      </CodePane>\n    </Slide>\n\n    <Slide backgroundColor=\"#0d0d0d\">\n      <Heading margin=\"0px\" fontSize=\"50px\">\n        BigInt\n      </Heading>\n\n      <Text fontSize={30}>\n        El tipo BigInt permite representar números con una precisión arbitraria, es decir que permite operar con números que superen los límites planteados por el tipo Number.\n      </Text>\n\n      <Text fontSize={30}>\n        Un BigInt se crea agregando n al final de un número entero o llamando al constructor.\n      </Text>\n\n      <CodePane language=\"js\">\n        {`\n          const x = 2n ** 53n; // 9007199254740992n\n\n          const y = BigInt(23) // 23n\n        `}\n      </CodePane>\n    </Slide>\n\n    <Slide backgroundColor=\"#0d0d0d\">\n      <Heading margin=\"0px\" fontSize=\"50px\">\n        Symbol\n      </Heading>\n\n      <Text fontSize={30}>\n        Es un valor primitivo único e inmutable y se puede utilizar como clave de una propiedad de objeto.\n      </Text>\n\n      <Text fontSize={30}>\n        Se crea invocando la función Symbol, que produce dinámicamente un valor único y anónimo.\n      </Text>\n\n      <CodePane language=\"js\">\n        {`\n          let Sym1 = Symbol(\"Sym\")\n          let Sym2 = Symbol(\"Sym\")\n          \n          console.log(Sym1 === Sym2) // returns \"false\"\n        `}\n      </CodePane>\n    </Slide>\n\n    <Slide backgroundColor=\"#0d0d0d\">\n      <Heading margin=\"0px\" fontSize=\"50px\">\n        String\n      </Heading>\n\n      <Text fontSize={30}>\n        Sirve para representar una cadena de caracteres. La longitud del string está dada por la cantidad de elementos que lo componen.\n      </Text>\n\n      <Text fontSize={30}>\n        El primer elemento está en el índice 0, el siguiente en el índice 1, y así sucesivamente. La longitud de una cadena es el número de elementos que contiene.\n      </Text>\n\n      <CodePane language=\"js\">\n        {`\n          const foo = 'Hello'\n\n          foo.length // 5\n          foo[0]     // H\n        `}\n      </CodePane>\n    </Slide>\n\n    <Slide backgroundColor=\"#0d0d0d\">\n      <Heading margin=\"0px\" fontSize=\"50px\">\n        String\n      </Heading>\n\n      <Text fontSize={30}>\n        Existe una gran cantidad de métodos que permiten manipular Strings, al igual que en la mayoría de los lenguajes\n      </Text>\n\n      <Text fontSize={30}>\n        Algunos ejemplos se pueden encontrar <a href=\"https://developer.mozilla.org/en-US/docs/Learn/JavaScript/First_steps/Useful_string_methods\">aquí</a>.\n      </Text>\n\n      <Notes>\n        Mencionar split, slice, splice, indexOf, replace, toLowercase, toUppercase, etc.\n      </Notes>\n    </Slide>\n\n    {/* Type Conversions */}\n    \n    <Slide backgroundColor=\"#0d0d0d\">\n      <Heading margin=\"0px\" fontSize=\"50px\">\n        Conversión de tipos\n      </Heading>\n\n      <Text fontSize={30}>\n        Muchas veces los operadores y las funciones convierten automáticamente los valores recibidos al tipo correcto.\n        Por ejemplo, la función alert convierte automáticamente cualquier valor recibido a string, y las operaciones matemáticas convierten cualquier tipo\n        a number.\n      </Text>\n      <Text fontSize={30}>\n        Sin embargo, a veces necesitamos explícitamente hacer una <a href=\"https://javascript.info/type-conversions\">conversion de tipos.</a>\n      </Text>\n      <Text fontSize={30}>\n        En otros lenguajes este proceso es también conocido como <b>casteo de tipos.</b>\n      </Text>\n    </Slide>\n\n    <Slide backgroundColor=\"#0d0d0d\">\n      <Heading margin=\"0px\" fontSize=\"50px\">\n        Conversión a String\n      </Heading>\n\n      <CodePane language=\"js\">\n        {`\n          // String conversion\n\n          let value = true;\n          console.log(typeof value); // boolean\n          \n          value = String(value); // now value is a string \"true\"\n          console.log(typeof value); // string\n        `}\n      </CodePane>\n    </Slide>\n\n    <Slide backgroundColor=\"#0d0d0d\">\n      <Heading margin=\"0px\" fontSize=\"50px\">\n        Conversión a Number\n      </Heading>\n\n      <CodePane language=\"js\">\n        {`\n          // Number conversion\n\n          let str = \"123\";\n          console.log(typeof str); // string\n          \n          let num = Number(str); // becomes a number 123\n          \n          console.log(typeof num)\n        `}\n      </CodePane>\n    </Slide>\n\n    <Slide backgroundColor=\"#0d0d0d\">\n      <Heading margin=\"0px\" fontSize=\"50px\">\n        Conversión a Boolean\n      </Heading>\n      <Text fontsize={30}>\n        Las reglas de conversión son simples:\n        <UnorderedList fontSize={30}>\n          <ListItem>Valores que son intuitivamente \"vacios\", como por ejemplo 0, un string vacío, null, undefined y NaN se convierten en <b>false.</b></ListItem>\n          <ListItem>El resto se convierten a <b>true.</b></ListItem>\n        </UnorderedList>\n      </Text>\n      <CodePane language=\"js\">\n        {`\n          // Boolean Conversion\n\n          console.log(Boolean(1)); // true\n          console.log(Boolean(0)); // false\n          \n          console.log(Boolean(\"hello\")); // true\n          console.log(Boolean(\"\")); // false\n        `}\n      </CodePane>\n    </Slide>\n\n    {/* Array */}\n    <Slide backgroundColor=\"#0d0d0d\">\n      <Heading margin=\"0px\" fontSize=\"50px\">\n        Arreglos\n      </Heading>\n\n      <Text fontSize={30}>\n        Son objetos en forma de lista que poseen una asociación particular entre claves númericas enteras y la longitud de la lista. Podemos decir que son estructuras indexadas.\n      </Text>\n\n      <Text fontSize={30}>\n        Para definir un arreglo podemos usar corchetes ([]) o generar una instancia utilizando la función <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Array\">Array()</a>.\n      </Text>\n\n      <CodePane language='js'>\n        {`\n          const fruits = ['Apple', 'Banana'];\n\n          const moreFruits = new Array('Orange', 'Watermelon');\n        `}\n      </CodePane>\n    </Slide>\n\n    <Slide backgroundColor=\"#0d0d0d\">\n      <Heading margin=\"0px\" fontSize=\"50px\">\n        Arreglos\n      </Heading>\n\n      <Text fontSize={30}>\n        Para acceder a los elementos podemos utilizar un índice numérico indicando la posición.\n      </Text>\n\n      <Text fontSize={30}>\n        También existe una gran variedad de métodos que nos permiten iterar, duplicar, partir y manipular los arreglos de múltiples formas distintas. Algunos ejemplos <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\">aquí</a>.\n      </Text>\n\n      <CodePane language='js'>\n        {`\n          const fruits = ['Apple', 'Banana'];\n\n          console.log(fruits.length); // 2\n          console.log(fruits[0]); // Apple\n\n          fruits.push('Pear'); ['Apple', 'Banana', 'Pear'];\n          fruits.pop(); 'Pear';\n          fruits.shift(); 'Apple';\n        `}\n      </CodePane>\n    </Slide>\n\n    {/* Object */}\n    <Slide backgroundColor=\"#0d0d0d\">\n      <Heading margin=\"0px\" fontSize=\"50px\">\n        Objetos\n      </Heading>\n\n      <Text fontSize={30}>\n        Podemos ver a los objetos como una colección de propiedades, cada una de los cuales posee un valor asociado. Las propiedades de un objeto son identificadas por \"claves\".\n      </Text>\n\n      <Text fontSize={30}>\n        Las claves de un objeto pueden ser de tipo String o Symbol, pero los valores pueden ser de cualquier tipo, incluso otros objetos.\n      </Text>\n\n      <Notes>\n        Notar que se describe a los objetos como collección de propiedades, no simplemente de claves y valores. Las propiedades tienen un valor, pero además de eso existen otros atributos.\n      </Notes>\n    </Slide>\n\n    <Slide backgroundColor=\"#0d0d0d\">\n      <Heading margin=\"0px\" fontSize=\"50px\">\n        Objetos\n      </Heading>\n\n      <Text fontSize={30}>\n        Podemos crear objetos utilizando la <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Grammar_and_types#object_literals\">object literal syntax</a> o a través de la instanciación de Object.\n      </Text>\n\n      <CodePane language='js'>\n        {`\n          let car = new Object();\n          car.brand = 'Ford';\n          car.model = 'Mustang';\n          car.year = 1969;\n          \n          let car2 = {\n            brand: 'Ford',\n            model: 'Mustang',\n            year: 1969\n          };\n        `}\n      </CodePane>\n    </Slide>\n\n    <Slide backgroundColor=\"#0d0d0d\">\n      <Heading margin=\"0px\" fontSize=\"50px\">\n        Objetos\n      </Heading>\n\n      <Text fontSize={30}>\n        Es muy fácil acceder, borrar o actualizar los valores de cualquiera de sus claves.\n      </Text>\n\n      <CodePane language='js'>\n        {`\n          let car = {\n            brand: 'Ford',\n            model: 'Mustang',\n            year: 1969\n          };\n\n          car.brand = 'Chevrolet';\n          \n          console.log(car.brand); // Chevrolet\n\n          delete(car.year);\n          console.log(car); // { brand: 'Chevrolet', model: 'Mustang' }\n        `}\n      </CodePane>\n    </Slide>\n\n    <Slide backgroundColor=\"#0d0d0d\">\n      <Heading margin=\"0px\" fontSize=\"50px\">\n        Objetos\n      </Heading>\n\n      <Text fontSize={30}>\n        Además del valor, las propiedades poseen otros atributos. <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#objects\">Más info</a>.\n      </Text>\n\n      <div style={{ textAlign: 'center' }}>\n        <img\n          src={`${process.env.PUBLIC_URL}/images/property_attributes.png`}\n          alt=\"property_attributes\"\n          width=\"80%\"\n          height=\"80%\"\n        />\n      </div>\n    </Slide>\n\n    <Slide backgroundColor=\"#0d0d0d\">\n      <Heading margin=\"0px\" fontSize=\"50px\">\n        Objetos\n      </Heading>\n\n      <Text fontSize={30}>\n        Para poder modificar alguno de los otros atributos de una propiedad de un objeto podemos utilizar el método <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty\">Object.defineProperty()</a>.\n      </Text>\n\n      <CodePane language='js'>\n        {`\n          let car = {\n            brand: 'Ford'\n          };\n\n          Object.defineProperty(car, 'model', {\n            value: 'Mustang',\n            writable: false\n          });\n\n          car.brand = 'Chevrolet';\n          car.model = 'Camaro';\n          \n          console.log(car); // { brand: 'Chevrolet', model: 'Mustang' }\n        `}\n      </CodePane>\n    </Slide>\n\n    {/* Falsy and truthy values */}\n\n    <Slide backgroundColor=\"#0d0d0d\">\n      <div>\n        <Heading margin=\"0px\" fontSize=\"50px\">\n          Valores \"falsy\" y \"truthy\"\n        </Heading>\n        <Text fontSize={30}>\n          En JavaScript, un valor verdadero (truthy) es un valor que se\n          considera <b>true</b> cuando es evaluado en un contexto Booleano. Todos los\n          valores son verdaderos excepto aquellos que evaluan a <b>false: </b>\n          <strong style={{ color: \"lightseagreen\"}} >false, 0, \"\", null, undefined, y NaN</strong>.\n        </Text>\n        <CodePane language=\"js\">\n          {`\n            // For example, these conditions will enter the if statement\n            if (true)\n            if ({})\n            if ([])\n            if (42)\n            if (\"foo\")\n            if (new Date())\n            if (-42)\n            if (3.14)\n            if (-3.14)\n            if (Infinity)\n            if (-Infinity)\n          `}\n        </CodePane>\n      </div>\n    </Slide>\n\n    {/* Logical Operators */}\n\n    <Slide backgroundColor=\"#0d0d0d\">\n      <div className=\"flex-center-column\">\n        <Heading margin=\"0px\" fontSize=\"50px\">\n          Operadores lógicos\n        </Heading>\n\n        <Text fontSize={30}>\n          En JavaScript existen 4 operadores lógicos:\n        </Text>\n        <UnorderedList fontSize={30}>\n          <ListItem>\n            || (OR)\n          </ListItem>\n          <ListItem>\n            && (AND)\n          </ListItem>\n          <ListItem>\n            ! (NOT)\n          </ListItem>\n          <ListItem>\n            ?? (Nullish Coalescing)\n          </ListItem>\n        </UnorderedList>\n      </div>\n    </Slide>\n\n    <Slide backgroundColor=\"#0d0d0d\">\n      <div className=\"flex-center-column\">\n        <Heading margin=\"0px\" fontSize={50}>\n          || (OR)\n        </Heading>\n\n        <Text fontSize={30}>\n          El operador lógico OR evalua a False cuando ambos operandos son False.\n          Caso contrario, siempre evalua a True.\n        </Text>\n        <Text fontSize={30}>\n          En JS la evaluación del OR es de <b>circuito corto</b>.\n        </Text>\n\n        <CodePane language=\"js\">\n          {`\n            let result = value1 || value2 || value3;\n          `}\n        </CodePane>\n        <Text fontSize={30}>\n          El operador OR hará lo siguiente:\n\n          <OrderedList>\n            <ListItem fontSize={30}>Evaluará los operandos de izquierda a derecha.</ListItem>\n            <ListItem fontSize={30}>Dependiendo el valor de verdad del operando actual: si el resultado es true, se detiene y retorna el valor original de ese operando.</ListItem>\n            <ListItem fontSize={30}>Si se evaluaron todos los operandos (y todos eran False), retorna el último operando.</ListItem>\n          </OrderedList>\n        </Text>\n      </div>\n    </Slide>\n\n    <Slide backgroundColor=\"#0d0d0d\">\n      <div className=\"flex-center-column\">\n        <Heading fontSize={50}>\n          || (OR)\n        </Heading>\n        <Text fontSize={30}>\n          Siguiendo el ejemplo anterior...\n        </Text>\n        <CodePane language=\"js\">\n          {`\n            let firstName = \"\";\n            let lastName = \"\";\n            let nickName = \"Bob\";\n\n            console.log(firstName || lastName || nickName || \"Anonymous\"); // Bob\n          `}\n        </CodePane>\n        <br></br>\n        <CodePane language=\"js\">\n          {`\n            let groupOne = [];\n            let groupTwo = [];\n\n            console.log(groupOne || groupTwo || [\"Bob\", \"Ana\", \"Cam\"]); // [];\n          `}\n        </CodePane>\n      </div>\n    </Slide>\n\n    <Slide backgroundColor=\"#0d0d0d\">\n      <div className=\"flex-center-column\">\n        <Heading margin=\"0px\" fontSize={50}>\n          && (AND)\n        </Heading>\n\n        <Text fontSize={30}>\n          El operador lógico AND evalua a True cuando ambos operandos son True.\n          Caso contrario, siempre evalua a False.\n        </Text>\n        <Text fontSize={30}>\n          En JS la evaluación del AND es de <b>circuito corto</b>.\n        </Text>\n\n        <CodePane language=\"js\">\n          {`\n            let result = value1 && value2 && value3;\n          `}\n        </CodePane>\n        <Text fontSize={30}>\n          El operador AND hará lo siguiente:\n\n          <OrderedList>\n            <ListItem fontSize={30}>Evaluará los operandos de izquierda a derecha.</ListItem>\n            <ListItem fontSize={30}>Dependiendo el valor de verdad del operando actual: si el resultado es false, se detiene y retorna el valor original de ese operando.</ListItem>\n            <ListItem fontSize={30}>Si se evaluaron todos los operandos (y todos eran True), retorna el último operando.</ListItem>\n          </OrderedList>\n        </Text>\n      </div>\n    </Slide>\n\n    <Slide backgroundColor=\"#0d0d0d\">\n      <div className=\"flex-center-column\">\n        <Heading fontSize={50}>\n          && (AND)\n        </Heading>\n        <Text fontSize={30}>\n          Siguiendo el ejemplo anterior...\n        </Text>\n        <CodePane language=\"js\">\n          {`\n            // Si el primer operando es \"truthy\", el AND retornará el segundo operando:\n            console.log(1 && 0); // 0\n            console.log(1 && 5); // 5\n            \n            // Si el primer operando es \"falsy\", AND lo retorna. El segundo operando es ignorado.\n            console.log(null && 5); // null\n            console.log(0 && \"no matter what\"); // 0\n          `}\n        </CodePane>\n      </div>\n    </Slide>\n\n    <Slide backgroundColor=\"#0d0d0d\">\n      <div className=\"flex-center-column\">\n        <Heading margin=\"0px\" fontSize={50}>\n          ! (NOT)\n        </Heading>\n\n        <Text fontSize={35}>\n          El operador lógico NOT es utilizado para invertir el valor de verdad de un valor cualquiera.\n        </Text>\n        <OrderedList>\n          <ListItem fontSize={30}>\n            Convierte el operando a su tipo booleano: <b>true</b> / <b>false</b>.\n          </ListItem>\n          <ListItem fontSize={30}>\n            Retorna el valor inverso.\n          </ListItem>\n        </OrderedList>\n\n        <CodePane language=\"js\">\n          {`\n            console.log(!true); // false\n            console.log(!0); // true\n          `}\n        </CodePane>\n\n        <Text fontSize={30}>\n          Un doble NOT !! se utiliza a veces para convertir valores a su tipo booleano:\n        </Text>\n\n        <CodePane language=\"js\">\n          {`\n            console.log(!!\"non-empty string\"); // true\n            console.log(!!null); // false\n          `}\n        </CodePane>\n      </div>\n    </Slide>\n\n    <Slide backgroundColor=\"#0d0d0d\">\n      <div className=\"flex-center-column\">\n        <Heading fontSize={50}>\n          ?? (Nullish Coalescing)\n        </Heading>\n\n        <Text fontSize={30}>\n          El operador de Nullish Coalescing se escribe con dos signos <b>?</b>.\n          Si evaluamos <b>a ?? b</b> lo que sucede es lo siguiente:\n          <UnorderedList fontSize={30}>\n            <ListItem fontSize={30}>Si la variable <b>a</b> está definida, entonces se devuelve <b>a</b></ListItem>\n            <ListItem fontSize={30}>Si la variable <b>a</b> no está definida, entonces se devuelve <b>b</b>.</ListItem>\n          </UnorderedList>\n        </Text>\n\n        <Text fontSize={30}>\n          Es importante notar que este operador trata a <b>undefined</b> y <b>Null</b> de igual manera, por lo que decimos\n          que una variable esta definida si no es ni undefined ni Null.\n        </Text>\n\n        <CodePane language=\"js\">\n          {`\n            let user;\n\n            console.log(user ?? \"Anonymous\"); // Anonymous (user not defined)\n          `}\n        </CodePane>\n      </div>\n    </Slide>\n\n    {/* Basic Control Structures */}\n\n    <Slide backgroundColor=\"#0d0d0d\">\n      <div className=\"flex-center-column\">\n        <Heading margin=\"0px\" fontSize=\"50px\">\n          Estructuras de control\n        </Heading>\n\n        <Text fontSize={30}>\n          En JavaScript existen 5 estructuras de control básicas:\n        </Text>\n        <UnorderedList fontSize={30}>\n          <ListItem>\n            If / else\n          </ListItem>\n          <ListItem>\n            While\n          </ListItem>\n          <ListItem>\n            Do - while\n          </ListItem>\n          <ListItem>\n            For\n          </ListItem>\n          <ListItem>\n            Switch\n          </ListItem>\n        </UnorderedList>\n      </div>\n    </Slide>\n\n    <Slide backgroundColor=\"#0d0d0d\">\n      <div className=\"flex-center-column\">\n        <Heading margin=\"0px\" fontSize=\"50px\">\n          If / else\n        </Heading>\n\n        <Text fontSize={30}>\n          La sintáxis de la sentencia if es la siguiente (la cláusula <b>else</b> es opcional):\n        </Text>\n        <CodePane language=\"js\">\n          {`\n            if (condition) {\n              // if block statements\n            } else {\n              // else block statements\n            }\n          `}\n        </CodePane>\n        <Text fontSize={30}>\n          La sentencia if evalúa la expresión entre paréntesis y luego utiliza el valor de verdad del resultado de dicha evaluación.\n          Por ejemplo, la siguiente condición nunca ejecutará el bloque de código <b>block1.</b>\n        </Text>\n        <CodePane language=\"js\">\n          {\n            `\n                if (0) { // 0 is a falsy value\n                  // block1\n                }\n              `\n          }\n        </CodePane>\n      </div>\n    </Slide>\n\n    <Slide backgroundColor=\"#0d0d0d\">\n      <div className=\"flex-center-column\">\n        <Heading margin=\"0px\" fontSize=\"50px\">\n          Conditional operator (?)\n        </Heading>\n\n        <Text fontSize={30}>\n          Existe también el operador condicional <b>?</b> que nos permite escribir una sentencia if de manera\n          mucho más corta y simple.\n        </Text>\n        <CodePane language=\"js\">\n          {`\n            let result = condition ? value1 : value2;\n          `}\n        </CodePane>\n        <Text fontSize={30}>\n          En caso que <b>condition</b> evalue a true, entonces se asignará <b>value1</b> a la variable <b>result</b>,\n          caso contrario se asignará <b>value2</b>.\n        </Text>\n      </div>\n    </Slide>\n\n    <Slide backgroundColor=\"#0d0d0d\">\n      <div>\n        <Heading margin=\"0px\" fontSize=\"50px\">\n          Conditional operator (?) (cont...)\n        </Heading>\n        <Text fontSize={30}>\n          El <b>?</b> puede combinarse múltiples veces simulando sentencias <b>if/else</b>:\n        </Text>\n        <CodePane language=\"js\">\n          {`\n              let carBrand = \"Peugeot\";\n\n              let message = (carBrand == \"Suzuki\") ? \"Nice Suzuki!\" :\n                (carBrand == \"Fiat\") ? 'Nice Fiat!' :\n                (carBrand == \"Peugeot\") ? 'Nice Peugeot!' :\n                'I don't know that brand, nice car!';\n              \n              console.log(message);\n            `}\n        </CodePane>\n      </div>\n    </Slide>\n\n    <Slide backgroundColor=\"#0d0d0d\">\n      <div>\n        <Heading margin=\"0px\" fontSize=\"50px\">\n          While\n        </Heading>\n        <Text fontSize={30}>\n          La sintáxis del loop <b>while</b> es la siguiente:\n        </Text>\n        <CodePane language=\"js\">\n          {`\n              while (condition) {\n                // statements\n              }\n            `}\n        </CodePane>\n        <Text fontSize={30}>\n          El bloque de código que se encuentra dentro del loop while se ejecutará mientras\n          la evaluación de la condición sea <b>true</b>.\n        </Text>\n        <Text fontSize={30}>\n          Para finalizar la ejecución del loop antes que se cumpla la condición podemos utilizar la sentencia <b>break</b>.\n        </Text>\n      </div>\n    </Slide>\n\n    <Slide backgroundColor=\"#0d0d0d\">\n      <div>\n        <Heading margin=\"0px\" fontSize=\"50px\">\n          Do - while\n        </Heading>\n        <Text fontSize={30}>\n          El loop do-while es muy similar al loop while, excepto que en este caso primero se ejecuta el bloque\n          de código contenido dentro del mismo y luego se evalua la condición. Su sintáxis es la siguiente:\n        </Text>\n        <CodePane language=\"js\">\n          {`\n              do {\n                // statements\n              } while (condition);\n            `}\n        </CodePane>\n        <Text fontSize={30}>\n          Para finalizar la ejecución del loop antes que se cumpla la condición podemos utilizar la sentencia <b>break</b>.\n        </Text>\n      </div>\n    </Slide>\n\n    <Slide backgroundColor=\"#0d0d0d\">\n      <div>\n        <Heading margin=\"0px\" fontSize=\"50px\">\n          For\n        </Heading>\n        <Text fontSize={30}>\n          La sintáxis del loop <b>For</b> es la siguiente:\n        </Text>\n        <CodePane language=\"js\">\n          {`\n              for (begin; condition; step) {\n                // ... loop body ...\n              }\n            `}\n        </CodePane>\n        <Text fontSize={30}>\n          Por ejemplo, para ejecutar un bloque de código 30 veces deberíamos declarar la condición\n          del for de la siguiente manera:\n        </Text>\n        <CodePane language=\"js\">\n          {`\n            for (let i = 0; i < 30; i++) { // shows 0, then 1, then 2\n              console.log(i);\n            }\n          `}\n        </CodePane>\n        <Text fontSize={30}>\n          Para saltar a la siguiente iteración, podemos utilizar la sentencia <b>continue</b> y para finalizar\n          la ejecución del loop antes que se cumpla la condición podemos utilizar la sentencia <b>break</b>.\n        </Text>\n      </div>\n    </Slide>\n\n    <Slide backgroundColor=\"#0d0d0d\">\n      <div>\n        <Heading margin=\"0px\" fontSize=\"50px\">\n          for..in & for..of\n        </Heading>\n        <Text fontSize={30}>\n          Existen otros tipos de loop <b>for</b> que sirven a distintos casos de uso:\n        </Text>\n        <UnorderedList fontSize={30}>\n          <ListItem>\n            for..in\n            <Text fontSize={30}>La instrucción <b>for ... in</b> itera sobre todas las propiedades enumerables de un objeto.\n              Generalmente se utiliza para recorrer las \"claves\" o propiedades de un objeto.</Text>\n          </ListItem>\n          <ListItem>\n            for..of\n            <Text fontSize={30}>La instrucción <b>for ... of</b> crea un loop que itera sobre objetos iterables,\n              incluidos: String, Array, objetos similares a arreglos (por ejemplo, argumentos o NodeList),\n              TypedArray, Map, Set e iterables definidos por el usuario.</Text>\n          </ListItem>\n        </UnorderedList>\n      </div>\n    </Slide>\n\n    <Slide backgroundColor=\"#0d0d0d\">\n      <div>\n        <Heading margin=\"0px\" fontSize=\"50px\">\n          Ejemplo de uso for..in\n        </Heading>\n        <CodePane language=\"js\">\n          {`\n            const car = {\n              brand: \"Peugeot\",\n              model: \"208\",\n              year: 2019\n            }\n\n            for (const prop in car) {\n              console.log(prop);\n            }\n\n            // brand\n            // model\n            // year\n          `}\n        </CodePane>\n      </div>\n    </Slide>\n\n    <Slide backgroundColor=\"#0d0d0d\">\n      <div>\n        <Heading margin=\"0px\" fontSize=\"50px\">\n          Ejemplo de uso for..of\n        </Heading>\n        <CodePane language=\"js\">\n          {`\n            const array1 = ['a', 'b', 'c'];\n\n            for (const element of array1) {\n              console.log(element);\n            }\n            \n            // expected output: \"a\"\n            // expected output: \"b\"\n            // expected output: \"c\"\n          `}\n        </CodePane>\n      </div>\n    </Slide>\n\n    <Slide backgroundColor=\"#0d0d0d\">\n      <div>\n        <Heading margin=\"0px\" fontSize=\"50px\">\n          for..in vs for..of\n        </Heading>\n        <CodePane language=\"js\">\n          {`\n            const array1 = ['a', 'b', 'c'];\n\n            for (const element of array1) {\n              console.log(element);\n            }\n            \n            // expected output: \"a\"\n            // expected output: \"b\"\n            // expected output: \"c\"\n\n            for (const element in array1) {\n              console.log(element);\n            }\n\n            // expected output: \"0\"\n            // expected output: \"1\"\n            // expected output: \"2\"\n          `}\n        </CodePane>\n      </div>\n    </Slide>\n\n    <Slide backgroundColor=\"#0d0d0d\">\n      <div>\n        <Heading margin=\"0px\" fontSize=\"50px\">\n          Switch\n        </Heading>\n        <Text fontSize={30}>\n          El <b>switch</b> puede utilizarse para reemplazar múltiples sentencias <b>if</b> y su sintáxis es la siguiente:\n        </Text>\n        <CodePane language=\"js\">\n          {`\n              switch(x) {\n                case 'value1':  // if (x === 'value1')\n                  ...\n                  break; // break clause is optional, in case it's not present, following conditions are evaluated.\n                case 'value2':  // if (x === 'value2')\n                  ...\n                  break;\n                default:\n                  ...\n              }\n            `}\n        </CodePane>\n      </div>\n    </Slide>\n\n    {/* Error handling */}\n\n    <Slide backgroundColor=\"#0d0d0d\">\n      <div>\n        <Heading margin=\"0px\" fontSize=\"50px\">\n          Manejo de errores\n        </Heading>\n        <Text fontSize={30}>\n          JavaScript nos provee los bloques <b>try..catch</b> para capturar errores en tiempo de ejecución que pueden\n          provocar la finalización de nuestro script.\n        </Text>\n        <CodePane language=\"js\">\n            {`\n              try {\n                null = \"this is a null variable\";\n              } catch (err) {\n                console.log(err); // Syntax Error\n                console.log('Hey! Something went wrong...');\n              }\n            `}\n        </CodePane>\n        <Text fontSize={30}>\n          Como se puede ver en el snippet anterior, el bloque catch recibe siempre un objeto error como parámetro.\n          Este objeto error tiene 2 propiedades principales:\n          <UnorderedList fontSize={30}>\n            <ListItem>\n              name: el nombre del error (SyntaxError, TypeError, etc...)\n            </ListItem>\n            <ListItem>\n              message: un mensaje descriptivo que brinda un poco (no tanto) más de detalle sobre el error\n            </ListItem>\n          </UnorderedList>\n        </Text>\n      </div>\n    </Slide>\n\n    <Slide backgroundColor=\"#0d0d0d\">\n      <div>\n        <Heading margin=\"0px\" fontSize=\"50px\">\n          Manejo de errores (cont.)\n        </Heading>\n        <Text fontSize={30}>\n          Si no necesitamos detalles sobre el error podemos <b>omitir el parámetro error en el bloque catch. </b>\n          Además, pueden existir casos donde deseemos lanzar un error de manera intencional por comportamiento imprevisto\n          en el código. Para esto utilizamos la palabra clave <b>throw</b>.\n        </Text>\n        <CodePane language=\"js\">\n            {`\n              let json = '{ \"age\": 30 }'; // incomplete data\n\n              try {\n                let user = JSON.parse(json); // <-- no errors\n                if (!user.name) {\n                  throw new SyntaxError(\"Incomplete data: no name\");\n                }\n                console.log(user.name);\n              } catch (err) {\n                console.log(\"JSON Error: \" + err.message); // JSON Error: Incomplete data: no name\n              }\n            `}\n        </CodePane>\n      </div>\n    </Slide>\n\n    <Slide backgroundColor=\"#0d0d0d\">\n      <div>\n        <Heading margin=\"0px\" fontSize=\"50px\">\n          Manejo de errores (cont.)\n        </Heading>\n        <Text fontSize={30}>\n          Para lanzar errores propios JavaScript nos provee varios constructores para errores comúnes: Error, SyntaxError, ReferenceError, TypeError y otros.\n          Su sintáxis es la siguiente:\n        </Text>\n        <CodePane language=\"js\">\n            {`\n              let error = new Error(message);\n              // or\n              let error = new SyntaxError(message);\n              let error = new ReferenceError(message);\n              // ...\n            `}\n        </CodePane>\n        <Text fontSize={30}>\n          En estos casos, la propiedad <b>name</b> tendrá como valor el nombre del constructor (ej. SyntaxError) y la propiedad <b>message</b> tendrá como valor lo que hayamos pasado como parámetro al constructor.\n        </Text>\n      </div>\n    </Slide>\n\n    <Slide backgroundColor=\"#0d0d0d\">\n      <div>\n        <Heading margin=\"0px\" fontSize=\"50px\">\n          Manejo de errores (cont.)\n        </Heading>\n        <Text fontSize={30}>\n          Los bloques <b>try..catch</b> pueden contar con una cláusula extra (opcional) llamada <b>finally</b>.\n          Si está presente, el código contenido dentro de ese bloque se ejecutará siempre:\n          <UnorderedList fontSize={30}>\n            <ListItem>Después del <b>try</b> si no hubo errores.</ListItem>\n            <ListItem>Después del <b>catch</b> si hubo errores.</ListItem>\n          </UnorderedList>\n        </Text>\n        <CodePane language=\"js\">\n            {`\n              try {\n                ... try to execute the code ...\n             } catch (err) {\n                ... handle errors ...\n             } finally {\n                ... execute always ...\n             }\n            `}\n        </CodePane>\n      </div>\n    </Slide>\n\n    <Slide backgroundColor=\"#0d0d0d\">\n      <div>\n        <Heading margin=\"0px\" fontSize=\"50px\">\n          Creando nuestro propio error\n        </Heading>\n        <Text fontSize={30}>\n          Cuando estamos desarrollando es probable que querramos tener nuestras propias clases de errores\n          para reflejar situaciones específicas que pueden fallar durante la ejecución de nuestros programas.\n          Para esto, JavaScript nos permite definir clases que extienden de la clase base <b>Error</b>.\n        </Text>\n        <CodePane language=\"js\">\n          {`\n            class ValidationError extends Error {\n              constructor(message) {\n                super(message); // (1)\n                this.name = \"ValidationError\"; // (2)\n              }\n            }\n          \n            function test() {\n              throw new ValidationError(\"Whoops!\");\n            }\n          `}\n        </CodePane>\n      </div>\n    </Slide>\n\n    <Slide backgroundColor=\"#0d0d0d\">\n      <div>\n        <Heading margin=\"0px\" fontSize=\"50px\">\n          Creando errores custom (cont.)\n        </Heading>\n        <Text fontSize={30}>\n          En el ejemplo anterior, definimos un nuevo tipo de error para reflejar fallos en validaciones. Si bien al\n          extender de la clase <b>Error</b> nuestra clase hereda las 3 propiedades básicas <b>message, name y stack</b>,\n          podriamos definir todas las props extras que querramos.\n        </Text>\n        <CodePane language=\"js\">\n          {`\n            class HttpError extends Error {\n              constructor(message, statusCode) {\n                super(message); // (1)\n                this.name = \"HttpError\"; // (2)\n                this.statusCode = statusCode;\n              }\n            }\n          \n            function test() {\n              throw new HttpError(\"User not found\", 404);\n            }\n          `}\n        </CodePane>\n      </div>\n    </Slide>\n\n    {/* Functions */}\n\n    <Slide backgroundColor=\"#0d0d0d\">\n      <Heading margin=\"0px\" fontSize=\"50px\">\n        Funciones\n      </Heading>\n\n      <Text fontSize={30}>\n        Javascript nos permite definir funciones para modularizar y evitar repetir nuestro código.\n      </Text>\n\n      <Text fontSize={30}>\n        Para esto, podemos utilizar la palabra clave <b>function</b>.\n      </Text>\n\n      <CodePane language=\"js\">\n        {`\n          function myFunction(arg_1, arg_2) {\n            console.log(\"This is a function with two arguments!\")\n          }\n        `}\n      </CodePane>\n    </Slide>\n\n    <Slide backgroundColor=\"#0d0d0d\">\n      <Heading margin=\"0px\" fontSize=\"50px\">\n        Funciones\n      </Heading>\n\n      <Text fontSize={30}>\n        En caso de pasar un parámetro de tipo primitivo, por ejemplo un número, este parámetro será pasado por valor.\n      </Text>\n\n      <Text fontSize={30}>\n        En caso de pasar un objeto o array por parámetro, éste será pasado por referencia.\n      </Text>\n\n      <CodePane language=\"js\">\n        {`\n          function myFunction(theObject) {\n            theObject.brand = 'Toyota';\n          }\n\n          let mycar = { brand: 'Honda', model: 'Accord', year: 1998 };\n          console.log(mycar.brand); // \"Honda\"\n\n          myFunc(mycar);\n          console.log(mycar.brand); // \"Toyota\"\n        `}\n      </CodePane>\n    </Slide>\n\n    <Slide backgroundColor=\"#0d0d0d\">\n      <Heading margin=\"0px\" fontSize=\"50px\">\n        Expresiones\n      </Heading>\n\n      <Text fontSize={30}>\n        Las funciones también pueden ser definidas como <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/function\">expresiones</a>.\n      </Text>\n\n      <Text fontSize={30}>\n        Podemos definir funciones anónimas, sin proveer un nombre en su declaración.\n      </Text>\n\n      <CodePane language=\"js\">\n        {`\n          // This is an expression.\n          const square = function square(number) { return number * number }\n\n          // This is an anonymous function declared as an expression.\n          const square2 = function(number) { return number * number }\n        `}\n      </CodePane>\n    </Slide>\n\n    <Slide backgroundColor=\"#0d0d0d\">\n      <Heading margin=\"0px\" fontSize=\"50px\">\n        Lexical scoping\n      </Heading>\n\n      <Text fontSize={30}>\n        En JavaScript una función puede definirse dentro de otra. De esta forma, la función de adentro tiene acceso al contexto de la función que la contiene, pudiendo acceder a todo lo que está en su alcance.\n      </Text>\n\n      <CodePane language=\"js\">\n        {`\n          function init() {\n            var name = 'Mozilla'; // name is a local variable created by init\n            function displayName() { // displayName() is the inner function, a closure\n              console.log(name); // use variable declared in the parent function\n            }\n            displayName();\n          }\n          init();\n        `}\n      </CodePane>\n    </Slide>\n\n    <Slide backgroundColor=\"#0d0d0d\">\n      <Heading margin=\"0px\" fontSize=\"50px\">\n        Closures\n      </Heading>\n\n      <Text fontSize={30}>\n        Un closure es la combinación de una función y el entorno léxico dentro del cual se declaró esa función. Este entorno consta de las variables locales que estaban dentro del alcance en el momento en que se creó el closure.\n      </Text>\n\n      <CodePane language=\"js\">\n        {`\n          function makeFunc() {\n            var name = 'Mozilla';\n            function displayName() {\n              console.log(name);\n            }\n            return displayName;\n          }\n\n          var myFunc = makeFunc();\n          myFunc();\n        `}\n      </CodePane>\n\n      <Notes>\n        <p>\n          En este ejemplo, la función makeFunc no retorna un valor sino que retorna displayName, que es la función que se define dentro de makeFunc.\n        </p>\n\n        <p>\n          Debido a que la función displayName utiliza una variable local a makeFunc, al invocarla luego displayName sigue mostrando el nombre Mozilla, a pesar de que ese valor ya no forme parte del contexto de ejecución (formó parte del contexto de declaración).\n        </p>\n      </Notes>\n    </Slide>\n\n    {/* Hoisting */}\n\n    <Slide backgroundColor=\"#0d0d0d\">\n      <div style={{width: '80%'}}>\n        <Heading margin=\"0px\" fontSize=\"50px\">\n          Hoisting\n        </Heading>\n\n        <Text fontSize={30}>\n          Si bien el código en JS se ejecuta de manera secuencial (se ejecuta una línea y al terminar se ejecuta la que está debajo), el motor de JS procesa la declaración de funciones y variables previo a la ejecución del código.\n        </Text>\n\n        <Text fontSize={30}>\n          Para obtener más información, ver <a href=\"https://www.javascripttutorial.net/javascript-execution-context/\">Javascript execution Context</a>.\n        </Text>\n\n        <FlexBox justifyContent=\"space-between\">\n          <CodePane language=\"js\">\n            {`\n              catName(\"Chloe\");\n\n              function catName(name) {\n                console.log(\"My cat's name is \" + name);\n              }\n            `}\n          </CodePane>\n\n          <iframe src={`${process.env.PUBLIC_URL}/snippets/class1/hoisting1.html`}></iframe>\n        </FlexBox>\n      </div>\n\n      <Notes>\n        Podríamos pensar como que JS \"mueve las declaraciones de variables y funciones al principio de los archivos\" y por eso éstas pueden ser utilizadas previo a su declaración.\n      </Notes>\n    </Slide>\n\n    <Slide backgroundColor=\"#0d0d0d\">\n      <Heading margin=\"0px\" fontSize=\"50px\">\n        Hoisting\n      </Heading>\n\n      <Text fontSize={30}>\n        El hoisting de funciones, solo funciona con \"function declarations\" y no con \"function expressions\".\n      </Text>\n\n      <CodePane language=\"js\">\n        {`\n          console.log(square);    // square is hoisted with an initial value undefined.\n          console.log(square(5)); // Uncaught TypeError: square is not a function\n\n          const square = function(n) {\n            return n * n;\n          }\n        `}\n      </CodePane>\n    </Slide>\n\n    <Slide backgroundColor=\"#0d0d0d\">\n      <div style={{width: '80%'}}>\n\n        <Heading margin=\"0px\" fontSize=\"50px\">\n          Hoisting\n        </Heading>\n\n        <Text fontSize={30}>\n          En el caso de las variables definidas con <b>var</b>, éstas serán declaradas e inicializadas con el valor <b>undefined</b>.\n        </Text>\n\n        <Text fontSize={30}>\n          En el caso de variables definidas con <b>let</b> o constantes utilizando <b>const</b>, cualquier referencia a ellas previa a la línea donde son declaradas lanzará una excepción.\n        </Text>\n\n        <FlexBox justifyContent=\"space-between\">\n          <CodePane language=\"js\">\n            {`\n              console.log(num_var); // Returns 'undefined' from hoisted var declaration (not 6)\n              var num_var; // Declaration\n              num_var = 6; // Initialization\n\n              console.log(num_const) // ReferenceError\n              console.log(num_let) // ReferenceError\n              const num_const = 6;\n              let num_let;\n            `}\n          </CodePane>\n\n          <iframe src={`${process.env.PUBLIC_URL}/snippets/class1/hoisting2.html`}></iframe>\n        </FlexBox>\n      </div>\n\n      <Notes>\n        El motor de JavaScript solo hace el \"hoisting\" de la declaración de las variables, es decir que no tiene en cuenta su inicialización.\n      </Notes>\n    </Slide>\n\n    { /* Blocks and scopes */ }\n\n    <Slide backgroundColor=\"#0d0d0d\">\n      <div>\n        <Heading margin=\"0px\" fontSize=\"50px\">\n          Bloques\n        </Heading>\n        <Text fontSize={30}>\n          Los bloques se utilizan para agrupar cero o más sentencias y están delimitados por llaves {'{'} {'}'}.\n          Por ejemplo, las sentencias if y los loops vistos declaran un bloque para agrupar a las sentencias afectadas.\n        </Text>\n        <CodePane language=\"js\">\n          {`\n            var x = 1;\n            let y = 1;\n            \n            if (true) {  // start of the block\n              var x = 2;\n              let y = 2;\n            }            // end of the block\n            \n            console.log(x); // expected output: 2\n\n            console.log(y); // expected output: 1\n          `}\n        </CodePane>\n      </div>\n    </Slide>\n\n    <Slide backgroundColor=\"#0d0d0d\">\n      <div>\n        <Heading margin=\"0px\" fontSize=\"50px\">\n          Alcance de las variables\n        </Heading>\n        <Text fontSize={30}>\n          El alcance de una variable hace referencia a la región del programa donde la misma puede utilizarse.\n          En JavaScript los distintos tipos de variables vistos (var, let y const) tienen distintos alcances.\n          <UnorderedList fontSize={30}>\n            <ListItem><b>var:</b> podemos decir que tiene alcance \"global\".</ListItem>\n            <ListItem><b>let y const:</b> podemos decir que ambas tienen alcance de bloque. Las variables declaradas\n            con let y const podrán ser referenciadas dentro del bloque en que fueron declaradas.</ListItem>\n          </UnorderedList>\n        </Text>\n      </div>\n    </Slide>\n\n    <Slide backgroundColor=\"#0d0d0d\">\n      <div>\n        <Heading margin=\"0px\" fontSize=\"50px\">\n          Temporal Dead Zone <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let#temporal_dead_zone_tdz\">(TDZ)</a>\n        </Heading>\n        <Text fontSize={30}>\n          Las variables declaradas con <b>let</b> no pueden ser accedidas ni escritas hasta que hayan\n          sido completamente inicializadas, lo cual sucede en la declaración de las mismas. Acceder a \n          esa variable antes de haber sido inicializada resultará en <b>ReferenceError.</b>\n        </Text>\n        <Text fontSize={30}>\n          Se dice que la variable está en una \"zona muerta temporal\" desde el inicio del bloque hasta\n          que la inicialización de la misma se haya completado.\n        </Text>\n        <CodePane language=\"js\">\n          {`\n            { // TDZ starts at beginning of scope\n              console.log(bar); // undefined\n              console.log(foo); // ReferenceError\n              var bar = 1;\n              let foo = 2; // End of TDZ (for foo)\n            }\n          `}\n        </CodePane>\n      </div>\n    </Slide>\n\n    <Slide backgroundColor=\"#0d0d0d\">\n      <div>\n        <Heading margin=\"0px\" fontSize=\"50px\">\n          Alcance de las variables (cont.)\n        </Heading>\n        <CodePane language=\"js\">\n          {`\n            var x = 1;\n            {\n              var x = 2;\n            }\n            console.log(x); // logs 2\n\n            let x = 1;\n            {\n              let x = 2;\n            }\n            console.log(x); // logs 1\n          `}\n        </CodePane>\n      </div>\n    </Slide>\n\n    <Slide backgroundColor=\"#0d0d0d\">\n      <div>\n        <Heading margin=\"0px\" fontSize=\"50px\">\n          Alcance dentro de funciones\n        </Heading>\n        <Text fontSize={30}>\n          Las variables declaradas dentro de una función no pueden ser accedidas fuera de la misma. \n          Sin embargo, una función SI puede acceder a todas las variables declaradas dentro del alcance \n          donde la función misma fue declarada.\n        </Text>\n      </div>\n    </Slide>\n\n    <Slide backgroundColor=\"#0d0d0d\">\n      <div style={{ width: '80%'}}>\n        <Heading margin=\"0px\" fontSize=\"50px\">\n          Alcance dentro de funciones (cont.)\n        </Heading>\n\n        <div style={{ display: 'flex' }}>\n          <CodePane language=\"js\">\n            {`\n              // The following variables are defined in the global scope\n              var num1 = 10,\n                  num2 = 5,\n                  name = 'Juan';\n\n              // A nested function example\n              function getScore() {\n                var num1 = 2,\n                    num2 = 3;\n                  \n                function add() {\n                  return name + ' scored ' + (num1 + num2);\n                }\n\n                return add();\n              }\n\n              getScore();\n            `}\n          </CodePane>\n\n          <iframe src={`${process.env.PUBLIC_URL}/snippets/class1/scopes2.html`}></iframe>\n        </div>\n      </div>\n    </Slide>\n\n    <Slide backgroundColor=\"#0d0d0d\">\n      <div style={{ width: '80%'}}>\n        <Heading margin=\"0px\" fontSize=\"50px\">\n          Alcance dentro de funciones (cont.)\n        </Heading>\n\n        <div style={{ display: 'flex' }}>\n          <CodePane language=\"js\">\n            {`\n            function addFive(num) {\n                var numberFive = 5;\n                return num + numberFive;\n            }\n\n            addFive(3); // expected output: 8\n\n            console.log(numberFive);\n            `}\n          </CodePane>\n\n          <iframe src={`${process.env.PUBLIC_URL}/snippets/class1/scopes1.html`}></iframe>\n        </div>\n      </div>\n    </Slide>\n\n    <Slide backgroundColor=\"#0d0d0d\">\n      <div>\n        <Heading margin=\"0px\" fontSize=\"50px\">\n          Alcance de declaraciones de funciones\n        </Heading>\n        <Text fontSize={30}>\n          Las declaraciones de funciones son siempre locales al alcance actual. Esto quiere decir que si son\n          definidas en el contexto global, serán alcanzables por todo el script, y si son definidas dentro de otro bloque\n          seran solo alcanzables dentro de ese bloque.\n        </Text>\n        <CodePane language=\"js\">\n          {`\n            // global scope\n\n            // foo is a global function\n            function foo() {\n                // bar is local to foo\n                function bar() {\n                }\n            }\n          `}\n        </CodePane>\n      </div>\n    </Slide>\n\n    {/* Typeof */}\n\n    <Slide backgroundColor=\"#0d0d0d\">\n      <div>\n        <Heading margin=\"0px\" fontSize=\"50px\">\n          Operador typeof\n        </Heading>\n        <Text fontSize={30}>\n          Para inspeccionar el tipo de un valor podemos utilizar el operador <b>typeof</b>. Este operador retorna el\n          tipo de un valor en formato string. Puede utilizarse con o sin paréntesis alrededor del valor por el cual se está consultando:\n          <strong style={{ color: \"lightseagreen\" }}> typeof(true)</strong> ó <strong style={{ color: \"lightseagreen\" }}>typeof false</strong>.\n        </Text>\n        <CodePane language=\"js\">\n          {`\n            typeof(false);              // expected output: “boolean”\n            typeof({});                 // expected output: “object”\n            typeof(1);                  // expected output: “number”\n\n            let aString = “Un string”;\n            typeof(aString);            // expected output: “string”\n\n            typeof([]);                 // expected output: ???\n            typeof(null);               // expected output: ???\n            typeof(undefined);          // expected output: ???\n            typeof(function hey(){});   // expected output: ???\n          `}\n        </CodePane>\n      </div>\n    </Slide>\n\n    {/* CodeSandbox */}\n\n    <Slide backgroundColor=\"#0d0d0d\">\n      <div>\n        <Heading margin=\"0px\" fontSize=\"50px\">\n          CodeSandbox\n        </Heading>\n        <Text className=\"flex-center-column\" fontSize={30}>\n          <a href=\"https://codesandbox.io/s/boring-haze-h36gd?file=/src/index.js:168-247\">Ejercicios</a>\n        </Text>\n      </div>\n    </Slide>\n  </>\n);\n","import React from \"react\";\nimport '../../styles/styles.css';\nimport * as Slides from './slides';\n\nexport default () => (\n  <>\n    <Slides.DomIntro />\n  </>\n);\n","import React from 'react';\nimport {\n  Slide,\n  Heading,\n  Text,\n  CodePane,\n  FlexBox,\n  UnorderedList,\n  ListItem,\n} from 'spectacle';\n\nexport default () => (\n  <>\n    <Slide backgroundColor=\"#0d0d0d\">\n      <Heading margin=\"0px\" fontSize=\"50px\">\n        Document Object Model (DOM)\n      </Heading>\n\n      <Text fontSize={30}>\n        <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model/Introduction\">DOM</a> es una interfaz de programación para documentos HTML y XML.\n      </Text>\n\n      <Text fontSize={30}>\n        Es una representación orientada a objetos de una página web. Representa a los documentos como nodos y objetos, y permite alterar su estructura, estilo y contenido programáticamente.\n      </Text>\n\n      <Text fontSize={30}>\n        El DOM fue diseñado para ser independiente de cualquier lenguaje de programación. Es muy común ver o hablar de manipular el DOM con JS, pero podría hacerse tambien con Python por ejemplo.\n      </Text>\n    </Slide>\n\n    <Slide backgroundColor=\"#0d0d0d\">\n      <Heading margin=\"0px\" fontSize=\"50px\">\n        Document API\n      </Heading>\n\n      <Text fontSize={30}>\n        La <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Document\">document API</a> es implementada por los navegadores web para permitirnos interactuar con el DOM.\n      </Text>\n\n      <Text fontSize={30}>\n        No se requiere la instalación de ninguna librería o herramienta. Con el simple hecho de incluir nuestro código JS dentro de la página HTML, ya tenemos acceso a esta API.\n      </Text>\n\n      <CodePane language=\"html\">\n        {`\n          <html>\n            <head>\n              <script>\n                // create a couple of elements in an empty HTML page\n                const heading = document.createElement(\"h1\");\n                const heading_text = document.createTextNode(\"Big Head!\");\n                heading.appendChild(heading_text);\n                document.body.appendChild(heading);\n              </script>\n            </head>\n            <body>\n            </body>\n          </html>\n        `}\n      </CodePane>\n    </Slide>\n\n    <Slide backgroundColor=\"#0d0d0d\">\n      <Heading margin=\"0px\" fontSize=\"50px\">\n        &lt;/script&gt;\n      </Heading>\n\n      <Text fontSize={30}>\n        El tag <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script\">script</a> se utiliza para embeber datos o código, generalmente JS.\n      </Text>\n\n      <Text fontSize={30}>\n        A este tag podemos pasarle un conjunto de atributos que permiten realizar cosas como cargar un script de manera asincrónica, ejecutar el script ni bien el documento es cargado, etc.\n      </Text>\n        \n      <Text fontSize={30}>\n        El atributo más común es <b>src</b>, que usaremos para indicarle a JavaScript la ubicación de nuestro script a cargar en el documento HTML.\n      </Text>\n\n      <CodePane language=\"html\">\n        {`\n          <script src=\"myScript.js\"></script>\n        `}\n      </CodePane>\n    </Slide>\n\n    <Slide backgroundColor=\"#0d0d0d\">\n      <Heading margin=\"0px\" fontSize=\"50px\">\n        Node\n      </Heading>\n\n      <Text fontSize={30}>\n        <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Node\">Node</a> es una clase abstracta en la que se basan muchos otros objetos de la DOM API.\n      </Text>\n\n      <Text fontSize={30}>\n        Todo elemento dentro del documento es un nodo de algún tipo. Puede ser, por ejemplo, un <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Element\">Element node</a>, Text node o Attribute node. Incluso <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Document\">Document</a> extiende de esta clase.\n      </Text>\n\n      <Text fontSize={30}>\n        Esta clase posee una gran cantidad de <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Node#methods\">métodos</a> que podemos utilizar para manipular el documento entero, incluso obtener otros nodos a partir de uno (sus hijos, hermanos, padre, etc.).\n      </Text>\n    </Slide>\n\n    <Slide backgroundColor=\"#0d0d0d\">\n      <Heading margin=\"0px\" fontSize=\"50px\">\n        Element\n      </Heading>\n\n      <Text fontSize={30}>\n        <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Element\">Element</a> es la clase base de la que todos los objetos en el documento heredan. Son objetos que representan elementos.\n      </Text>\n\n      <Text fontSize={30}>\n        También posee una gran cantidad de métodos y atributos. Es el objeto más común con el que vamos a interactuar al manipular el DOM.\n      </Text>\n\n      <CodePane language=\"js\">\n        {`\n          // search for an element by id\n          const element = document.getElementById('item');\n          // or\n          const element = document.querySelector('#item');\n\n          if (element.className === 'active'){\n            element.className = 'inactive';\n          } else {\n            element.className = 'active';\n          }\n        `}\n      </CodePane>\n    </Slide>\n\n    <Slide backgroundColor=\"#0d0d0d\">\n      <Heading margin=\"0px\" fontSize=\"50px\">\n        HTML global attributes\n      </Heading>\n\n      <Text fontSize={30}>\n        Son <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes#list_of_global_attributes\">atributos comunes a todos los elementos HTML</a>, aunque puede que no tengan efecto sobre algunos.\n      </Text>\n\n      <Text fontSize={30}>\n        Algunos ejemplos comúnes son <b><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes#attr-class\">class</a></b> que permite a CSS y JS acceder al elemento, <b><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes#attr-style\">style</a></b> que personaliza el CSS de ese elemento en particular, <b><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes#attr-id\">id</a></b> que asigna un identificador único al elemento, entre otros.\n      </Text>\n\n      <Text fontSize={30}>\n        Podemos obtener, modificar o borrar cualquier atributo de los elementos HTML utilizando <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Element/setAttribute\">element.setAttribute</a>, <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Element/getAttribute\">element.getAttribute</a> y <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Element/removeAttribute\">element.removeAttribute</a>\n      </Text>\n    </Slide>\n   \n    <Slide backgroundColor=\"#0d0d0d\">\n      <Heading margin=\"0px\" fontSize=\"50px\">\n        Cambiar estilos de un elemento\n      </Heading>\n\n      <FlexBox justifyContent=\"space-between\" style={{ width: '80%' }}>\n        <CodePane language=\"html\">\n          {`\n            <body>\n              <button id=\"btn\">Cambiar color</button>\n              \n              <p id=\"paragraph\">\n                Contiene texto <b style=\"color: red;\">Rojo</b>\n              </p>\n              \n              <script>\n                const coloredElem = document.querySelector(\"#paragraph b\");\n            \n                function clickHandler() {\n                  coloredElem.style.color = \"green\"\n                  coloredElem.innerHTML = \"Verde\";\n                };\n            \n                document.querySelector(\"#btn\").addEventListener(\"click\", clickHandler);\n              </script>\n            </body>\n          `}\n        </CodePane>\n\n        <iframe src={`${process.env.PUBLIC_URL}/snippets/class2/changeStyles.html`}></iframe>\n      </FlexBox>\n    </Slide>\n\n    <Slide backgroundColor=\"#0d0d0d\">\n      <Heading margin=\"0px\" fontSize=\"50px\">\n        Cambiar clase de un elemento\n      </Heading>\n\n      <FlexBox justifyContent=\"space-between\" style={{ width: '80%' }}>\n        <CodePane language=\"html\">\n          {`\n            <body>\n              <button id=\"btn\">Cambiar color</button>\n              \n              <p>\n                Contiene texto <b class=\"coloredText coloredTextRed\">Rojo</b>\n              </p>\n              \n              <script>\n                const coloredElem = document.querySelector(\".coloredText\");\n            \n                function clickHandler() {\n                  if (coloredElem.classList.contains('coloredTextRed')) {\n                    coloredElem.classList.add('coloredTextGreen');\n                    coloredElem.classList.remove('coloredTextRed');\n                    coloredElem.innerHTML = \"Verde\";\n                  } else {\n                    coloredElem.classList.add('coloredTextRed');\n                    coloredElem.classList.remove('coloredTextGreen');\n                    coloredElem.innerHTML = \"Rojo\";\n                  }\n                };\n            \n                document.querySelector(\"#btn\").addEventListener(\"click\", clickHandler);\n              </script>\n            </body>\n          `}\n        </CodePane>\n\n        <iframe src={`${process.env.PUBLIC_URL}/snippets/class2/changeClass.html`}></iframe>\n      </FlexBox>\n    </Slide>\n\n    <Slide backgroundColor=\"#0d0d0d\">\n      <Heading margin=\"0px\" fontSize=\"50px\">\n        InnerHTML y outerHTML\n      </Heading>\n\n      <Text fontSize={30}>\n        Atributos de Element que nos permiten obtener una representación del elemento o modificarlo. Ambos atributos nos permiten obtener un string con la representación HTML del elemento.\n      </Text>\n\n      <Text fontSize={30}>\n        La diferencia básica es que <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Element/innerHTML\">innerHTML</a> nos devuelve la representación de los elementos descendientes, mientras que <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Element/outerHTML\">outerHTML</a> también devuelve el elemento mismo como parte de la presentación.\n        Lo mismo sucede al intentar modificar estos atributos. Si utilizamos <b>innerHTML</b> solo sobreescribiremos el contenido del elemento, mientras que si usamos <b>outerHTML</b> también estaríamos sobreescribiendo el elemento mismo.\n      </Text>\n\n      <CodePane language=\"js\">\n        {`\n          // <p id=\"example\">Paragraph</p>\n\n          const elem = document.querySelector(#example);\n          console.log(elem.innerHTML); // \"Paragraph\"\n          console.log(elem.outerHTML); // <p id=\"example\">Paragraph</p>\n        `}\n      </CodePane>\n    </Slide>\n\n    <Slide backgroundColor=\"#0d0d0d\">\n      <Heading margin=\"0px\" fontSize=\"50px\">\n        Buscar elementos\n      </Heading>\n\n      <Text fontSize={30}>\n        Existe una gran variedad de métodos para obtener elementos del DOM. Notar que algunos devuelven un único elemento mientras que otros devuelven una colección (array).\n        Algunos ejemplos: \n      </Text>\n\n      <UnorderedList>\n        <ListItem>\n          <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelector\">document.querySelector</a>\n        </ListItem>\n\n        <ListItem>\n          <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Element/querySelectorAll\">document.querySelectorAll</a>\n        </ListItem>\n\n        <ListItem>\n          <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Element/getElementsByClassName\">document.getElementsByClassName</a>\n        </ListItem>\n\n        <ListItem>\n          <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Document/getElementById\">document.getElementById</a>\n        </ListItem>\n\n        <ListItem>\n          <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Element/getElementsByTagName\">document.getElemenstByTagName</a>\n        </ListItem>\n      </UnorderedList>\n    </Slide>\n\n    <Slide backgroundColor=\"#0d0d0d\">\n      <Heading margin=\"0px\" fontSize=\"50px\">\n        Creación de nuevos elementos\n      </Heading>\n\n      <Text fontSize={30}>\n        Utilizando la document API, podemos crear nuevos elementos HTML, los cuales podemos luego agregar al documento. Para esto debemos usar la funcion <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Document/createElement\">document.createElement</a>.\n      </Text>\n\n      <CodePane language=\"js\">\n        {`\n          function addElement () {\n            // create a new div element\n            const newDiv = document.createElement(\"div\");\n\n            // and give it some content\n            const newContent = document.createTextNode(\"Hi there and greetings!\");\n\n            // add the text node to the newly created div\n            newDiv.appendChild(newContent);\n\n            // add the newly created element and its content into the DOM\n            document.body.appendChild(newDiv);\n          }\n        `}\n      </CodePane>\n    </Slide>\n  </>\n);\n"],"sourceRoot":""}