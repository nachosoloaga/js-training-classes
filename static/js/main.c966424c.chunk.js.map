{"version":3,"sources":["slides/class2/slides/index.jsx","slides/class4/slides/index.jsx","slides sync /^/.//.*$","constants/classes.js","components/Menu.js","components/Spectacle.js","utils/withSlides.js","components/App.js","index.js","slides/class1/index.jsx","slides/class2/index.jsx","slides/class2/slides/Agenda.jsx","slides/class2/slides/BuiltInFunctions.jsx","slides/class2/slides/DomIntro.jsx","slides/class2/slides/WindowAPI.jsx","slides/class2/slides/Debugger.jsx","slides/class2/slides/Callbacks.jsx","slides/class2/slides/Events.jsx","slides/class2/slides/Exercises.jsx","slides/class3/index.jsx","slides/class3/slides/Introduction.jsx","slides/class3/slides/ArrayMethods.jsx","slides/class3/slides/RestSpread.jsx","slides/class3/slides/Destructuring.jsx","slides/class3/slides/ConditionalChaining.jsx","slides/class3/slides/Modules.jsx","slides/class3/slides/ArrowFunctions.jsx","slides/class3/slides/TemplateLiterals.jsx","slides/class3/slides/Classes.jsx","slides/class3/slides/StrictMode.jsx","slides/class3/slides/NewDataStructures.jsx","slides/class3/slides/Agenda.jsx","slides/class3/slides/Excercises.jsx","slides/class4/index.jsx","slides/class4/slides/Agenda.jsx","slides/class4/slides/ExecutionContext.jsx","slides/class4/slides/BlockingCode.jsx","slides/class4/slides/Promises.jsx","slides/class4/slides/AsyncAwait.jsx","slides/class4/slides/AJAX.jsx","slides/class3/slides/index.jsx"],"names":["map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","classes","classNumber","slidesDirectory","Menu","className","to","theme","colors","primary","secondary","backgroundColor","fonts","header","text","template","justifyContent","position","bottom","width","padding","Presentation","slides","style","selectSlides","require","default","withSlides","Children","App","exact","path","component","render","ReactDOM","StrictMode","document","getElementById","margin","gridTemplateColumns","gridColumnGap","fontSize","href","language","src","process","gridTemplateRows","gridRowGap","fontsize","textAlign","alt","height","color","display","alignSelf"],"mappings":"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","file":"static/js/main.c966424c.chunk.js","sourcesContent":["export { default as Agenda } from './Agenda';\nexport { default as BuiltInFunctions } from './BuiltInFunctions';\nexport { default as DomIntro } from './DomIntro';\nexport { default as WindowAPI } from './WindowAPI';\nexport { default as Debugger } from './Debugger';\nexport { default as Callbacks } from './Callbacks';\nexport { default as Events } from './Events';\nexport { default as Exercises } from './Exercises';\n","export { default as Agenda } from \"./Agenda\";\nexport { default as ExecutionContext } from \"./ExecutionContext\";\nexport { default as BlockingCode } from \"./BlockingCode\";\nexport { default as Promises } from \"./Promises\";\nexport { default as AsyncAwait } from \"./AsyncAwait\";\nexport { default as AJAX } from \"./AJAX\";\n","var map = {\n\t\"./class1\": 53,\n\t\"./class1/\": 53,\n\t\"./class1/index\": 53,\n\t\"./class1/index.jsx\": 53,\n\t\"./class2\": 54,\n\t\"./class2/\": 54,\n\t\"./class2/index\": 54,\n\t\"./class2/index.jsx\": 54,\n\t\"./class2/slides\": 16,\n\t\"./class2/slides/\": 16,\n\t\"./class2/slides/Agenda\": 55,\n\t\"./class2/slides/Agenda.jsx\": 55,\n\t\"./class2/slides/BuiltInFunctions\": 56,\n\t\"./class2/slides/BuiltInFunctions.jsx\": 56,\n\t\"./class2/slides/Callbacks\": 60,\n\t\"./class2/slides/Callbacks.jsx\": 60,\n\t\"./class2/slides/Debugger\": 59,\n\t\"./class2/slides/Debugger.jsx\": 59,\n\t\"./class2/slides/DomIntro\": 57,\n\t\"./class2/slides/DomIntro.jsx\": 57,\n\t\"./class2/slides/Events\": 61,\n\t\"./class2/slides/Events.jsx\": 61,\n\t\"./class2/slides/Exercises\": 62,\n\t\"./class2/slides/Exercises.jsx\": 62,\n\t\"./class2/slides/WindowAPI\": 58,\n\t\"./class2/slides/WindowAPI.jsx\": 58,\n\t\"./class2/slides/index\": 16,\n\t\"./class2/slides/index.jsx\": 16,\n\t\"./class3\": 63,\n\t\"./class3/\": 63,\n\t\"./class3/index\": 63,\n\t\"./class3/index.jsx\": 63,\n\t\"./class3/slides\": 9,\n\t\"./class3/slides/\": 9,\n\t\"./class3/slides/Agenda\": 75,\n\t\"./class3/slides/Agenda.jsx\": 75,\n\t\"./class3/slides/ArrayMethods\": 65,\n\t\"./class3/slides/ArrayMethods.jsx\": 65,\n\t\"./class3/slides/ArrowFunctions\": 70,\n\t\"./class3/slides/ArrowFunctions.jsx\": 70,\n\t\"./class3/slides/Classes\": 72,\n\t\"./class3/slides/Classes.jsx\": 72,\n\t\"./class3/slides/ConditionalChaining\": 68,\n\t\"./class3/slides/ConditionalChaining.jsx\": 68,\n\t\"./class3/slides/Destructuring\": 67,\n\t\"./class3/slides/Destructuring.jsx\": 67,\n\t\"./class3/slides/Excercises\": 76,\n\t\"./class3/slides/Excercises.jsx\": 76,\n\t\"./class3/slides/Introduction\": 64,\n\t\"./class3/slides/Introduction.jsx\": 64,\n\t\"./class3/slides/Modules\": 69,\n\t\"./class3/slides/Modules.jsx\": 69,\n\t\"./class3/slides/NewDataStructures\": 74,\n\t\"./class3/slides/NewDataStructures.jsx\": 74,\n\t\"./class3/slides/RestSpread\": 66,\n\t\"./class3/slides/RestSpread.jsx\": 66,\n\t\"./class3/slides/StrictMode\": 73,\n\t\"./class3/slides/StrictMode.jsx\": 73,\n\t\"./class3/slides/TemplateLiterals\": 71,\n\t\"./class3/slides/TemplateLiterals.jsx\": 71,\n\t\"./class3/slides/index\": 9,\n\t\"./class3/slides/index.jsx\": 9,\n\t\"./class4\": 77,\n\t\"./class4/\": 77,\n\t\"./class4/index\": 77,\n\t\"./class4/index.jsx\": 77,\n\t\"./class4/slides\": 21,\n\t\"./class4/slides/\": 21,\n\t\"./class4/slides/AJAX\": 83,\n\t\"./class4/slides/AJAX.jsx\": 83,\n\t\"./class4/slides/Agenda\": 78,\n\t\"./class4/slides/Agenda.jsx\": 78,\n\t\"./class4/slides/AsyncAwait\": 82,\n\t\"./class4/slides/AsyncAwait.jsx\": 82,\n\t\"./class4/slides/BlockingCode\": 80,\n\t\"./class4/slides/BlockingCode.jsx\": 80,\n\t\"./class4/slides/ExecutionContext\": 79,\n\t\"./class4/slides/ExecutionContext.jsx\": 79,\n\t\"./class4/slides/Promises\": 81,\n\t\"./class4/slides/Promises.jsx\": 81,\n\t\"./class4/slides/index\": 21,\n\t\"./class4/slides/index.jsx\": 21\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 507;","const classes = [\n  {\n    classNumber: 1,\n    slidesDirectory: \"class1\",\n  },\n  {\n    classNumber: 2,\n    slidesDirectory: \"class2\",\n  },\n  {\n    classNumber: 3,\n    slidesDirectory: \"class3\",\n  },\n  {\n    classNumber: 4,\n    slidesDirectory: \"class4\",\n  },\n];\n\nexport default classes;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport classes from \"../constants/classes\";\n\nconst Menu = () => {\n  return (\n    <div className=\"menu\">\n      <h1 className=\"menu-header\">👋 JS Training Classes 🚀</h1>\n      <ul className=\"menu-list\">\n        {classes.map(({ classNumber }) => {\n          return (\n            <li key={classNumber}>\n              <Link\n                className=\"menu-list-item\"\n                to={`classes/${classNumber}`}\n              >{`📖 Clase ${classNumber}`}</Link>\n            </li>\n          );\n        })}\n      </ul>\n    </div>\n  );\n};\n\nexport default Menu;\n","import React from \"react\";\n\nimport {\n  FlexBox,\n  FullScreen,\n  Deck,\n  Box,\n} from \"spectacle\";\n\nconst theme = {\n  colors: {\n    primary: \"#d9d9d9\",\n    secondary: \"#d9d9d9\",\n    backgroundColor: \"#0d0d0d\"\n  },\n  fonts: {\n    header: 'Roboto',\n    text: 'Roboto',\n  },\n};\n\nconst template = () => (\n  <FlexBox\n    justifyContent=\"space-between\"\n    position=\"absolute\"\n    bottom={0}\n    width={1}\n  >\n    <Box padding=\"0 1em\">\n      <FullScreen />\n    </Box>\n    <Box padding=\"1em\">\n    </Box>\n  </FlexBox>\n);\n\nconst Presentation = ({ slides }) => (\n  <Deck theme={theme} template={template}>\n    <div style={{ backgroundColor: \"#ffd84d\" }}>\n      {slides}\n    </div>\n  </Deck>\n);\n\nexport default Presentation;\n","import React from \"react\";\n\nconst selectSlides = (slidesDirectory) => {\n  return require(`../slides/${slidesDirectory}`).default();\n};\n\nconst withSlides = (Children, slidesDirectory) => {\n  return <Children slides={selectSlides(slidesDirectory)} />;\n};\n\nexport default withSlides;\n","import React from \"react\";\nimport { HashRouter, Switch, Route, Redirect } from \"react-router-dom\";\nimport Menu from \"./Menu\";\nimport Presentation from \"./Spectacle\";\nimport withSlides from \"../utils/withSlides\";\nimport classes from \"../constants/classes\";\n\nconst App = () => {\n  return (\n    // https://create-react-app.dev/docs/deployment/#notes-on-client-side-routing\n    <HashRouter>\n      <Switch>\n        <Route exact path=\"/menu\" component={Menu} />\n\n        {classes.map(({ classNumber, slidesDirectory }) => (\n          <Route\n            key={classNumber}\n            exact\n            path={`/classes/${classNumber}`}\n            render={() => withSlides(Presentation, slidesDirectory)}\n          />\n        ))}\n\n        <Route path=\"/\">\n          <Redirect to=\"menu\" />\n        </Route>\n      </Switch>\n    </HashRouter>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./components/App\";\n\nimport \"./styles/styles.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n","import React from \"react\";\nimport {\n  Slide,\n  Heading,\n  ListItem,\n  Grid,\n  OrderedList,\n  Text,\n  UnorderedList,\n  CodePane,\n  Notes,\n  FlexBox\n} from \"spectacle\";\nimport '../../styles/styles.css';\n\nexport default () => (\n  <>\n    {/* Intro to JS */}\n    <Slide backgroundColor=\"#0d0d0d\" className=\"flex-center-column\">\n      <Heading margin=\"0px\" className=\"font-size-heading\">\n        <i>Agenda</i>\n      </Heading>\n\n      <OrderedList>\n        <Grid gridTemplateColumns=\"1fr 1fr\" gridColumnGap={15} fontSize={30}>\n          <ListItem>\n            Surgimiento de JS\n          </ListItem>\n          <ListItem>\n            Características\n          </ListItem>\n          <ListItem>\n            ¿Qué es ECMAScript?\n          </ListItem>\n          <ListItem>\n            Sintaxis básica\n          </ListItem>\n          <ListItem>\n            Variables - var, let, const\n          </ListItem>\n          <ListItem>\n            Tipos de datos\n          </ListItem>\n          <ListItem>\n            Operadores lógicos\n          </ListItem>\n          <ListItem>\n            Estructuras de control\n          </ListItem>\n          <ListItem>\n            Excepciones\n          </ListItem>\n          <ListItem>\n            Funciones\n          </ListItem>\n          <ListItem>\n            Window API\n          </ListItem>\n          <ListItem>\n            Debugging\n          </ListItem>\n        </Grid>\n      </OrderedList>\n    </Slide>\n\n    <Slide backgroundColor=\"#0d0d0d\">\n      <Heading margin=\"0px\" padding=\"0px\" className=\"font-size-heading\">\n        <i>Javascript</i>\n      </Heading>\n\n      <Text fontSize={30}>\n        JavaScript fue creado inicialmente con un único propósito, \"traer vida a las páginas web\" - <i>make web pages alive</i>. Hoy en día se utiliza en muchos otros entornos también.\n      </Text>\n      <Text fontSize={30}>\n        Fue desarrollado originalmente por Brendan Eich de Netscape con el nombre de Mocha, el cual fue renombrado posteriormente a LiveScript, para finalmente quedar como JavaScript. Este último cambio de nombre se realizó en diciembre de 1995.\n      </Text>\n    </Slide>\n\n    <Slide backgroundColor=\"#0d0d0d\">\n      <Heading margin=\"0px\" padding=\"0px\" className=\"font-size-heading\">\n        <i>Javascript</i>\n      </Heading>\n\n      <Text fontSize={30}>\n        Los programas escritos en JavaScript son llamados scripts y no necesitan de ningún tipo de procesamiento especial o compilación para ser ejecutados. De hecho, pueden ser escritos directamente en el código HTML de una página web y se ejecutará cuando ésta sea cargada.\n      </Text>\n\n      <Text fontSize={30}>\n        Se define como orientado a objetos, basado en prototipos, imperativo, débilmente tipado y dinámico.\n      </Text>\n    </Slide>\n\n    <Slide backgroundColor=\"#0d0d0d\">\n      <Heading margin=\"0px\" padding=\"0px\" className=\"font-size-heading\">\n        <i>Javascript</i>\n      </Heading>\n\n      <Text fontSize={30}>\n        Podemos destacar varias cosas únicas del lenguaje\n      </Text>\n\n      <UnorderedList fontSize={30}>\n        <ListItem>\n          Es el lenguaje con integración completa con HTML y CSS más adoptado de la web.\n        </ListItem>\n        <ListItem>\n          Simple de usar.\n        </ListItem>\n        <ListItem>\n          Muy utilizado en la industria y actualmente en toda la web.\n        </ListItem>\n        <ListItem>\n          En la actualidad existen muchos lenguajes construidos que se \"transpilan\" luego a JS y extienden o proveen nuevas funcionalidades.\n        </ListItem>\n        <ListItem>\n          Es un lenguaje multi-paradigma.\n        </ListItem>\n        <ListItem>\n          Existe una gran variedad de frameworks JS, tanto Frontend como Backend.\n        </ListItem>\n      </UnorderedList>\n    </Slide>\n\n    <Slide backgroundColor=\"#0d0d0d\">\n      <Heading margin=\"0px\" padding=\"0px\" className=\"font-size-heading\">\n        <i>ECMAScript</i>\n      </Heading>\n\n      <Text fontSize={30}>\n        <a href=\"https://en.wikipedia.org/wiki/ECMAScript\">\n          ECMAScript\n        </a> es un estándar que define un lenguaje de tipos dinámicos ligeramente inspirado en Java y otros lenguajes del estilo de C. Soporta algunas características de la programación orientada a objetos mediante objetos basados en prototipos y pseudoclases.\n      </Text>\n      <Text fontSize={30}>\n        El objetivo de este estandar es asegurar la interoperabilidad de las páginas web entre diferentes navegadores web.\n      </Text>\n      <Text fontSize={30}>\n        JavaScript es un lenguaje de programación que implementa este estandar - ECMAScript está basado en JavaScript.\n      </Text>\n    </Slide>\n\n    {/* let and const */}\n    <Slide backgroundColor=\"#0d0d0d\">\n      <Heading margin=\"0px\" className=\"font-size-heading\">\n        Variables\n      </Heading>\n\n      <Text fontSize={30}>\n        Las variables son contenedores que nos permiten almacenar valores para su posterior uso y/o manipulación.\n      </Text>\n\n      <Text fontSize={30}>\n        Para declarar una variable podemos utilizar la palabra clave <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let\"><b>let</b></a>.\n      </Text>\n\n      <CodePane language=\"js\">\n        {`\n          let myVariable;\n          // Initialize with an initial value\n          let myVariable = 'Hola Snapplerxs!';\n        `}\n      </CodePane>\n    </Slide>\n\n    <Slide backgroundColor=\"#0d0d0d\">\n      <Heading margin=\"0px\" className=\"font-size-heading\">\n        Variables\n      </Heading>\n\n      <Text fontSize={30}>\n        JavaScript es un lenguaje dinámico y de tipado flexible. En parte esto significa que las variables no están asociadas directamente con ningún tipo de valor en particular y se les pueden asignar o reasignar valores de todos los tipos.\n      </Text>\n\n      <CodePane language=\"js\">\n        {`\n          let foo = 42; // foo is a number\n          foo = 'bar';  // foo is a string\n          foo = true;   // foo is a boolean\n\n          // Uncaught SyntaxError: Identifier 'foo' has already been declared\n          let foo = 10;\n        `}\n      </CodePane>\n    </Slide>\n\n    <Slide backgroundColor=\"#0d0d0d\">\n      <Heading margin=\"0px\" className=\"font-size-heading\">\n        Variables\n      </Heading>\n\n      <Text fontSize={30}>\n        Para definir variables también podemos utilizar la palabra clave <b>var</b>.\n      </Text>\n\n      <Text fontSize={30}>\n        <b>var</b> se comporta distinto a <b>let</b> y su uso actualmente no es muy recomendado. Explicaremos las razones más adelante.\n      </Text>\n\n      <CodePane language=\"js\">\n        {`\n          var foo = 42; // foo is a number\n        `}\n      </CodePane>\n    </Slide>\n\n    <Slide backgroundColor=\"#0d0d0d\">\n      <Heading margin=\"0px\" className=\"font-size-heading\">\n        Constantes\n      </Heading>\n\n      <Text fontSize={30}>\n        A diferencia de las variables, las constantes no pueden cambiar su valor posteriormente. Se debe especificar el valor al momento de su declaración.\n      </Text>\n\n      <Text fontSize={30}>\n        Para definir una constante, usamos la palabra clave <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const\">const</a>.\n      </Text>\n\n      <CodePane language=\"js\">\n        {`\n          const FOO = \"bar\";\n\n          // this will throw an error - Uncaught TypeError: Assignment to constant variable.\n          FOO = 20;\n\n          // trying to redeclare a constant throws an error\n          // Uncaught SyntaxError: Identifier 'FOO' has already been declared\n          const FOO = 20;\n        `}\n      </CodePane>\n\n      <Notes>\n        Las constantes pueden ser declaradas con mayúsculas o minúsculas, pero generalmente se definen con todas sus letras en mayúscula a modo de convención.\n      </Notes>\n    </Slide>\n\n    {/* Comments */}\n    <Slide backgroundColor=\"#0d0d0d\">\n      <Heading margin=\"0px\" padding=\"0px\" className=\"font-size-heading\">\n        Comentarios\n      </Heading>\n\n      <Text fontSize={30}>\n        En JavaScript, al igual que en todos los lenguajes, tenemos la posibilidad de agregar comentarios en nuestro código.\n      </Text>\n\n      <Text fontSize={30}>\n        Podemos agregar comentarios single line o multi line.\n      </Text>\n\n      <CodePane language=\"js\">\n        {`\n          // This is a single line comment.\n\n          /*\n          You can use this kind of comments\n          for documentation or to explain\n          any complex sentence.\n          */\n        `}\n      </CodePane>\n\n    </Slide>\n\n    {/* Data types and data structures */}\n    <Slide backgroundColor=\"#0d0d0d\">\n      <Heading margin=\"0px\" className=\"font-size-heading\">\n        Valores y estructuras de datos\n      </Heading>\n\n      <Text fontSize={30}>\n        Todos los lenguajes de programación tienen estructuras de datos integradas.\n      </Text>\n\n      <Text fontSize={30}>\n        Generalmente varían sus nombres o formas de utilización de un lenguaje a otro.\n      </Text>\n    </Slide>\n\n    {/* Primitives */}\n    <Slide backgroundColor=\"#0d0d0d\">\n      <Heading margin=\"0px\" className=\"font-size-heading\">\n        Tipos de datos primitivos\n      </Heading>\n\n      <Text className=\"align-center\" fontSize={30} margin=\"0px\" padding=\"0px\">\n        JavaScript cuenta con un conjunto de tipos que son llamados <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#primitive_values\">tipos primitivos</a>. Estos tipos definen valores que son inmutables.\n      </Text>\n\n      <UnorderedList className=\"flex-center-column\" fontSize={30}>\n        <ListItem>\n          <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined\">Undefined</a>\n        </ListItem>\n        <ListItem>\n          <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean\">Boolean</a>\n        </ListItem>\n        <ListItem>\n          <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number\">Number</a>\n        </ListItem>\n        <ListItem>\n          <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String\">String</a>\n        </ListItem>\n        <ListItem>\n          <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt\">BigInt</a>\n        </ListItem>\n        <ListItem>\n          <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/symbol\">Symbol</a>\n        </ListItem>\n      </UnorderedList>\n    </Slide>\n\n    <Slide backgroundColor=\"#0d0d0d\">\n      <Heading margin=\"0px\" className=\"font-size-heading\">\n        Undefined\n      </Heading>\n\n      <Text className=\"align-center\" fontSize={30}>\n        <b>undefined</b> es una variable global que posee como valor inicial el tipo primitivo undefined.\n      </Text>\n\n      <UnorderedList fontSize={30}>\n        <ListItem>\n          Una variable que no tiene un valor asignado, es creada con el valor undefined.\n        </ListItem>\n        <ListItem>\n          Una función que no posee una sentencia return, devuelve undefined.\n        </ListItem>\n      </UnorderedList>\n\n      <CodePane language=\"js\">\n        {`\n          let foo;\n\n          console.log(foo); // undefined\n          typeof foo // \"undefined\"\n        `}\n      </CodePane>\n    </Slide>\n\n    <Slide backgroundColor=\"#0d0d0d\">\n      <Heading margin=\"0px\" className=\"font-size-heading align-center\" style={{ width: \"80%\" }}>\n        Null\n      </Heading>\n\n      <div style={{ width: '80%' }}>\n        <Text fontSize={30}>\n          Este valor se utiliza para representar la no existencia o invalidez de algo, generalmente de manera intencional.\n        </Text>\n\n        <FlexBox justifyContent=\"space-between\" style={{ width: '80%' }}>\n          <CodePane language=\"js\">\n            {`\n              const foo = null;\n\n              console.log(foo); // null\n              typeof foo // ?\n            `}\n          </CodePane>\n\n          <iframe src={`${process.env.PUBLIC_URL}/snippets/class1/null.html`}></iframe>\n        </FlexBox>\n      </div>\n    </Slide>\n\n    <Slide backgroundColor=\"#0d0d0d\">\n      <Heading margin=\"0px\" fontSize=\"50px\">\n        Null vs Undefined\n      </Heading>\n\n      <Text fontSize={30}>\n        Null y undefined son dos tipos primitivos diferentes y no existe un comportamiento intuitivo cuando estos tipos se comparan con otros. Para más info ver este <a href=\"https://javascript.info/comparison#comparison-with-null-and-undefined\">link</a>.\n      </Text>\n\n      <Text fontSize={30}>\n        Generalmente el valor null es algo que se utiliza de manera intencional para indicar la no existencia de algo, mientras que undefined no suele usarse tanto de manera intencional, y representa que una variable fue declarada pero aún no tiene un valor definido.\n      </Text>\n\n      <CodePane language=\"js\">\n        {`\n          const logHi = (str = 'hi') => console.log(str);\n\n          logHi(undefined); // 'hi'\n\n          logHi(null); // null\n        `}\n      </CodePane>\n\n      <Notes>\n        logHi(undefined); // imprime hi\n\n        logHi(null); // imprime null\n      </Notes>\n    </Slide>\n\n    <Slide backgroundColor=\"#0d0d0d\">\n      <Heading margin=\"0px\" fontSize=\"50px\">\n        Boolean\n      </Heading>\n\n      <Text fontSize={30}>\n        Representa una entidad lógica que solo puede tomar los valores <b>true</b> o <b>false</b>.\n      </Text>\n\n      <Text fontSize={30}>\n        Podemos usar la función Boolean para convertir cualquier elemento a boolean.\n      </Text>\n\n      <Text fontSize={30}>\n        Si el valor es omitido o es 0, -0, null, false, NaN, undefined, o un String vacío (\"\"), el objeto tendrá un valor inicial <b>false</b>.\n      </Text>\n\n      <Text fontSize={30}>\n        El resto de los valores, incluyendo Arrays vacíos y el String \"false\", crean un objeto con un valor inicial de <b>true</b>.\n      </Text>\n    </Slide>\n\n    <Slide backgroundColor=\"#0d0d0d\">\n      <div style={{ width: '80%' }}>\n        <Heading margin=\"0px\" className=\"font-size-heading\">\n          Boolean\n        </Heading>\n\n        <Grid gridTemplateRows=\"1fr 1fr\" gridRowGap={50}>\n          <FlexBox justifyContent=\"space-between\" style={{ width: '80%' }}>\n            <CodePane language=\"js\">\n              {`\n                const bool = true;\n                \n                if (bool) {\n                  console.log(\"Hola Snapplerxs!\");\n                };\n                `}\n            </CodePane>\n\n            <iframe src={`${process.env.PUBLIC_URL}/snippets/class1/boolean1.html`}></iframe>\n          </FlexBox>\n\n          <FlexBox justifyContent=\"space-between\" style={{ width: '80%' }}>\n            <CodePane language=\"js\">\n              {`\n                const bool = false;\n\n                if (bool) {\n                  console.log(\"Hola Snapplerxs!\");\n                };\n                `}\n            </CodePane>\n\n            <iframe src={`${process.env.PUBLIC_URL}/snippets/class1/boolean2.html`}></iframe>\n          </FlexBox>\n        </Grid>\n      </div>\n    </Slide>\n\n    <Slide backgroundColor=\"#0d0d0d\">\n      <div style={{ width: '80%' }}>\n\n        <Heading margin=\"0px\" className=\"font-size-heading\">\n          Boolean\n        </Heading>\n\n        <Grid gridTemplateRows=\"1fr 1fr\" gridRowGap={50}>\n          <FlexBox justifyContent=\"space-between\" style={{ width: '80%' }}>\n            <CodePane language=\"js\">\n              {`\n                const bool = Boolean(false);\n\n                if (bool) {\n                  console.log(\"Hola Snapplerxs!\");\n                };\n                `}\n            </CodePane>\n\n            <iframe src={`${process.env.PUBLIC_URL}/snippets/class1/boolean3.html`}></iframe>\n          </FlexBox>\n\n          <FlexBox justifyContent=\"space-between\" style={{ width: '80%' }}>\n            <CodePane language=\"js\">\n              {`\n                const bool = new Boolean(false);\n\n                if (bool) {\n                  console.log(\"Hola Snapplerxs!\");\n                };\n                `}\n            </CodePane>\n\n            <iframe src={`${process.env.PUBLIC_URL}/snippets/class1/boolean4.html`}></iframe>\n          </FlexBox>\n        </Grid>\n      </div>\n\n      <Notes>\n        No confundir el objeto Booelan con los valores primitivos Boolean ni con la función Boolean.\n\n        La función Boolean puede ser usada para generar valores primitivos, pero al hacer un new estamos creando un objeto, que al ser evaluado tendrá un valor de verdad verdadero.\n      </Notes>\n    </Slide>\n\n    <Slide backgroundColor=\"#0d0d0d\">\n      <Heading margin=\"0px\" fontSize=\"50px\">\n        Number\n      </Heading>\n\n      <Text fontSize={30}>\n        ECMAScript posee dos tipos distintos de números: <b>Number</b> y <b>BigInt</b>.\n      </Text>\n\n      <Text fontSize={30}>\n        Number es un valor binario de 64 bits de doble precisión. Representa números entre <b>- (2 ^ 53 - 1)</b> y <b>2 ^ 53 - 1</b>.\n      </Text>\n\n      <Text fontSize={30}>\n        Además de representar números de punto flotante, el tipo de número tiene tres valores simbólicos: + Infinito, -Infinito y NaN (\"No es un número\").\n      </Text>\n\n    </Slide>\n\n    <Slide backgroundColor=\"#0d0d0d\">\n      <Heading margin=\"0px\" fontSize=\"50px\">\n        Number\n      </Heading>\n\n      <Text fontSize={30}>\n        Para verificar el valor más grande o el valor más pequeño disponible dentro de ± Infinito, se pueden usar las constantes <b>Number.MAX_VALUE</b> o <b>Number.MIN_VALUE</b>\n      </Text>\n\n      <Text fontSize={30}>\n        El 0 que puede ser representado como +0 y -0. En la práctica esto no tiene mucho impacto ya que -0 === +0, sin embargo se puede notar algunas diferencias al dividir por 0.\n      </Text>\n\n      <CodePane language=\"js\">\n        {`\n          42 / +0 == Infinity\n          42 / -0 == -Infinity\n        `}\n      </CodePane>\n    </Slide>\n\n    <Slide backgroundColor=\"#0d0d0d\">\n      <Heading margin=\"0px\" fontSize=\"50px\">\n        BigInt\n      </Heading>\n\n      <Text fontSize={30}>\n        El tipo BigInt permite representar números con una precisión arbitraria, es decir que permite operar con números que superen los límites planteados por el tipo Number.\n      </Text>\n\n      <Text fontSize={30}>\n        Un BigInt se crea agregando n al final de un número entero o llamando al constructor.\n      </Text>\n\n      <CodePane language=\"js\">\n        {`\n          const x = 2n ** 53n; // 9007199254740992n\n\n          const y = BigInt(23) // 23n\n        `}\n      </CodePane>\n    </Slide>\n\n    <Slide backgroundColor=\"#0d0d0d\">\n      <Heading margin=\"0px\" fontSize=\"50px\">\n        Symbol\n      </Heading>\n\n      <Text fontSize={30}>\n        Es un valor primitivo único e inmutable y se puede utilizar como clave de una propiedad de objeto.\n      </Text>\n\n      <Text fontSize={30}>\n        Se crea invocando la función Symbol, que produce dinámicamente un valor único y anónimo.\n      </Text>\n\n      <CodePane language=\"js\">\n        {`\n          let Sym1 = Symbol(\"Sym\")\n          let Sym2 = Symbol(\"Sym\")\n          \n          console.log(Sym1 === Sym2) // returns \"false\"\n        `}\n      </CodePane>\n    </Slide>\n\n    <Slide backgroundColor=\"#0d0d0d\">\n      <Heading margin=\"0px\" fontSize=\"50px\">\n        String\n      </Heading>\n\n      <Text fontSize={30}>\n        Sirve para representar una cadena de caracteres. La longitud del string está dada por la cantidad de elementos que lo componen.\n      </Text>\n\n      <Text fontSize={30}>\n        El primer elemento está en el índice 0, el siguiente en el índice 1, y así sucesivamente. La longitud de una cadena es el número de elementos que contiene.\n      </Text>\n\n      <CodePane language=\"js\">\n        {`\n          const foo = 'Hello'\n\n          foo.length // 5\n          foo[0]     // H\n        `}\n      </CodePane>\n    </Slide>\n\n    <Slide backgroundColor=\"#0d0d0d\">\n      <Heading margin=\"0px\" fontSize=\"50px\">\n        String\n      </Heading>\n\n      <Text fontSize={30}>\n        Existe una gran cantidad de métodos que permiten manipular Strings, al igual que en la mayoría de los lenguajes\n      </Text>\n\n      <Text fontSize={30}>\n        Algunos ejemplos se pueden encontrar <a href=\"https://developer.mozilla.org/en-US/docs/Learn/JavaScript/First_steps/Useful_string_methods\">aquí</a>.\n      </Text>\n\n      <Notes>\n        Mencionar split, slice, splice, indexOf, replace, toLowercase, toUppercase, etc.\n      </Notes>\n    </Slide>\n\n    {/* Type Conversions */}\n    \n    <Slide backgroundColor=\"#0d0d0d\">\n      <Heading margin=\"0px\" fontSize=\"50px\">\n        Conversión de tipos\n      </Heading>\n\n      <Text fontSize={30}>\n        Muchas veces los operadores y las funciones convierten automáticamente los valores recibidos al tipo correcto.\n        Por ejemplo, la función alert convierte automáticamente cualquier valor recibido a string, y las operaciones matemáticas convierten cualquier tipo\n        a number.\n      </Text>\n      <Text fontSize={30}>\n        Sin embargo, a veces necesitamos explícitamente hacer una <a href=\"https://javascript.info/type-conversions\">conversion de tipos.</a>\n      </Text>\n      <Text fontSize={30}>\n        En otros lenguajes este proceso es también conocido como <b>casteo de tipos.</b>\n      </Text>\n    </Slide>\n\n    <Slide backgroundColor=\"#0d0d0d\">\n      <Heading margin=\"0px\" fontSize=\"50px\">\n        Conversión a String\n      </Heading>\n\n      <CodePane language=\"js\">\n        {`\n          // String conversion\n\n          let value = true;\n          console.log(typeof value); // boolean\n          \n          value = String(value); // now value is a string \"true\"\n          console.log(typeof value); // string\n        `}\n      </CodePane>\n    </Slide>\n\n    <Slide backgroundColor=\"#0d0d0d\">\n      <Heading margin=\"0px\" fontSize=\"50px\">\n        Conversión a Number\n      </Heading>\n\n      <CodePane language=\"js\">\n        {`\n          // Number conversion\n\n          let str = \"123\";\n          console.log(typeof str); // string\n          \n          let num = Number(str); // becomes a number 123\n          \n          console.log(typeof num)\n        `}\n      </CodePane>\n    </Slide>\n\n    <Slide backgroundColor=\"#0d0d0d\">\n      <Heading margin=\"0px\" fontSize=\"50px\">\n        Conversión a Boolean\n      </Heading>\n      <Text fontsize={30}>\n        Las reglas de conversión son simples:\n        <UnorderedList fontSize={30}>\n          <ListItem>Valores que son intuitivamente \"vacios\", como por ejemplo 0, un string vacío, null, undefined y NaN se convierten en <b>false.</b></ListItem>\n          <ListItem>El resto se convierten a <b>true.</b></ListItem>\n        </UnorderedList>\n      </Text>\n      <CodePane language=\"js\">\n        {`\n          // Boolean Conversion\n\n          console.log(Boolean(1)); // true\n          console.log(Boolean(0)); // false\n          \n          console.log(Boolean(\"hello\")); // true\n          console.log(Boolean(\"\")); // false\n        `}\n      </CodePane>\n    </Slide>\n\n    {/* Array */}\n    <Slide backgroundColor=\"#0d0d0d\">\n      <Heading margin=\"0px\" fontSize=\"50px\">\n        Arreglos\n      </Heading>\n\n      <Text fontSize={30}>\n        Son objetos en forma de lista que poseen una asociación particular entre claves númericas enteras y la longitud de la lista. Podemos decir que son estructuras indexadas.\n      </Text>\n\n      <Text fontSize={30}>\n        Para definir un arreglo podemos usar corchetes ([]) o generar una instancia utilizando la función <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Array\">Array()</a>.\n      </Text>\n\n      <CodePane language='js'>\n        {`\n          const fruits = ['Apple', 'Banana'];\n\n          const moreFruits = new Array('Orange', 'Watermelon');\n        `}\n      </CodePane>\n    </Slide>\n\n    <Slide backgroundColor=\"#0d0d0d\">\n      <Heading margin=\"0px\" fontSize=\"50px\">\n        Arreglos\n      </Heading>\n\n      <Text fontSize={30}>\n        Para acceder a los elementos podemos utilizar un índice numérico indicando la posición.\n      </Text>\n\n      <Text fontSize={30}>\n        También existe una gran variedad de métodos que nos permiten iterar, duplicar, partir y manipular los arreglos de múltiples formas distintas. Algunos ejemplos <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\">aquí</a>.\n      </Text>\n\n      <CodePane language='js'>\n        {`\n          const fruits = ['Apple', 'Banana'];\n\n          console.log(fruits.length); // 2\n          console.log(fruits[0]); // Apple\n\n          fruits.push('Pear'); ['Apple', 'Banana', 'Pear'];\n          fruits.pop(); 'Pear';\n          fruits.shift(); 'Apple';\n        `}\n      </CodePane>\n    </Slide>\n\n    {/* Object */}\n    <Slide backgroundColor=\"#0d0d0d\">\n      <Heading margin=\"0px\" fontSize=\"50px\">\n        Objetos\n      </Heading>\n\n      <Text fontSize={30}>\n        Podemos ver a los objetos como una colección de propiedades, cada una de los cuales posee un valor asociado. Las propiedades de un objeto son identificadas por \"claves\".\n      </Text>\n\n      <Text fontSize={30}>\n        Las claves de un objeto pueden ser de tipo String o Symbol, pero los valores pueden ser de cualquier tipo, incluso otros objetos.\n      </Text>\n\n      <Notes>\n        Notar que se describe a los objetos como collección de propiedades, no simplemente de claves y valores. Las propiedades tienen un valor, pero además de eso existen otros atributos.\n      </Notes>\n    </Slide>\n\n    <Slide backgroundColor=\"#0d0d0d\">\n      <Heading margin=\"0px\" fontSize=\"50px\">\n        Objetos\n      </Heading>\n\n      <Text fontSize={30}>\n        Podemos crear objetos utilizando la <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Grammar_and_types#object_literals\">object literal syntax</a> o a través de la instanciación de Object.\n      </Text>\n\n      <CodePane language='js'>\n        {`\n          let car = new Object();\n          car.brand = 'Ford';\n          car.model = 'Mustang';\n          car.year = 1969;\n          \n          let car2 = {\n            brand: 'Ford',\n            model: 'Mustang',\n            year: 1969\n          };\n        `}\n      </CodePane>\n    </Slide>\n\n    <Slide backgroundColor=\"#0d0d0d\">\n      <Heading margin=\"0px\" fontSize=\"50px\">\n        Objetos\n      </Heading>\n\n      <Text fontSize={30}>\n        Es muy fácil acceder, borrar o actualizar los valores de cualquiera de sus claves.\n      </Text>\n\n      <CodePane language='js'>\n        {`\n          let car = {\n            brand: 'Ford',\n            model: 'Mustang',\n            year: 1969\n          };\n\n          car.brand = 'Chevrolet';\n          \n          console.log(car.brand); // Chevrolet\n\n          delete(car.year);\n          console.log(car); // { brand: 'Chevrolet', model: 'Mustang' }\n        `}\n      </CodePane>\n    </Slide>\n\n    <Slide backgroundColor=\"#0d0d0d\">\n      <Heading margin=\"0px\" fontSize=\"50px\">\n        Objetos\n      </Heading>\n\n      <Text fontSize={30}>\n        Además del valor, las propiedades poseen otros atributos. <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#objects\">Más info</a>.\n      </Text>\n\n      <div style={{ textAlign: 'center' }}>\n        <img\n          src={`${process.env.PUBLIC_URL}/images/property_attributes.png`}\n          alt=\"property_attributes\"\n          width=\"80%\"\n          height=\"80%\"\n        />\n      </div>\n    </Slide>\n\n    <Slide backgroundColor=\"#0d0d0d\">\n      <Heading margin=\"0px\" fontSize=\"50px\">\n        Objetos\n      </Heading>\n\n      <Text fontSize={30}>\n        Para poder modificar alguno de los otros atributos de una propiedad de un objeto podemos utilizar el método <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty\">Object.defineProperty()</a>.\n      </Text>\n\n      <CodePane language='js'>\n        {`\n          let car = {\n            brand: 'Ford'\n          };\n\n          Object.defineProperty(car, 'model', {\n            value: 'Mustang',\n            writable: false\n          });\n\n          car.brand = 'Chevrolet';\n          car.model = 'Camaro';\n          \n          console.log(car); // { brand: 'Chevrolet', model: 'Mustang' }\n        `}\n      </CodePane>\n    </Slide>\n\n    {/* Falsy and truthy values */}\n\n    <Slide backgroundColor=\"#0d0d0d\">\n      <div>\n        <Heading margin=\"0px\" fontSize=\"50px\">\n          Valores \"falsy\" y \"truthy\"\n        </Heading>\n        <Text fontSize={30}>\n          En JavaScript, un valor verdadero (truthy) es un valor que se\n          considera <b>true</b> cuando es evaluado en un contexto Booleano. Todos los\n          valores son verdaderos excepto aquellos que evaluan a <b>false: </b>\n          <strong style={{ color: \"lightseagreen\"}} >false, 0, \"\", null, undefined, y NaN</strong>.\n        </Text>\n        <CodePane language=\"js\">\n          {`\n            // For example, these conditions will enter the if statement\n            if (true)\n            if ({})\n            if ([])\n            if (42)\n            if (\"foo\")\n            if (new Date())\n            if (-42)\n            if (3.14)\n            if (-3.14)\n            if (Infinity)\n            if (-Infinity)\n          `}\n        </CodePane>\n      </div>\n    </Slide>\n\n    {/* Logical Operators */}\n\n    <Slide backgroundColor=\"#0d0d0d\">\n      <div className=\"flex-center-column\">\n        <Heading margin=\"0px\" fontSize=\"50px\">\n          Operadores lógicos\n        </Heading>\n\n        <Text fontSize={30}>\n          En JavaScript existen 4 operadores lógicos:\n        </Text>\n        <UnorderedList fontSize={30}>\n          <ListItem>\n            || (OR)\n          </ListItem>\n          <ListItem>\n            && (AND)\n          </ListItem>\n          <ListItem>\n            ! (NOT)\n          </ListItem>\n          <ListItem>\n            ?? (Nullish Coalescing)\n          </ListItem>\n        </UnorderedList>\n      </div>\n    </Slide>\n\n    <Slide backgroundColor=\"#0d0d0d\">\n      <div className=\"flex-center-column\">\n        <Heading margin=\"0px\" fontSize={50}>\n          || (OR)\n        </Heading>\n\n        <Text fontSize={30}>\n          El operador lógico OR evalua a False cuando ambos operandos son False.\n          Caso contrario, siempre evalua a True.\n        </Text>\n        <Text fontSize={30}>\n          En JS la evaluación del OR es de <b>circuito corto</b>.\n        </Text>\n\n        <CodePane language=\"js\">\n          {`\n            let result = value1 || value2 || value3;\n          `}\n        </CodePane>\n        <Text fontSize={30}>\n          El operador OR hará lo siguiente:\n\n          <OrderedList>\n            <ListItem fontSize={30}>Evaluará los operandos de izquierda a derecha.</ListItem>\n            <ListItem fontSize={30}>Dependiendo el valor de verdad del operando actual: si el resultado es true, se detiene y retorna el valor original de ese operando.</ListItem>\n            <ListItem fontSize={30}>Si se evaluaron todos los operandos (y todos eran False), retorna el último operando.</ListItem>\n          </OrderedList>\n        </Text>\n      </div>\n    </Slide>\n\n    <Slide backgroundColor=\"#0d0d0d\">\n      <div className=\"flex-center-column\">\n        <Heading fontSize={50}>\n          || (OR)\n        </Heading>\n        <Text fontSize={30}>\n          Siguiendo el ejemplo anterior...\n        </Text>\n        <CodePane language=\"js\">\n          {`\n            let firstName = \"\";\n            let lastName = \"\";\n            let nickName = \"Bob\";\n\n            console.log(firstName || lastName || nickName || \"Anonymous\"); // Bob\n          `}\n        </CodePane>\n        <br></br>\n        <CodePane language=\"js\">\n          {`\n            let groupOne = [];\n            let groupTwo = [];\n\n            console.log(groupOne || groupTwo || [\"Bob\", \"Ana\", \"Cam\"]); // [];\n          `}\n        </CodePane>\n      </div>\n    </Slide>\n\n    <Slide backgroundColor=\"#0d0d0d\">\n      <div className=\"flex-center-column\">\n        <Heading margin=\"0px\" fontSize={50}>\n          && (AND)\n        </Heading>\n\n        <Text fontSize={30}>\n          El operador lógico AND evalua a True cuando ambos operandos son True.\n          Caso contrario, siempre evalua a False.\n        </Text>\n        <Text fontSize={30}>\n          En JS la evaluación del AND es de <b>circuito corto</b>.\n        </Text>\n\n        <CodePane language=\"js\">\n          {`\n            let result = value1 && value2 && value3;\n          `}\n        </CodePane>\n        <Text fontSize={30}>\n          El operador AND hará lo siguiente:\n\n          <OrderedList>\n            <ListItem fontSize={30}>Evaluará los operandos de izquierda a derecha.</ListItem>\n            <ListItem fontSize={30}>Dependiendo el valor de verdad del operando actual: si el resultado es false, se detiene y retorna el valor original de ese operando.</ListItem>\n            <ListItem fontSize={30}>Si se evaluaron todos los operandos (y todos eran True), retorna el último operando.</ListItem>\n          </OrderedList>\n        </Text>\n      </div>\n    </Slide>\n\n    <Slide backgroundColor=\"#0d0d0d\">\n      <div className=\"flex-center-column\">\n        <Heading fontSize={50}>\n          && (AND)\n        </Heading>\n        <Text fontSize={30}>\n          Siguiendo el ejemplo anterior...\n        </Text>\n        <CodePane language=\"js\">\n          {`\n            // Si el primer operando es \"truthy\", el AND retornará el segundo operando:\n            console.log(1 && 0); // 0\n            console.log(1 && 5); // 5\n            \n            // Si el primer operando es \"falsy\", AND lo retorna. El segundo operando es ignorado.\n            console.log(null && 5); // null\n            console.log(0 && \"no matter what\"); // 0\n          `}\n        </CodePane>\n      </div>\n    </Slide>\n\n    <Slide backgroundColor=\"#0d0d0d\">\n      <div className=\"flex-center-column\">\n        <Heading margin=\"0px\" fontSize={50}>\n          ! (NOT)\n        </Heading>\n\n        <Text fontSize={35}>\n          El operador lógico NOT es utilizado para invertir el valor de verdad de un valor cualquiera.\n        </Text>\n        <OrderedList>\n          <ListItem fontSize={30}>\n            Convierte el operando a su tipo booleano: <b>true</b> / <b>false</b>.\n          </ListItem>\n          <ListItem fontSize={30}>\n            Retorna el valor inverso.\n          </ListItem>\n        </OrderedList>\n\n        <CodePane language=\"js\">\n          {`\n            console.log(!true); // false\n            console.log(!0); // true\n          `}\n        </CodePane>\n\n        <Text fontSize={30}>\n          Un doble NOT !! se utiliza a veces para convertir valores a su tipo booleano:\n        </Text>\n\n        <CodePane language=\"js\">\n          {`\n            console.log(!!\"non-empty string\"); // true\n            console.log(!!null); // false\n          `}\n        </CodePane>\n      </div>\n    </Slide>\n\n    <Slide backgroundColor=\"#0d0d0d\">\n      <div className=\"flex-center-column\">\n        <Heading fontSize={50}>\n          ?? (Nullish Coalescing)\n        </Heading>\n\n        <Text fontSize={30}>\n          El operador de Nullish Coalescing se escribe con dos signos <b>?</b>.\n          Si evaluamos <b>a ?? b</b> lo que sucede es lo siguiente:\n          <UnorderedList fontSize={30}>\n            <ListItem fontSize={30}>Si la variable <b>a</b> está definida, entonces se devuelve <b>a</b></ListItem>\n            <ListItem fontSize={30}>Si la variable <b>a</b> no está definida, entonces se devuelve <b>b</b>.</ListItem>\n          </UnorderedList>\n        </Text>\n\n        <Text fontSize={30}>\n          Es importante notar que este operador trata a <b>undefined</b> y <b>Null</b> de igual manera, por lo que decimos\n          que una variable esta definida si no es ni undefined ni Null.\n        </Text>\n\n        <CodePane language=\"js\">\n          {`\n            let user;\n\n            console.log(user ?? \"Anonymous\"); // Anonymous (user not defined)\n          `}\n        </CodePane>\n      </div>\n    </Slide>\n\n    {/* Basic Control Structures */}\n\n    <Slide backgroundColor=\"#0d0d0d\">\n      <div className=\"flex-center-column\">\n        <Heading margin=\"0px\" fontSize=\"50px\">\n          Estructuras de control\n        </Heading>\n\n        <Text fontSize={30}>\n          En JavaScript existen 5 estructuras de control básicas:\n        </Text>\n        <UnorderedList fontSize={30}>\n          <ListItem>\n            If / else\n          </ListItem>\n          <ListItem>\n            While\n          </ListItem>\n          <ListItem>\n            Do - while\n          </ListItem>\n          <ListItem>\n            For\n          </ListItem>\n          <ListItem>\n            Switch\n          </ListItem>\n        </UnorderedList>\n      </div>\n    </Slide>\n\n    <Slide backgroundColor=\"#0d0d0d\">\n      <div className=\"flex-center-column\">\n        <Heading margin=\"0px\" fontSize=\"50px\">\n          If / else\n        </Heading>\n\n        <Text fontSize={30}>\n          La sintáxis de la sentencia if es la siguiente (la cláusula <b>else</b> es opcional):\n        </Text>\n        <CodePane language=\"js\">\n          {`\n            if (condition) {\n              // if block statements\n            } else {\n              // else block statements\n            }\n          `}\n        </CodePane>\n        <Text fontSize={30}>\n          La sentencia if evalúa la expresión entre paréntesis y luego utiliza el valor de verdad del resultado de dicha evaluación.\n          Por ejemplo, la siguiente condición nunca ejecutará el bloque de código <b>block1.</b>\n        </Text>\n        <CodePane language=\"js\">\n          {\n            `\n                if (0) { // 0 is a falsy value\n                  // block1\n                }\n              `\n          }\n        </CodePane>\n      </div>\n    </Slide>\n\n    <Slide backgroundColor=\"#0d0d0d\">\n      <div className=\"flex-center-column\">\n        <Heading margin=\"0px\" fontSize=\"50px\">\n          Conditional operator (?)\n        </Heading>\n\n        <Text fontSize={30}>\n          Existe también el operador condicional <b>?</b> que nos permite escribir una sentencia if de manera\n          mucho más corta y simple.\n        </Text>\n        <CodePane language=\"js\">\n          {`\n            let result = condition ? value1 : value2;\n          `}\n        </CodePane>\n        <Text fontSize={30}>\n          En caso que <b>condition</b> evalue a true, entonces se asignará <b>value1</b> a la variable <b>result</b>,\n          caso contrario se asignará <b>value2</b>.\n        </Text>\n      </div>\n    </Slide>\n\n    <Slide backgroundColor=\"#0d0d0d\">\n      <div>\n        <Heading margin=\"0px\" fontSize=\"50px\">\n          Conditional operator (?) (cont...)\n        </Heading>\n        <Text fontSize={30}>\n          El <b>?</b> puede combinarse múltiples veces simulando sentencias <b>if/else</b>:\n        </Text>\n        <CodePane language=\"js\">\n          {`\n              let carBrand = \"Peugeot\";\n\n              let message = (carBrand == \"Suzuki\") ? \"Nice Suzuki!\" :\n                (carBrand == \"Fiat\") ? 'Nice Fiat!' :\n                (carBrand == \"Peugeot\") ? 'Nice Peugeot!' :\n                'I don't know that brand, nice car!';\n              \n              console.log(message);\n            `}\n        </CodePane>\n      </div>\n    </Slide>\n\n    <Slide backgroundColor=\"#0d0d0d\">\n      <div>\n        <Heading margin=\"0px\" fontSize=\"50px\">\n          While\n        </Heading>\n        <Text fontSize={30}>\n          La sintáxis del loop <b>while</b> es la siguiente:\n        </Text>\n        <CodePane language=\"js\">\n          {`\n              while (condition) {\n                // statements\n              }\n            `}\n        </CodePane>\n        <Text fontSize={30}>\n          El bloque de código que se encuentra dentro del loop while se ejecutará mientras\n          la evaluación de la condición sea <b>true</b>.\n        </Text>\n        <Text fontSize={30}>\n          Para finalizar la ejecución del loop antes que se cumpla la condición podemos utilizar la sentencia <b>break</b>.\n        </Text>\n      </div>\n    </Slide>\n\n    <Slide backgroundColor=\"#0d0d0d\">\n      <div>\n        <Heading margin=\"0px\" fontSize=\"50px\">\n          Do - while\n        </Heading>\n        <Text fontSize={30}>\n          El loop do-while es muy similar al loop while, excepto que en este caso primero se ejecuta el bloque\n          de código contenido dentro del mismo y luego se evalua la condición. Su sintáxis es la siguiente:\n        </Text>\n        <CodePane language=\"js\">\n          {`\n              do {\n                // statements\n              } while (condition);\n            `}\n        </CodePane>\n        <Text fontSize={30}>\n          Para finalizar la ejecución del loop antes que se cumpla la condición podemos utilizar la sentencia <b>break</b>.\n        </Text>\n      </div>\n    </Slide>\n\n    <Slide backgroundColor=\"#0d0d0d\">\n      <div>\n        <Heading margin=\"0px\" fontSize=\"50px\">\n          For\n        </Heading>\n        <Text fontSize={30}>\n          La sintáxis del loop <b>For</b> es la siguiente:\n        </Text>\n        <CodePane language=\"js\">\n          {`\n              for (begin; condition; step) {\n                // ... loop body ...\n              }\n            `}\n        </CodePane>\n        <Text fontSize={30}>\n          Por ejemplo, para ejecutar un bloque de código 30 veces deberíamos declarar la condición\n          del for de la siguiente manera:\n        </Text>\n        <CodePane language=\"js\">\n          {`\n            for (let i = 0; i < 30; i++) { // shows 0, then 1, then 2\n              console.log(i);\n            }\n          `}\n        </CodePane>\n        <Text fontSize={30}>\n          Para saltar a la siguiente iteración, podemos utilizar la sentencia <b>continue</b> y para finalizar\n          la ejecución del loop antes que se cumpla la condición podemos utilizar la sentencia <b>break</b>.\n        </Text>\n      </div>\n    </Slide>\n\n    <Slide backgroundColor=\"#0d0d0d\">\n      <div>\n        <Heading margin=\"0px\" fontSize=\"50px\">\n          for..in & for..of\n        </Heading>\n        <Text fontSize={30}>\n          Existen otros tipos de loop <b>for</b> que sirven a distintos casos de uso:\n        </Text>\n        <UnorderedList fontSize={30}>\n          <ListItem>\n            for..in\n            <Text fontSize={30}>La instrucción <b>for ... in</b> itera sobre todas las propiedades enumerables de un objeto.\n              Generalmente se utiliza para recorrer las \"claves\" o propiedades de un objeto.</Text>\n          </ListItem>\n          <ListItem>\n            for..of\n            <Text fontSize={30}>La instrucción <b>for ... of</b> crea un loop que itera sobre objetos iterables,\n              incluidos: String, Array, objetos similares a arreglos (por ejemplo, argumentos o NodeList),\n              TypedArray, Map, Set e iterables definidos por el usuario.</Text>\n          </ListItem>\n        </UnorderedList>\n      </div>\n    </Slide>\n\n    <Slide backgroundColor=\"#0d0d0d\">\n      <div>\n        <Heading margin=\"0px\" fontSize=\"50px\">\n          Ejemplo de uso for..in\n        </Heading>\n        <CodePane language=\"js\">\n          {`\n            const car = {\n              brand: \"Peugeot\",\n              model: \"208\",\n              year: 2019\n            }\n\n            for (const prop in car) {\n              console.log(prop);\n            }\n\n            // brand\n            // model\n            // year\n          `}\n        </CodePane>\n      </div>\n    </Slide>\n\n    <Slide backgroundColor=\"#0d0d0d\">\n      <div>\n        <Heading margin=\"0px\" fontSize=\"50px\">\n          Ejemplo de uso for..of\n        </Heading>\n        <CodePane language=\"js\">\n          {`\n            const array1 = ['a', 'b', 'c'];\n\n            for (const element of array1) {\n              console.log(element);\n            }\n            \n            // expected output: \"a\"\n            // expected output: \"b\"\n            // expected output: \"c\"\n          `}\n        </CodePane>\n      </div>\n    </Slide>\n\n    <Slide backgroundColor=\"#0d0d0d\">\n      <div>\n        <Heading margin=\"0px\" fontSize=\"50px\">\n          for..in vs for..of\n        </Heading>\n        <CodePane language=\"js\">\n          {`\n            const array1 = ['a', 'b', 'c'];\n\n            for (const element of array1) {\n              console.log(element);\n            }\n            \n            // expected output: \"a\"\n            // expected output: \"b\"\n            // expected output: \"c\"\n\n            for (const element in array1) {\n              console.log(element);\n            }\n\n            // expected output: \"0\"\n            // expected output: \"1\"\n            // expected output: \"2\"\n          `}\n        </CodePane>\n      </div>\n    </Slide>\n\n    <Slide backgroundColor=\"#0d0d0d\">\n      <div>\n        <Heading margin=\"0px\" fontSize=\"50px\">\n          Switch\n        </Heading>\n        <Text fontSize={30}>\n          El <b>switch</b> puede utilizarse para reemplazar múltiples sentencias <b>if</b> y su sintáxis es la siguiente:\n        </Text>\n        <CodePane language=\"js\">\n          {`\n              switch(x) {\n                case 'value1':  // if (x === 'value1')\n                  ...\n                  break; // break clause is optional, in case it's not present, following conditions are evaluated.\n                case 'value2':  // if (x === 'value2')\n                  ...\n                  break;\n                default:\n                  ...\n              }\n            `}\n        </CodePane>\n      </div>\n    </Slide>\n\n    {/* Error handling */}\n\n    <Slide backgroundColor=\"#0d0d0d\">\n      <div>\n        <Heading margin=\"0px\" fontSize=\"50px\">\n          Manejo de errores\n        </Heading>\n        <Text fontSize={30}>\n          JavaScript nos provee los bloques <b>try..catch</b> para capturar errores en tiempo de ejecución que pueden\n          provocar la finalización de nuestro script.\n        </Text>\n        <CodePane language=\"js\">\n            {`\n              try {\n                null = \"this is a null variable\";\n              } catch (err) {\n                console.log(err); // Syntax Error\n                console.log('Hey! Something went wrong...');\n              }\n            `}\n        </CodePane>\n        <Text fontSize={30}>\n          Como se puede ver en el snippet anterior, el bloque catch recibe siempre un objeto error como parámetro.\n          Este objeto error tiene 2 propiedades principales:\n          <UnorderedList fontSize={30}>\n            <ListItem>\n              name: el nombre del error (SyntaxError, TypeError, etc...)\n            </ListItem>\n            <ListItem>\n              message: un mensaje descriptivo que brinda un poco (no tanto) más de detalle sobre el error\n            </ListItem>\n          </UnorderedList>\n        </Text>\n      </div>\n    </Slide>\n\n    <Slide backgroundColor=\"#0d0d0d\">\n      <div>\n        <Heading margin=\"0px\" fontSize=\"50px\">\n          Manejo de errores (cont.)\n        </Heading>\n        <Text fontSize={30}>\n          Si no necesitamos detalles sobre el error podemos <b>omitir el parámetro error en el bloque catch. </b>\n          Además, pueden existir casos donde deseemos lanzar un error de manera intencional por comportamiento imprevisto\n          en el código. Para esto utilizamos la palabra clave <b>throw</b>.\n        </Text>\n        <CodePane language=\"js\">\n            {`\n              let json = '{ \"age\": 30 }'; // incomplete data\n\n              try {\n                let user = JSON.parse(json); // <-- no errors\n                if (!user.name) {\n                  throw new SyntaxError(\"Incomplete data: no name\");\n                }\n                console.log(user.name);\n              } catch (err) {\n                console.log(\"JSON Error: \" + err.message); // JSON Error: Incomplete data: no name\n              }\n            `}\n        </CodePane>\n      </div>\n    </Slide>\n\n    <Slide backgroundColor=\"#0d0d0d\">\n      <div>\n        <Heading margin=\"0px\" fontSize=\"50px\">\n          Manejo de errores (cont.)\n        </Heading>\n        <Text fontSize={30}>\n          Para lanzar errores propios JavaScript nos provee varios constructores para errores comúnes: Error, SyntaxError, ReferenceError, TypeError y otros.\n          Su sintáxis es la siguiente:\n        </Text>\n        <CodePane language=\"js\">\n            {`\n              let error = new Error(message);\n              // or\n              let error = new SyntaxError(message);\n              let error = new ReferenceError(message);\n              // ...\n            `}\n        </CodePane>\n        <Text fontSize={30}>\n          En estos casos, la propiedad <b>name</b> tendrá como valor el nombre del constructor (ej. SyntaxError) y la propiedad <b>message</b> tendrá como valor lo que hayamos pasado como parámetro al constructor.\n        </Text>\n      </div>\n    </Slide>\n\n    <Slide backgroundColor=\"#0d0d0d\">\n      <div>\n        <Heading margin=\"0px\" fontSize=\"50px\">\n          Manejo de errores (cont.)\n        </Heading>\n        <Text fontSize={30}>\n          Los bloques <b>try..catch</b> pueden contar con una cláusula extra (opcional) llamada <b>finally</b>.\n          Si está presente, el código contenido dentro de ese bloque se ejecutará siempre:\n          <UnorderedList fontSize={30}>\n            <ListItem>Después del <b>try</b> si no hubo errores.</ListItem>\n            <ListItem>Después del <b>catch</b> si hubo errores.</ListItem>\n          </UnorderedList>\n        </Text>\n        <CodePane language=\"js\">\n            {`\n              try {\n                ... try to execute the code ...\n             } catch (err) {\n                ... handle errors ...\n             } finally {\n                ... execute always ...\n             }\n            `}\n        </CodePane>\n      </div>\n    </Slide>\n\n    <Slide backgroundColor=\"#0d0d0d\">\n      <div>\n        <Heading margin=\"0px\" fontSize=\"50px\">\n          Creando nuestro propio error\n        </Heading>\n        <Text fontSize={30}>\n          Cuando estamos desarrollando es probable que querramos tener nuestras propias clases de errores\n          para reflejar situaciones específicas que pueden fallar durante la ejecución de nuestros programas.\n          Para esto, JavaScript nos permite definir clases que extienden de la clase base <b>Error</b>.\n        </Text>\n        <CodePane language=\"js\">\n          {`\n            class ValidationError extends Error {\n              constructor(message) {\n                super(message); // (1)\n                this.name = \"ValidationError\"; // (2)\n              }\n            }\n          \n            function test() {\n              throw new ValidationError(\"Whoops!\");\n            }\n          `}\n        </CodePane>\n      </div>\n    </Slide>\n\n    <Slide backgroundColor=\"#0d0d0d\">\n      <div>\n        <Heading margin=\"0px\" fontSize=\"50px\">\n          Creando errores custom (cont.)\n        </Heading>\n        <Text fontSize={30}>\n          En el ejemplo anterior, definimos un nuevo tipo de error para reflejar fallos en validaciones. Si bien al\n          extender de la clase <b>Error</b> nuestra clase hereda las 3 propiedades básicas <b>message, name y stack</b>,\n          podriamos definir todas las props extras que querramos.\n        </Text>\n        <CodePane language=\"js\">\n          {`\n            class HttpError extends Error {\n              constructor(message, statusCode) {\n                super(message); // (1)\n                this.name = \"HttpError\"; // (2)\n                this.statusCode = statusCode;\n              }\n            }\n          \n            function test() {\n              throw new HttpError(\"User not found\", 404);\n            }\n          `}\n        </CodePane>\n      </div>\n    </Slide>\n\n    {/* Functions */}\n\n    <Slide backgroundColor=\"#0d0d0d\">\n      <Heading margin=\"0px\" fontSize=\"50px\">\n        Funciones\n      </Heading>\n\n      <Text fontSize={30}>\n        Javascript nos permite definir funciones para modularizar y evitar repetir nuestro código.\n      </Text>\n\n      <Text fontSize={30}>\n        Para esto, podemos utilizar la palabra clave <b>function</b>.\n      </Text>\n\n      <CodePane language=\"js\">\n        {`\n          function myFunction(arg_1, arg_2) {\n            console.log(\"This is a function with two arguments!\")\n          }\n        `}\n      </CodePane>\n    </Slide>\n\n    <Slide backgroundColor=\"#0d0d0d\">\n      <Heading margin=\"0px\" fontSize=\"50px\">\n        Funciones\n      </Heading>\n\n      <Text fontSize={30}>\n        En caso de pasar un parámetro de tipo primitivo, por ejemplo un número, este parámetro será pasado por valor.\n      </Text>\n\n      <Text fontSize={30}>\n        En caso de pasar un objeto o array por parámetro, éste será pasado por referencia.\n      </Text>\n\n      <CodePane language=\"js\">\n        {`\n          function myFunction(theObject) {\n            theObject.brand = 'Toyota';\n          }\n\n          let mycar = { brand: 'Honda', model: 'Accord', year: 1998 };\n          console.log(mycar.brand); // \"Honda\"\n\n          myFunc(mycar);\n          console.log(mycar.brand); // \"Toyota\"\n        `}\n      </CodePane>\n    </Slide>\n\n    <Slide backgroundColor=\"#0d0d0d\">\n      <Heading margin=\"0px\" fontSize=\"50px\">\n        Expresiones\n      </Heading>\n\n      <Text fontSize={30}>\n        Las funciones también pueden ser definidas como <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/function\">expresiones</a>.\n      </Text>\n\n      <Text fontSize={30}>\n        Podemos definir funciones anónimas, sin proveer un nombre en su declaración.\n      </Text>\n\n      <CodePane language=\"js\">\n        {`\n          // This is an expression.\n          const square = function square(number) { return number * number }\n\n          // This is an anonymous function declared as an expression.\n          const square2 = function(number) { return number * number }\n        `}\n      </CodePane>\n    </Slide>\n\n    <Slide backgroundColor=\"#0d0d0d\">\n      <Heading margin=\"0px\" fontSize=\"50px\">\n        Lexical scoping\n      </Heading>\n\n      <Text fontSize={30}>\n        En JavaScript una función puede definirse dentro de otra. De esta forma, la función de adentro tiene acceso al contexto de la función que la contiene, pudiendo acceder a todo lo que está en su alcance.\n      </Text>\n\n      <CodePane language=\"js\">\n        {`\n          function init() {\n            var name = 'Mozilla'; // name is a local variable created by init\n            function displayName() { // displayName() is the inner function, a closure\n              console.log(name); // use variable declared in the parent function\n            }\n            displayName();\n          }\n          init();\n        `}\n      </CodePane>\n    </Slide>\n\n    <Slide backgroundColor=\"#0d0d0d\">\n      <Heading margin=\"0px\" fontSize=\"50px\">\n        Closures\n      </Heading>\n\n      <Text fontSize={30}>\n        Un closure es la combinación de una función y el entorno léxico dentro del cual se declaró esa función. Este entorno consta de las variables locales que estaban dentro del alcance en el momento en que se creó el closure.\n      </Text>\n\n      <CodePane language=\"js\">\n        {`\n          function makeFunc() {\n            var name = 'Mozilla';\n            function displayName() {\n              console.log(name);\n            }\n            return displayName;\n          }\n\n          var myFunc = makeFunc();\n          myFunc();\n        `}\n      </CodePane>\n\n      <Notes>\n        <p>\n          En este ejemplo, la función makeFunc no retorna un valor sino que retorna displayName, que es la función que se define dentro de makeFunc.\n        </p>\n\n        <p>\n          Debido a que la función displayName utiliza una variable local a makeFunc, al invocarla luego displayName sigue mostrando el nombre Mozilla, a pesar de que ese valor ya no forme parte del contexto de ejecución (formó parte del contexto de declaración).\n        </p>\n      </Notes>\n    </Slide>\n\n    {/* Hoisting */}\n\n    <Slide backgroundColor=\"#0d0d0d\">\n      <div style={{width: '80%'}}>\n        <Heading margin=\"0px\" fontSize=\"50px\">\n          Hoisting\n        </Heading>\n\n        <Text fontSize={30}>\n          Si bien el código en JS se ejecuta de manera secuencial (se ejecuta una línea y al terminar se ejecuta la que está debajo), el motor de JS procesa la declaración de funciones y variables previo a la ejecución del código.\n        </Text>\n\n        <Text fontSize={30}>\n          Para obtener más información, ver <a href=\"https://www.javascripttutorial.net/javascript-execution-context/\">Javascript execution Context</a>.\n        </Text>\n\n        <FlexBox justifyContent=\"space-between\">\n          <CodePane language=\"js\">\n            {`\n              catName(\"Chloe\");\n\n              function catName(name) {\n                console.log(\"My cat's name is \" + name);\n              }\n            `}\n          </CodePane>\n\n          <iframe src={`${process.env.PUBLIC_URL}/snippets/class1/hoisting1.html`}></iframe>\n        </FlexBox>\n      </div>\n\n      <Notes>\n        Podríamos pensar como que JS \"mueve las declaraciones de variables y funciones al principio de los archivos\" y por eso éstas pueden ser utilizadas previo a su declaración.\n      </Notes>\n    </Slide>\n\n    <Slide backgroundColor=\"#0d0d0d\">\n      <Heading margin=\"0px\" fontSize=\"50px\">\n        Hoisting\n      </Heading>\n\n      <Text fontSize={30}>\n        El hoisting de funciones, solo funciona con \"function declarations\" y no con \"function expressions\".\n      </Text>\n\n      <CodePane language=\"js\">\n        {`\n          console.log(square);    // square is hoisted with an initial value undefined.\n          console.log(square(5)); // Uncaught TypeError: square is not a function\n\n          const square = function(n) {\n            return n * n;\n          }\n        `}\n      </CodePane>\n    </Slide>\n\n    <Slide backgroundColor=\"#0d0d0d\">\n      <div style={{width: '80%'}}>\n\n        <Heading margin=\"0px\" fontSize=\"50px\">\n          Hoisting\n        </Heading>\n\n        <Text fontSize={30}>\n          En el caso de las variables definidas con <b>var</b>, éstas serán declaradas e inicializadas con el valor <b>undefined</b>.\n        </Text>\n\n        <Text fontSize={30}>\n          En el caso de variables definidas con <b>let</b> o constantes utilizando <b>const</b>, cualquier referencia a ellas previa a la línea donde son declaradas lanzará una excepción.\n        </Text>\n\n        <FlexBox justifyContent=\"space-between\">\n          <CodePane language=\"js\">\n            {`\n              console.log(num_var); // Returns 'undefined' from hoisted var declaration (not 6)\n              var num_var; // Declaration\n              num_var = 6; // Initialization\n\n              console.log(num_const) // ReferenceError\n              console.log(num_let) // ReferenceError\n              const num_const = 6;\n              let num_let;\n            `}\n          </CodePane>\n\n          <iframe src={`${process.env.PUBLIC_URL}/snippets/class1/hoisting2.html`}></iframe>\n        </FlexBox>\n      </div>\n\n      <Notes>\n        El motor de JavaScript solo hace el \"hoisting\" de la declaración de las variables, es decir que no tiene en cuenta su inicialización.\n      </Notes>\n    </Slide>\n\n    { /* Blocks and scopes */ }\n\n    <Slide backgroundColor=\"#0d0d0d\">\n      <div>\n        <Heading margin=\"0px\" fontSize=\"50px\">\n          Bloques\n        </Heading>\n        <Text fontSize={30}>\n          Los bloques se utilizan para agrupar cero o más sentencias y están delimitados por llaves {'{'} {'}'}.\n          Por ejemplo, las sentencias if y los loops vistos declaran un bloque para agrupar a las sentencias afectadas.\n        </Text>\n        <CodePane language=\"js\">\n          {`\n            var x = 1;\n            let y = 1;\n            \n            if (true) {  // start of the block\n              var x = 2;\n              let y = 2;\n            }            // end of the block\n            \n            console.log(x); // expected output: 2\n\n            console.log(y); // expected output: 1\n          `}\n        </CodePane>\n      </div>\n    </Slide>\n\n    <Slide backgroundColor=\"#0d0d0d\">\n      <div>\n        <Heading margin=\"0px\" fontSize=\"50px\">\n          Alcance de las variables\n        </Heading>\n        <Text fontSize={30}>\n          El alcance de una variable hace referencia a la región del programa donde la misma puede utilizarse.\n          En JavaScript los distintos tipos de variables vistos (var, let y const) tienen distintos alcances.\n          <UnorderedList fontSize={30}>\n            <ListItem><b>var:</b> podemos decir que tiene alcance \"global\".</ListItem>\n            <ListItem><b>let y const:</b> podemos decir que ambas tienen alcance de bloque. Las variables declaradas\n            con let y const podrán ser referenciadas dentro del bloque en que fueron declaradas.</ListItem>\n          </UnorderedList>\n        </Text>\n      </div>\n    </Slide>\n\n    <Slide backgroundColor=\"#0d0d0d\">\n      <div>\n        <Heading margin=\"0px\" fontSize=\"50px\">\n          Temporal Dead Zone <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let#temporal_dead_zone_tdz\">(TDZ)</a>\n        </Heading>\n        <Text fontSize={30}>\n          Las variables declaradas con <b>let</b> no pueden ser accedidas ni escritas hasta que hayan\n          sido completamente inicializadas, lo cual sucede en la declaración de las mismas. Acceder a \n          esa variable antes de haber sido inicializada resultará en <b>ReferenceError.</b>\n        </Text>\n        <Text fontSize={30}>\n          Se dice que la variable está en una \"zona muerta temporal\" desde el inicio del bloque hasta\n          que la inicialización de la misma se haya completado.\n        </Text>\n        <CodePane language=\"js\">\n          {`\n            { // TDZ starts at beginning of scope\n              console.log(bar); // undefined\n              console.log(foo); // ReferenceError\n              var bar = 1;\n              let foo = 2; // End of TDZ (for foo)\n            }\n          `}\n        </CodePane>\n      </div>\n    </Slide>\n\n    <Slide backgroundColor=\"#0d0d0d\">\n      <div>\n        <Heading margin=\"0px\" fontSize=\"50px\">\n          Alcance de las variables (cont.)\n        </Heading>\n        <CodePane language=\"js\">\n          {`\n            var x = 1;\n            {\n              var x = 2;\n            }\n            console.log(x); // logs 2\n\n            let x = 1;\n            {\n              let x = 2;\n            }\n            console.log(x); // logs 1\n          `}\n        </CodePane>\n      </div>\n    </Slide>\n\n    <Slide backgroundColor=\"#0d0d0d\">\n      <div>\n        <Heading margin=\"0px\" fontSize=\"50px\">\n          Alcance dentro de funciones\n        </Heading>\n        <Text fontSize={30}>\n          Las variables declaradas dentro de una función no pueden ser accedidas fuera de la misma. \n          Sin embargo, una función SI puede acceder a todas las variables declaradas dentro del alcance \n          donde la función misma fue declarada.\n        </Text>\n      </div>\n    </Slide>\n\n    <Slide backgroundColor=\"#0d0d0d\">\n      <div style={{ width: '80%'}}>\n        <Heading margin=\"0px\" fontSize=\"50px\">\n          Alcance dentro de funciones (cont.)\n        </Heading>\n\n        <div style={{ display: 'flex' }}>\n          <CodePane language=\"js\">\n            {`\n              // The following variables are defined in the global scope\n              var num1 = 10,\n                  num2 = 5,\n                  name = 'Juan';\n\n              // A nested function example\n              function getScore() {\n                var num1 = 2,\n                    num2 = 3;\n                  \n                function add() {\n                  return name + ' scored ' + (num1 + num2);\n                }\n\n                return add();\n              }\n\n              getScore();\n            `}\n          </CodePane>\n\n          <iframe src={`${process.env.PUBLIC_URL}/snippets/class1/scopes2.html`}></iframe>\n        </div>\n      </div>\n    </Slide>\n\n    <Slide backgroundColor=\"#0d0d0d\">\n      <div style={{ width: '80%'}}>\n        <Heading margin=\"0px\" fontSize=\"50px\">\n          Alcance dentro de funciones (cont.)\n        </Heading>\n\n        <div style={{ display: 'flex' }}>\n          <CodePane language=\"js\">\n            {`\n            function addFive(num) {\n                var numberFive = 5;\n                return num + numberFive;\n            }\n\n            addFive(3); // expected output: 8\n\n            console.log(numberFive);\n            `}\n          </CodePane>\n\n          <iframe src={`${process.env.PUBLIC_URL}/snippets/class1/scopes1.html`}></iframe>\n        </div>\n      </div>\n    </Slide>\n\n    <Slide backgroundColor=\"#0d0d0d\">\n      <div>\n        <Heading margin=\"0px\" fontSize=\"50px\">\n          Alcance de declaraciones de funciones\n        </Heading>\n        <Text fontSize={30}>\n          Las declaraciones de funciones son siempre locales al alcance actual. Esto quiere decir que si son\n          definidas en el contexto global, serán alcanzables por todo el script, y si son definidas dentro de otro bloque\n          seran solo alcanzables dentro de ese bloque.\n        </Text>\n        <CodePane language=\"js\">\n          {`\n            // global scope\n\n            // foo is a global function\n            function foo() {\n                // bar is local to foo\n                function bar() {\n                }\n            }\n          `}\n        </CodePane>\n      </div>\n    </Slide>\n\n    {/* Typeof */}\n\n    <Slide backgroundColor=\"#0d0d0d\">\n      <div>\n        <Heading margin=\"0px\" fontSize=\"50px\">\n          Operador typeof\n        </Heading>\n        <Text fontSize={30}>\n          Para inspeccionar el tipo de un valor podemos utilizar el operador <b>typeof</b>. Este operador retorna el\n          tipo de un valor en formato string. Puede utilizarse con o sin paréntesis alrededor del valor por el cual se está consultando:\n          <strong style={{ color: \"lightseagreen\" }}> typeof(true)</strong> ó <strong style={{ color: \"lightseagreen\" }}>typeof false</strong>.\n        </Text>\n        <CodePane language=\"js\">\n          {`\n            typeof(false);              // expected output: “boolean”\n            typeof({});                 // expected output: “object”\n            typeof(1);                  // expected output: “number”\n\n            let aString = “Un string”;\n            typeof(aString);            // expected output: “string”\n\n            typeof([]);                 // expected output: ???\n            typeof(null);               // expected output: ???\n            typeof(undefined);          // expected output: ???\n            typeof(function hey(){});   // expected output: ???\n          `}\n        </CodePane>\n      </div>\n    </Slide>\n\n    {/* CodeSandbox */}\n\n    <Slide backgroundColor=\"#0d0d0d\">\n      <div>\n        <Heading margin=\"0px\" fontSize=\"50px\">\n          CodeSandbox\n        </Heading>\n        <Text className=\"flex-center-column\" fontSize={30}>\n          <a href=\"https://codesandbox.io/s/boring-haze-h36gd?file=/src/index.js:168-247\">Ejercicios</a>\n        </Text>\n      </div>\n    </Slide>\n  </>\n);\n","import React from \"react\";\nimport '../../styles/styles.css';\nimport * as Slides from './slides';\n\nexport default () => (\n  <>\n    <Slides.Agenda />\n\n    <Slides.BuiltInFunctions />\n\n    <Slides.DomIntro />\n\n    <Slides.WindowAPI />\n\n    <Slides.Debugger />\n\n    <Slides.Callbacks />\n\n    <Slides.Events />\n\n    <Slides.Exercises />\n  </>\n);\n","import React from 'react';\nimport {\n  Slide,\n  Heading,\n  OrderedList,\n  ListItem,\n} from 'spectacle';\n\nexport default () => (\n  <>\n    <Slide backgroundColor=\"#0d0d0d\" className=\"flex-center-column\">\n      <Heading margin=\"0px\" fontSize=\"50px\">\n        Agenda\n      </Heading>\n\n      <OrderedList>\n        <ListItem>\n          Funciones built-in\n        </ListItem>\n\n        <ListItem>\n          Introducción al DOM\n        </ListItem>\n\n        <ListItem>\n          Window API\n        </ListItem>\n\n        <ListItem>\n          Debugging\n        </ListItem>\n\n        <ListItem>\n          Callbacks\n        </ListItem>\n\n        <ListItem>\n          Eventos\n        </ListItem>\n\n        <ListItem>\n          Ejercicios\n        </ListItem>\n      </OrderedList>\n    </Slide>\n  </>\n);\n","import React from 'react';\nimport {\n  Slide,\n  Heading,\n  Text,\n  CodePane,\n  Notes,\n  UnorderedList,\n  ListItem\n} from 'spectacle';\n\nexport default () => (\n  <>\n    <Slide backgroundColor=\"#0d0d0d\">\n      <Heading margin=\"0px\" fontSize=\"50px\">\n        Number.parseInt\n      </Heading>\n\n      <Text fontSize={30}>\n        <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/parseInt\">parseInt</a> es una función que recibe un string (si no es un string lo convierte) y retorna un entero (o NaN). Además recibe como segundo parámetro la base en la que dicho número está representado.\n      </Text>\n\n      <Text fontSize={30}>\n        <a href=\"https://thisthat.dev/number-constructor-vs-parse-int/\">Number() vs parseInt()</a>\n      </Text>\n\n      <CodePane language=\"js\">\n        {`\n          parseInt('0xF', 16)\n          parseInt('F', 16)\n          parseInt('17', 8)\n          parseInt(021, 8)\n          parseInt('015', 10)\n          parseInt(15.99, 10)\n          parseInt('1111', 2)\n          parseInt('15 * 3', 10)\n          parseInt('15e2', 10)\n          parseInt('15px', 10)\n\n          parseInt('Hello', 8) // Not a number at all\n          parseInt('546', 2)   // Digits other than 0 or 1 are invalid for binary radix\n        `}\n      </CodePane>\n\n      <Notes>\n        Recordar que el tipo primitivo Number también incluye la representación de números flotantes, y la función parseInt retorna siempre números enteros. Además permite transformar números que poseen distinta base.\n      </Notes>\n    </Slide>\n\n    <Slide backgroundColor=\"#0d0d0d\">\n      <Heading margin=\"0px\" fontSize=\"50px\">\n        Number.parseFloat\n      </Heading>\n\n      <Text fontSize={30}>\n        <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/parseFloat\">parseFloat</a> es una función que recibe un string (si no es un string lo convierte) y retorna un número flotante (o NaN).\n      </Text>\n\n      <CodePane language=\"js\">\n        {`\n          parseFloat(3.14);\n          parseFloat('3.14');\n          parseFloat('  3.14  ');\n          parseFloat('314e-2');\n          parseFloat('0.0314E+2');\n          parseFloat('3.14some non-digit characters');\n\n          parseFloat('FF2'); // NaN\n          parseFloat(900719925474099267n); // lose precision as the integer is too large to be represented as a float\n        `}\n      </CodePane>\n    </Slide>\n\n    <Slide backgroundColor=\"#0d0d0d\">\n      <Heading margin=\"0px\" fontSize=\"50px\">\n        isNaN / Number.isNaN\n      </Heading>\n\n      <Text fontSize={30}>\n        <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/isNaN\">isNaN</a> es una función que permite determinar si un valor es <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN\">NaN</a>.\n        Cuando el argumento pasado a esta función no es de tipo Number, primero se convierte a Number. Este compartamiento puede generar algunos casos especiales donde la función devuelve valores inesperados.\n      </Text>\n\n      <Text fontSize={30}>\n        Por este motivo, en ECMAScript 2015 se define la función <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isNaN\">Number.isNaN</a>, la cual sirve para determinar si el parámetro recibido es NaN y es de tipo Number.\n      </Text>\n\n      <CodePane language=\"js\">\n        {`\n          Number('false') // NaN.\n\n          isNaN(\"false\") // true because Number('false') returns NaN.\n\n          Number.isNaN(\"false\") // false because 'false' is not a Number.\n        `}\n      </CodePane>\n    </Slide>\n\n    <Slide backgroundColor=\"#0d0d0d\">\n      <Heading margin=\"0px\" fontSize=\"50px\">\n        String.localeCompare\n      </Heading>\n\n      <Text fontSize={30}>\n        <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/localeCompare\">localeCompare</a> es una función que retorna un número entero indicando si un string está antes, despues o es igual a otro.\n      </Text>\n\n      <CodePane language=\"js\">\n        {`\n          // The letter \"a\" is before \"c\" yielding a negative value\n          'a'.localeCompare('c'); // -2 or -1 (or some other negative value)\n\n          // Alphabetically the word \"check\" comes after \"against\" yielding a positive value\n          'check'.localeCompare('against'); // 2 or 1 (or some other positive value)\n\n          // \"a\" and \"a\" are equivalent yielding a neutral value of zero\n          'a'.localeCompare('a'); // 0\n\n          // Sort an array\n          let items = ['réservé', 'Premier', 'Cliché', 'communiqué', 'café', 'Adieu'];\n          items.sort( (a, b) => a.localeCompare(b, 'fr', {ignorePunctuation: true}));\n          // ['Adieu', 'café', 'Cliché', 'communiqué', 'Premier', 'réservé']\n        `}\n      </CodePane>\n    </Slide>\n\n    <Slide backgroundColor=\"#0d0d0d\">\n      <Heading margin=\"0px\" fontSize=\"50px\">\n        Object methods\n      </Heading>\n\n      <Text fontSize={30}>\n        El tipo Object provee una gran variedad de métodos que podemos utilizar para recorrerlo, copiarlo, filtrar sus claves, etc.\n      </Text>\n\n      <UnorderedList fontSize={30}>\n        <ListItem>\n          <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/entries\">Object.entries</a> retorna un array de arrays. Permite recorrer un objeto iterando por sus claves y valores.\n        </ListItem>\n\n        <ListItem>\n          <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys\">Object.keys</a> retorna un array con las claves de un objeto.\n        </ListItem>\n\n        <ListItem>\n          <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/values\">Object.values</a> retorna un array con los valores de un objeto.\n        </ListItem>\n\n        <ListItem>\n          <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\">Object.assign</a> copia todas las propiedades enumerables de uno o más objetos en otro.\n        </ListItem>\n      </UnorderedList>\n    </Slide>\n  </>\n);\n","import React from 'react';\nimport {\n  Slide,\n  Heading,\n  Text,\n  CodePane,\n  FlexBox,\n  UnorderedList,\n  ListItem,\n} from 'spectacle';\n\nexport default () => (\n  <>\n    <Slide backgroundColor=\"#0d0d0d\">\n      <Heading margin=\"0px\" fontSize=\"50px\">\n        Document Object Model (DOM)\n      </Heading>\n\n      <Text fontSize={30}>\n        <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model/Introduction\">DOM</a> es una interfaz de programación para documentos HTML y XML.\n      </Text>\n\n      <Text fontSize={30}>\n        Es una representación orientada a objetos de una página web. Representa a los documentos como nodos y objetos, y permite alterar su estructura, estilo y contenido programáticamente.\n      </Text>\n\n      <Text fontSize={30}>\n        El DOM fue diseñado para ser independiente de cualquier lenguaje de programación. Es muy común ver o hablar de manipular el DOM con JS, pero podría hacerse tambien con Python por ejemplo.\n      </Text>\n    </Slide>\n\n    <Slide backgroundColor=\"#0d0d0d\">\n      <Heading margin=\"0px\" fontSize=\"50px\">\n        Document API\n      </Heading>\n\n      <Text fontSize={30}>\n        La <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Document\">document API</a> es implementada por los navegadores web para permitirnos interactuar con el DOM.\n      </Text>\n\n      <Text fontSize={30}>\n        No se requiere la instalación de ninguna librería o herramienta. Con el simple hecho de incluir nuestro código JS dentro de la página HTML, ya tenemos acceso a esta API.\n      </Text>\n\n      <CodePane language=\"html\">\n        {`\n          <html>\n            <head>\n              <script>\n                // create a couple of elements in an empty HTML page\n                const heading = document.createElement(\"h1\");\n                const heading_text = document.createTextNode(\"Big Head!\");\n                heading.appendChild(heading_text);\n                document.body.appendChild(heading);\n              </script>\n            </head>\n            <body>\n            </body>\n          </html>\n        `}\n      </CodePane>\n    </Slide>\n\n    <Slide backgroundColor=\"#0d0d0d\">\n      <Heading margin=\"0px\" fontSize=\"50px\">\n        &lt;/script&gt;\n      </Heading>\n\n      <Text fontSize={30}>\n        El tag <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script\">script</a> se utiliza para embeber datos o código, generalmente JS.\n      </Text>\n\n      <Text fontSize={30}>\n        A este tag podemos pasarle un conjunto de atributos que permiten realizar cosas como cargar un script de manera asincrónica, ejecutar el script ni bien el documento es cargado, etc.\n      </Text>\n        \n      <Text fontSize={30}>\n        El atributo más común es <b>src</b>, que usaremos para indicarle a JavaScript la ubicación de nuestro script a cargar en el documento HTML.\n      </Text>\n\n      <CodePane language=\"html\">\n        {`\n          <script src=\"myScript.js\"></script>\n        `}\n      </CodePane>\n    </Slide>\n\n    <Slide backgroundColor=\"#0d0d0d\">\n      <Heading margin=\"0px\" fontSize=\"50px\">\n        Node\n      </Heading>\n\n      <Text fontSize={30}>\n        <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Node\">Node</a> es una clase abstracta en la que se basan muchos otros objetos de la DOM API.\n      </Text>\n\n      <Text fontSize={30}>\n        Todo elemento dentro del documento es un nodo de algún tipo. Puede ser, por ejemplo, un <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Element\">Element node</a>, Text node o Attribute node. Incluso <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Document\">Document</a> extiende de esta clase.\n      </Text>\n\n      <Text fontSize={30}>\n        Esta clase posee una gran cantidad de <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Node#methods\">métodos</a> que podemos utilizar para manipular el documento entero, incluso obtener otros nodos a partir de uno (sus hijos, hermanos, padre, etc.).\n      </Text>\n    </Slide>\n\n    <Slide backgroundColor=\"#0d0d0d\">\n      <Heading margin=\"0px\" fontSize=\"50px\">\n        Element\n      </Heading>\n\n      <Text fontSize={30}>\n        <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Element\">Element</a> es la clase base de la que todos los objetos en el documento heredan. Son objetos que representan elementos.\n      </Text>\n\n      <Text fontSize={30}>\n        También posee una gran cantidad de métodos y atributos. Es el objeto más común con el que vamos a interactuar al manipular el DOM.\n      </Text>\n\n      <CodePane language=\"js\">\n        {`\n          // search for an element by id\n          const element = document.getElementById('item');\n          // or\n          const element = document.querySelector('#item');\n\n          if (element.className === 'active'){\n            element.className = 'inactive';\n          } else {\n            element.className = 'active';\n          }\n        `}\n      </CodePane>\n    </Slide>\n\n    <Slide backgroundColor=\"#0d0d0d\">\n      <Heading margin=\"0px\" fontSize=\"50px\">\n        HTML global attributes\n      </Heading>\n\n      <Text fontSize={30}>\n        Son <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes#list_of_global_attributes\">atributos comunes a todos los elementos HTML</a>, aunque puede que no tengan efecto sobre algunos.\n      </Text>\n\n      <Text fontSize={30}>\n        Algunos ejemplos comúnes son <b><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes#attr-class\">class</a></b> que permite a CSS y JS acceder al elemento, <b><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes#attr-style\">style</a></b> que personaliza el CSS de ese elemento en particular, <b><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes#attr-id\">id</a></b> que asigna un identificador único al elemento, entre otros.\n      </Text>\n\n      <Text fontSize={30}>\n        Podemos obtener, modificar o borrar cualquier atributo de los elementos HTML utilizando <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Element/setAttribute\">element.setAttribute</a>, <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Element/getAttribute\">element.getAttribute</a> y <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Element/removeAttribute\">element.removeAttribute</a>\n      </Text>\n    </Slide>\n   \n    <Slide backgroundColor=\"#0d0d0d\">\n      <Heading margin=\"0px\" fontSize=\"50px\">\n        Cambiar estilos de un elemento\n      </Heading>\n\n      <FlexBox justifyContent=\"space-between\" style={{ width: '80%' }}>\n        <CodePane language=\"html\">\n          {`\n            <body>\n              <button id=\"btn\">Cambiar color</button>\n              \n              <p id=\"paragraph\">\n                Contiene texto <b style=\"color: red;\">Rojo</b>\n              </p>\n              \n              <script>\n                const coloredElem = document.querySelector(\"#paragraph b\");\n            \n                function clickHandler() {\n                  coloredElem.style.color = \"green\"\n                  coloredElem.innerHTML = \"Verde\";\n                };\n            \n                document.querySelector(\"#btn\").addEventListener(\"click\", clickHandler);\n              </script>\n            </body>\n          `}\n        </CodePane>\n\n        <iframe src={`${process.env.PUBLIC_URL}/snippets/class2/changeStyles.html`}></iframe>\n      </FlexBox>\n    </Slide>\n\n    <Slide backgroundColor=\"#0d0d0d\">\n      <Heading margin=\"0px\" fontSize=\"50px\">\n        Cambiar clase de un elemento\n      </Heading>\n\n      <FlexBox justifyContent=\"space-between\" style={{ width: '80%' }}>\n        <CodePane language=\"html\">\n          {`\n            <body>\n              <button id=\"btn\">Cambiar color</button>\n              \n              <p>\n                Contiene texto <b class=\"coloredText coloredTextRed\">Rojo</b>\n              </p>\n              \n              <script>\n                const coloredElem = document.querySelector(\".coloredText\");\n            \n                function clickHandler() {\n                  if (coloredElem.classList.contains('coloredTextRed')) {\n                    coloredElem.classList.add('coloredTextGreen');\n                    coloredElem.classList.remove('coloredTextRed');\n                    coloredElem.innerHTML = \"Verde\";\n                  } else {\n                    coloredElem.classList.add('coloredTextRed');\n                    coloredElem.classList.remove('coloredTextGreen');\n                    coloredElem.innerHTML = \"Rojo\";\n                  }\n                };\n            \n                document.querySelector(\"#btn\").addEventListener(\"click\", clickHandler);\n              </script>\n            </body>\n          `}\n        </CodePane>\n\n        <iframe src={`${process.env.PUBLIC_URL}/snippets/class2/changeClass.html`}></iframe>\n      </FlexBox>\n    </Slide>\n\n    <Slide backgroundColor=\"#0d0d0d\">\n      <Heading margin=\"0px\" fontSize=\"50px\">\n        InnerHTML y outerHTML\n      </Heading>\n\n      <Text fontSize={30}>\n        Atributos de Element que nos permiten obtener una representación del elemento o modificarlo. Ambos atributos nos permiten obtener un string con la representación HTML del elemento.\n      </Text>\n\n      <Text fontSize={30}>\n        La diferencia básica es que <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Element/innerHTML\">innerHTML</a> nos devuelve la representación de los elementos descendientes, mientras que <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Element/outerHTML\">outerHTML</a> también devuelve el elemento mismo como parte de la presentación.\n        Lo mismo sucede al intentar modificar estos atributos. Si utilizamos <b>innerHTML</b> solo sobreescribiremos el contenido del elemento, mientras que si usamos <b>outerHTML</b> también estaríamos sobreescribiendo el elemento mismo.\n      </Text>\n\n      <CodePane language=\"js\">\n        {`\n          // <p id=\"example\">Paragraph</p>\n\n          const elem = document.querySelector(#example);\n          console.log(elem.innerHTML); // \"Paragraph\"\n          console.log(elem.outerHTML); // <p id=\"example\">Paragraph</p>\n        `}\n      </CodePane>\n    </Slide>\n\n    <Slide backgroundColor=\"#0d0d0d\">\n      <Heading margin=\"0px\" fontSize=\"50px\">\n        Buscar elementos\n      </Heading>\n\n      <Text fontSize={30}>\n        Existe una gran variedad de métodos para obtener elementos del DOM. Notar que algunos devuelven un único elemento mientras que otros devuelven una colección (array).\n        Algunos ejemplos: \n      </Text>\n\n      <UnorderedList fontSize={30}>\n        <ListItem>\n          <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelector\">document.querySelector</a>\n        </ListItem>\n\n        <ListItem>\n          <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Element/querySelectorAll\">document.querySelectorAll</a>\n        </ListItem>\n\n        <ListItem>\n          <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Element/getElementsByClassName\">document.getElementsByClassName</a>\n        </ListItem>\n\n        <ListItem>\n          <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Document/getElementById\">document.getElementById</a>\n        </ListItem>\n\n        <ListItem>\n          <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Element/getElementsByTagName\">document.getElemenstByTagName</a>\n        </ListItem>\n      </UnorderedList>\n    </Slide>\n\n    <Slide backgroundColor=\"#0d0d0d\">\n      <Heading margin=\"0px\" fontSize=\"50px\">\n        Creación de nuevos elementos\n      </Heading>\n\n      <Text fontSize={30}>\n        Utilizando la document API, podemos crear nuevos elementos HTML, los cuales podemos luego agregar al documento. Para esto debemos usar la funcion <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Document/createElement\">document.createElement</a>.\n      </Text>\n\n      <CodePane language=\"js\">\n        {`\n          function addElement () {\n            // create a new div element\n            const newDiv = document.createElement(\"div\");\n\n            // and give it some content\n            const newContent = document.createTextNode(\"Hi there and greetings!\");\n\n            // add the text node to the newly created div\n            newDiv.appendChild(newContent);\n\n            // add the newly created element and its content into the DOM\n            document.body.appendChild(newDiv);\n          }\n        `}\n      </CodePane>\n    </Slide>\n  </>\n);\n","import React from 'react';\nimport {\n  Slide,\n  Heading,\n  Text,\n  CodePane,\n  UnorderedList,\n  ListItem,\n  Notes\n} from 'spectacle';\n\nexport default () => (\n  <>\n    <Slide backgroundColor=\"#0d0d0d\">\n      <Heading margin=\"0px\" fontSize=\"50px\">\n        Window API\n      </Heading>\n\n      <Text fontSize={30}>\n        La <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window\">Window API</a> es una interfaz que representa a una ventana que contiene un documento HTML.\n      </Text>\n\n      <Text fontSize={30}>\n        En JS tenemos disponible el objeto global <b>window</b>, que representa a la ventana que está ejecutando el script.\n      </Text>\n\n      <Text fontSize={30}>\n        En un navegador que posee pestañas, cada una está representada por su propio <b>window</b> object, sin embargo, aún algunas propiedades o funciones aún aplican al navegador completo.\n      </Text>\n    </Slide>\n    \n    <Slide backgroundColor=\"#0d0d0d\">\n      <Heading margin=\"0px\" fontSize=\"50px\">\n        Window API\n      </Heading>\n\n      <Text fontSize={30}>\n        Muchas funciones que solemos utilizar desde el código son expuestas por esta API, incluso la variable global <b>document</b> que utilizamos para interactuar con el DOM es una propiedad del objecto <b>window</b>.\n      </Text>\n      \n      <Text fontSize={30}>\n        Algunos ejemplos de funciones:\n      </Text>\n\n      <UnorderedList fontSize={30}>\n        <ListItem>\n          <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window/alert\">alert</a>\n        </ListItem>\n\n        <ListItem>\n          <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window/confirm\">confirm</a>\n        </ListItem>\n\n        <ListItem>\n          <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window/prompt\">prompt</a>\n        </ListItem>\n\n        <ListItem>\n          <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window/scroll\">scroll</a>\n        </ListItem>\n      </UnorderedList>\n    </Slide>\n\n    <Slide backgroundColor=\"#0d0d0d\">\n      <Heading margin=\"0px\" fontSize=\"50px\">\n        window.console\n      </Heading>\n\n      <Text fontSize={30}>\n        La propiedad <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window/console\"><b>window.console</b></a> retorna una referencia al objeto <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/console\">console</a>, que provee una serie de métodos para loguear información en la consola de desarrollo del navegador.\n      </Text>\n      \n      <Text fontSize={30}>\n        Permite loguear información con distintos niveles de importancia(<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/console/debug\">debug</a>, <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/console/error\">error</a>, <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/console/info\">info</a> o <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/console/log\">log</a> que es más general), y además permite <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/console#using_groups_in_the_console\">agrupar los logs en distintos grupos</a> y no solo loguear texto sino cualquier tipo de objetos.\n      </Text>\n\n      <Text fontSize={30}>\n        Permite incluso <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/console/count\">contar la cantidad de veces</a> que una línea fue ejecutada y también <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/console#timers\">calcular la duración</a> de una operación específica.\n      </Text>\n\n      <CodePane language=\"js\">\n        {`\n          console.log(\"Hello\");\n        `}\n      </CodePane>\n\n      <Notes>\n        Notar que para acceder a cualquier propiedad o función del objeto window no es necesario hacer \"window.method\".\n      </Notes>\n    </Slide>\n  </>\n);\n","import React from 'react';\nimport {\n  Slide,\n  Heading,\n  Text,\n  CodePane,\n} from 'spectacle';\n\nexport default () => (\n  <>\n    <Slide backgroundColor=\"#0d0d0d\">\n      <Heading margin=\"0px\" fontSize=\"50px\">\n        Debugger\n      </Heading>\n\n      <Text fontSize={30}>\n        La instrucción <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/debugger\"><b>debugger</b></a> invoca a cualquier funcionalidad de debugging que se encuentre disponible (si no existe ninguna, la instrucción no tiene efecto).\n      </Text>\n      \n      <Text fontSize={30}>\n        En el contexto de un navegador web, la instrucción <b>debugger</b> funciona como un breakpoint en la línea del script donde fue colocada, deteniendo la ejecución del programa y dejando disponible todo el contexto (variables, constantes y funciones), accesible desde la consola del navegador.\n      </Text>\n\n      <CodePane language=\"js\">\n        {`\n          const bar = 'foo';\n          debugger;\n        `}\n      </CodePane>\n    </Slide>\n  </>\n);\n","import React from 'react';\nimport {\n  Slide,\n  Heading,\n  Text,\n  CodePane,\n  FlexBox\n} from 'spectacle';\n\nexport default () => (\n  <>\n    <Slide backgroundColor=\"#0d0d0d\">\n      <Heading margin=\"0px\" fontSize=\"50px\">\n        Callbacks\n      </Heading>\n\n      <Text fontSize={30}>\n        Se denomina <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Callback_function\">callback</a> a una función que fue pasada a otra como parámetro para luego ser invocada.\n      </Text>\n\n      <CodePane language=\"js\">\n        {`\n          function greeting(name) {\n            alert('Hello ' + name);\n          }\n          \n          function processUserInput(callback) {\n            var name = prompt('Please enter your name.');\n            callback(name);\n          }\n          \n          processUserInput(greeting);\n        `}\n      </CodePane>\n    </Slide>\n\n    <Slide backgroundColor=\"#0d0d0d\">\n      <Heading margin=\"0px\" fontSize=\"50px\">\n        setTimeout\n      </Heading>\n\n      <Text fontSize={30}>\n        La función <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/setTimeout\">setTimeout</a> establece un timer que ejecutará un callback cuando éste expire.\n      </Text>\n\n      <Text fontSize={30}>\n        Recibe como primer argumento un callback y como segundo argumento el tiempo en milisegundos luego de los cuales la función debe ser llamada y ambos son obligatorios.\n        Los argumentos pasados luego de estos, serán argumentos que recibirá la función al ser invocada.\n      </Text>\n\n      <Text fontSize={30}>\n        Esta función retorna un <b>timeoutID</b>, que es un entero que representa al timer creado. Este valor puede ser usado luego para cancelar la ejecución del timer utilizando la función <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/clearTimeout\">clearTimeout</a>.\n      </Text>\n    </Slide>\n\n    <Slide backgroundColor=\"#0d0d0d\">\n      <Heading margin=\"0px\" fontSize=\"50px\">\n        setTimeout\n      </Heading>\n\n      <FlexBox justifyContent=\"space-between\" style={{ width: '80%' }}>\n        <CodePane language=\"js\">\n          {`\n            const resultContainer = document.querySelector(\"#result\");\n\n            function startTimer() {\n              setTimeout(function () {\n                resultContainer.value = resultContainer.value + \"Timer expired after 1 second\";\n              }, 1000)\n            };\n\n            function clearResult() {\n              result.value = '';\n            }\n        \n            document.querySelector(\"#startBtn\").addEventListener(\"click\", startTimer);\n            document.querySelector(\"#clearBtn\").addEventListener(\"click\", clearResult)\n          `}\n        </CodePane>\n\n        <iframe src={`${process.env.PUBLIC_URL}/snippets/class2/setTimeout.html`}></iframe>\n      </FlexBox>\n    </Slide>\n\n    <Slide backgroundColor=\"#0d0d0d\">\n      <Heading margin=\"0px\" fontSize=\"50px\">\n        setInterval\n      </Heading>\n\n      <Text fontSize={30}>\n        La función <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/setInterval\">setInterval</a> establece un timer que ejecutará un callback <b>cada vez</b> que se cumpla el tiempo especificado.\n      </Text>\n\n      <Text fontSize={30}>\n        Recibe como primer argumento un callback y como segundo argumento el intervalo en milisegundos que debe cumplirse para invocar a la función y ambos son obligatorios.\n        Los argumentos pasados luego de estos, serán argumentos que recibirá la función al ser invocada.\n      </Text>\n\n      <Text fontSize={30}>\n        Esta función retorna un <b>timeoutID</b>, que es un entero que representa al timer creado. Este valor puede ser usado luego para cancelar la ejecución del timer utilizando la función <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/clearInterval\">clearInterval</a>.\n      </Text>\n    </Slide>\n\n    <Slide backgroundColor=\"#0d0d0d\">\n      <Heading margin=\"0px\" fontSize=\"50px\">\n        setInterval\n      </Heading>\n\n      <FlexBox justifyContent=\"space-between\" style={{ width: '80%' }}>\n        <CodePane language=\"js\">\n          {`\n            let intervalId;\n            function startInterval() {\n              intervalId = setInterval(flashText, 500);\n            }\n        \n            function flashText() {\n              const container = document.querySelector('#container');\n        \n              if (container.style.color === 'red') {\n                container.style.color = 'blue'\n              } else {\n                container.style.color = 'red'\n              }\n            }\n        \n            function stopTextColor() {\n              clearInterval(intervalId);\n            }\n          `}\n        </CodePane>\n\n        <iframe src={`${process.env.PUBLIC_URL}/snippets/class2/setInterval.html`}></iframe>\n      </FlexBox>\n    </Slide>\n  </>\n);\n","import React from 'react';\nimport {\n  Slide,\n  Heading,\n  Text,\n  CodePane,\n  Notes,\n  UnorderedList,\n  ListItem,\n} from 'spectacle';\n\nexport default () => (\n  <>\n    <Slide backgroundColor=\"#0d0d0d\">\n      <Heading margin=\"0px\" fontSize=\"50px\">\n        Eventos\n      </Heading>\n\n      <Text fontSize={30}>\n        Los eventos son utilizados en JS para notificar de cambios o circunstancias que podrían afectar la ejecución del código.\n      </Text>\n\n      <Text fontSize={30}>\n        Estos eventos pueden dispararse a partir de la interacción de un usuario con el sitio (click sobre un elemento, arrastar un elemento, cambiar el tamaño de una ventana) o incluso pueden ser eventos disparados por el dispositivo (batería baja, eventos del SO). También pueden ser disparados programáticamente, por ejemplo para indicar el progreso de cierta tarea, o enviar una notificación cuando una acción asincrónica sea completada.\n      </Text>\n\n      <Text fontSize={30}>\n        Cada evento está representado por un objeto basado en la interfaz <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Event\">Event</a>, y puede tener propiedades o métodos adicionales que ayuden o faciliten su procesamiento. Existe una gran variedad de <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Event#introduction\">tipos de eventos</a> distintos, representados por interfaces que implementan Event.\n      </Text>\n    </Slide>\n\n    <Slide backgroundColor=\"#0d0d0d\">\n      <Heading margin=\"0px\" fontSize=\"50px\">\n        Event interface\n      </Heading>\n\n      <Text fontSize={30}>\n        Esta interfaz posee varias propiedades y métodos que son muy útiles al momento de manejar eventos. Algunos de los más importantes:\n      </Text>\n\n      <UnorderedList fontSize={30}>\n        <ListItem>\n          <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Event/isTrusted\">Event.isTrusted</a> indica si el evento fue iniciado por el browser o por un script.\n        </ListItem>\n\n        <ListItem>\n          <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Event/timeStamp\">Event.timestamp</a> retorna un unix timestamp que representa el momento en que el evento fue creado.\n        </ListItem>\n\n        <ListItem>\n          <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Event/target\">Event.target</a> retorna una referencia al elemento que disparó el evento.\n        </ListItem>\n\n        <ListItem>\n          <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Event/preventDefault\">Event.preventDefault()</a> cancela el evento si es cancelable, evitando que se ejecute la acción propia del elemento cuando ocurre el evento. Por ejemplo podemos cancelar el envío de un formulario, o la redirección al hacer click en un link.\n        </ListItem>\n      </UnorderedList>\n    </Slide>\n\n    <Slide backgroundColor=\"#0d0d0d\">\n      <Heading margin=\"0px\" fontSize=\"50px\">\n        Event handling\n      </Heading>\n\n      <Text fontSize={30}>\n        Los eventos pueden ocurrir sobre un elemento en particular, un set de elementos o incluso la ventana del browser completa, dependiendo el tipo de evento. Tienen asociados manejadores, que son básicamente funciones JS que se ejecutan cuando el evento es disparado. Un mismo evento puede tener varios manejadores asociados\n      </Text>\n\n      <Text fontSize={30}>\n        Podemos programáticamente agregar o remover manejadores utilizando las funciones <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener\">addEventListener</a> y <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/removeEventListener\">removeEventListener</a>. Esta es la <a href=\"https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Events#what_mechanism_should_i_use\">forma moderna de hacerlo</a>, que reemplaza a <a href=\"https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Events#inline_event_handlers_%E2%80%94_dont_use_these\">inline event handlers</a> y provee más flexibilidad que <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers\">GlobalEventHandlers</a>.\n      </Text>\n\n      <CodePane language=\"js\">\n        {`\n          function clickHandler() {\n            // some code here\n          }\n\n          btn.addEventListener('click', clickHandler);\n          btn.removeEventListener('click', clickHandler);\n        `}\n      </CodePane>\n    </Slide>\n\n    <Slide backgroundColor=\"#0d0d0d\">\n      <Heading margin=\"0px\" fontSize=\"50px\">\n        Event handling\n      </Heading>\n\n      <Text fontSize={30}>\n        Algunos de los eventos más comunes que se suelen utilizar.\n      </Text>\n\n      <img\n        src={`${process.env.PUBLIC_URL}/images/common_events.png`}\n        alt=\"common events\"\n        height=\"60%\"\n      />\n    </Slide>\n\n    <Slide backgroundColor=\"#0d0d0d\">\n      <Heading margin=\"0px\" fontSize=\"50px\">\n        Creando eventos\n      </Heading>\n\n      <Text fontSize={30}>\n        Se pueden crear eventos utilizando el constructor <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Event\">Event</a>.\n      </Text>\n\n      <Text fontSize={30}>\n        Podemos utilizar la función <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/dispatchEvent\">dispatchEvent</a> para disparar el evento.\n      </Text>      \n\n      <CodePane language=\"js\">\n        {`\n          function handler(e) {\n            console.log(e.type);\n            console.log(e.detail);\n          }\n\n          const event = new Event('build');\n          \n          // Listen for the event.\n          elem.addEventListener('build', handler);\n          \n          // Dispatch the event.\n          elem.dispatchEvent(event);\n        `}\n      </CodePane>\n    </Slide>\n\n    <Slide backgroundColor=\"#0d0d0d\">\n      <Heading margin=\"0px\" fontSize=\"50px\">\n        Creando eventos\n      </Heading>\n\n      <Text fontSize={30}>\n        En el caso de necesitar pasarle información adicional a un evento, podemos usar el constructor <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent/CustomEvent\">CustomEvent</a>, que además de las propiedades que podemos pasarle a Event, permite una clave <b>detail</b>.\n      </Text>\n\n      <CodePane language=\"js\">\n        {`\n          function handler(e) {\n            console.log(e.type);\n            console.log(e.detail);\n          }\n          \n          // Listen for the event.\n          elem.addEventListener('build', handler);\n          \n          const event = new CustomEvent('build', { detail: 'Success' });\n          \n          // Dispatch the event.\n          elem.dispatchEvent(event);\n        `}\n      </CodePane>\n\n      <Notes>\n        Podemos asociar un manejador a un elemento aún cuando el evento aún no fue creado.\n      </Notes>\n    </Slide>\n\n    <Slide backgroundColor=\"#0d0d0d\">\n      <Heading margin=\"0px\" fontSize=\"50px\">\n        Propagación de eventos\n      </Heading>\n\n      <Text fontSize={30}>\n        <a href=\"https://www.w3.org/TR/DOM-Level-3-Events/#event-flow\">Event dispatch and DOM event flow</a>, <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Event/stopPropagation\">Event.stopPropagation</a>.\n      </Text>\n\n      <div style={{ textAlign: 'center' }}>\n        <img\n          src={`${process.env.PUBLIC_URL}/images/dom_event_flow.png`}\n          alt=\"common events\"\n          height=\"70%\"\n          width=\"50%\"\n        />\n      </div>\n    </Slide>\n\n    <Slide backgroundColor=\"#0d0d0d\">\n      <Heading margin=\"0px\" fontSize=\"50px\">\n        Propagación de eventos\n      </Heading>\n\n      <CodePane language=\"html\">\n        {`\n          <form id=\"form\">FORM\n            <div id=\"div\">DIV\n              <p id=\"p\">\n                P\n              </p>\n            </div>\n          </form>\n        \n          <script>\n            const form = document.querySelector(\"#form\");\n            const div = document.querySelector(\"#div\");\n            const p = document.querySelector(\"#p\");\n        \n            function clickHandler(e) {\n              alert(e.currentTarget.tagName);\n            }\n        \n            form.addEventListener('click', clickHandler);\n            div.addEventListener('click', clickHandler);\n            p.addEventListener('click', clickHandler);\n          </script>\n        `}\n      </CodePane>\n      \n      <iframe src={`${process.env.PUBLIC_URL}/snippets/class2/bubbling.html`}></iframe>\n    </Slide>\n  </>\n);\n","import React from 'react';\nimport {\n  Slide,\n  Heading,\n  OrderedList,\n  ListItem\n} from 'spectacle';\n\nexport default () => (\n  <>\n    <Slide backgroundColor=\"#0d0d0d\" className=\"flex-center-column\">\n      <Heading margin=\"0px\" fontSize=\"50px\">\n        Práctica\n      </Heading>\n\n      <OrderedList fontSize={30}>\n        <ListItem>\n          <a href=\"https://codesandbox.io/s/counter-ocqj1\">Counter</a>\n        </ListItem>\n\n        <ListItem>\n          <a href=\"https://codesandbox.io/s/clock-2oqsz\">Clock</a>\n        </ListItem>\n\n        <ListItem>\n          <a href=\"https://codesandbox.io/s/form-j5kwf\">Cart with Dynamic fields</a>\n        </ListItem>\n      </OrderedList>\n    </Slide>\n  </>\n);\n","import React from \"react\";\nimport \"../../styles/styles.css\";\nimport * as Slides from \"./slides\";\n\nexport default () => (\n  <>\n    <Slides.Agenda />\n    <Slides.Introduction />\n    <Slides.ArrayMethods />\n    <Slides.RestSpread />\n    <Slides.Destructuring />\n    <Slides.ConditionalChaining />\n    <Slides.Modules />\n    <Slides.Classes />\n    <Slides.ArrowFunctions />\n    <Slides.TemplateLiterals />\n    <Slides.StrictMode />\n    <Slides.NewDataStructures />\n    <Slides.Excercises />\n  </>\n);\n","import React from \"react\";\nimport { Slide, Heading, Text, UnorderedList, ListItem } from \"spectacle\";\n\nexport default () => (\n  <>\n    <Slide backgroundColor=\"#0d0d0d\">\n      <Heading margin=\"0px\" fontSize=\"50px\">\n        ECMAScript\n      </Heading>\n\n      <Text fontSize={30}>\n        Como vimos en la primera clase, ECMAScript es una especificación\n        estándar de JavaScript.\n      </Text>\n\n      <Text fontSize={30}>\n        A la fecha existen 11 versiones publicadas de ECMAScript, siendo la\n        primera de 1997, y la ultima de 2020. Una de las versiones mas\n        conocidas, y que agregó cambios significativos fue la\n        <strong> sexta edición (2015), conocida como ES6.</strong>\n      </Text>\n\n      <Text fontSize={30}>\n        Si bien las demás versiones también agregan funcionalidades muy\n        interesantes, en esta clase nos\n        <strong> centraremos mayormente en ES6</strong>.\n      </Text>\n    </Slide>\n\n    <Slide backgroundColor=\"#0d0d0d\">\n      <Heading margin=\"0px\" fontSize=\"50px\">\n        <a href=\"http://es6-features.org/\">ES6</a>\n      </Heading>\n\n      <Text fontSize={30}>\n        Dentro de las nuevas funcionalidades y cambios que se introdujeron en\n        ES6 podemos destacar:\n        <UnorderedList fontSize={30}>\n          <ListItem>Let y const</ListItem>\n          <ListItem>Nuevos métodos de Array</ListItem>\n          <ListItem>Arrow functions</ListItem>\n          <ListItem>Template literals</ListItem>\n          <ListItem>Operadores rest y spread</ListItem>\n          <ListItem>Desestructuración de objetos</ListItem>\n          <ListItem>Nuevo sistema de módulos</ListItem>\n          <ListItem>Clases</ListItem>\n          <ListItem>Funciones generadoras</ListItem>\n          <ListItem>Promesas</ListItem>\n        </UnorderedList>\n      </Text>\n    </Slide>\n\n    <Slide backgroundColor=\"#0d0d0d\" style={{ display: \"flex\" }}>\n      <Heading margin=\"0px\" fontSize=\"50px\">\n        Compatibilidad hacia atrás\n      </Heading>\n\n      <Text fontSize={30}>\n        Todos los sistemas que utilizan JS en cualquiera de sus versiones\n        siempre serán compatibles con versiones más nuevas. Esto quiere decir\n        que si se programó un sistema utilizando características de ES5, el\n        mismo podrá correr perfectamente cuando el engine de JS incorpore\n        características de ES6.\n      </Text>\n\n      <div style={{ alignSelf: \"center\" }}>\n        <img\n          src={`${process.env.PUBLIC_URL}/images/babel.png`}\n          width=\"300\"\n          height=\"150\"\n        />\n      </div>\n\n      <Text fontSize={30}>\n        Los navegadores no siempre implementan todas las funcionalidades nuevas\n        de cada version de ECMAScript de inmediato, por lo que si se desea\n        utilizar funcionalidades de una version reciente de ES, para garantizar\n        compatibilidad entre todos los navegadores, se puede utilizar una\n        herramienta como <a href=\"https://babeljs.io/\">Babel </a>\n        que sirve para transpilar código de ESX a JavaScript puro.\n      </Text>\n    </Slide>\n  </>\n);\n","import React from \"react\";\nimport {\n  Slide,\n  Heading,\n  Text,\n  UnorderedList,\n  ListItem,\n  CodePane,\n} from \"spectacle\";\n\nexport default () => (\n  <>\n    <Slide backgroundColor=\"#0d0d0d\">\n      <Heading margin=\"0px\" fontSize=\"50px\">\n        New array methods\n      </Heading>\n\n      <Text fontSize={30}>\n        Con ES6 llegaron nuevos métodos sobre el tipo de dato Array, que nos\n        permiten manipularlo de una forma más “funcional”. Si bien algunos de\n        los métodos que veremos existen con anterioridad a la versión ES6,\n        aprovechamos esta clase para introducirlos. Los más populares son:\n      </Text>\n\n      <UnorderedList fontSize={30}>\n        <ListItem>\n          Array.<strong>map()</strong>\n        </ListItem>\n        <ListItem>\n          Array.<strong>find()</strong>\n        </ListItem>\n        <ListItem>\n          Array.<strong>forEach()</strong>\n        </ListItem>\n        <ListItem>\n          Array.<strong>reduce()</strong>\n        </ListItem>\n        <ListItem>\n          Array.<strong>from()</strong>\n        </ListItem>\n      </UnorderedList>\n\n      <Text fontSize={30}>\n        Existe una gran cantidad de métodos de Array y pueden verse{\" \"}\n        <a href=\"https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array\">\n          aquí.\n        </a>\n      </Text>\n    </Slide>\n\n    <Slide backgroundColor=\"#0d0d0d\">\n      <Heading margin=\"0px\" fontSize=\"50px\">\n        Array.map\n      </Heading>\n\n      <Text fontSize={30}>\n        El método{\" \"}\n        <a href=\"https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/map\">\n          map()\n        </a>{\" \"}\n        crea un nuevo array con los resultados de la llamada a la función\n        callback recibida sobre cada uno de sus elementos.\n      </Text>\n\n      <CodePane language=\"js\">\n        {`\n          const numbers = [1, 4, 9];\n          const roots = numbers.map(function(num) {\n              return Math.sqrt(num);\n          });\n\n          const people = [{name: 'John', age: 21}, {name:'Anna', age: 22}];\n          const names = people.map(function(person) {\n            return person.name;\n          });\n        `}\n      </CodePane>\n    </Slide>\n\n    <Slide backgroundColor=\"#0d0d0d\" style={{ display: \"flex\" }}>\n      <Heading margin=\"0px\" fontSize=\"50px\">\n        Array.find()\n      </Heading>\n\n      <Text fontSize={30}>\n        El método{\" \"}\n        <a href=\"https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/find\">\n          find()\n        </a>{\" \"}\n        devuelve el valor del primer elemento del array que evalúa a true la\n        función proporcionada.\n      </Text>\n\n      <CodePane language=\"js\">\n        {`\n          const inventary = [\n            {name: 'apples', quantity: 2},\n            {name: 'bananas', quantity: 0},\n            {name: 'cherry', quantity: 5}\n          ];\n        \n          function isCherry(fruit) {\n              return fruit.name === 'cherry';\n          }\n          \n          console.log(inventary.find(isCherry)); // { name: 'cherrys', quantity: 5 }\n        `}\n      </CodePane>\n    </Slide>\n\n    <Slide backgroundColor=\"#0d0d0d\" style={{ display: \"flex\" }}>\n      <Heading margin=\"0px\" fontSize=\"50px\">\n        Array.forEach()\n      </Heading>\n\n      <Text fontSize={30}>\n        El método{\" \"}\n        <a href=\"https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/foreach\">\n          forEach()\n        </a>{\" \"}\n        ejecuta la función indicada una vez por cada elemento del array.\n      </Text>\n\n      <CodePane language=\"js\">\n        {`\n          const array = ['a', 'b', 'c'];\n\n          array.forEach(element => console.log(element));\n          \n          // expected output: \"a\"\n          // expected output: \"b\"\n          // expected output: \"c\"\n        `}\n      </CodePane>\n    </Slide>\n\n    <Slide backgroundColor=\"#0d0d0d\" style={{ display: \"flex\" }}>\n      <Heading margin=\"0px\" fontSize=\"50px\">\n        Array.reduce()\n      </Heading>\n\n      <Text fontSize={30}>\n        El método{\" \"}\n        <a href=\"https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce\">\n          reduce()\n        </a>{\" \"}\n        ejecuta una función reductora sobre cada elemento de un array,\n        devolviendo como resultado un único valor.\n      </Text>\n\n      <CodePane language=\"js\">\n        {`\n          const array1 = [1, 2, 3, 4];\n          const reducer = (accumulator, currentValue) => accumulator + currentValue;\n          \n          // 1 + 2 + 3 + 4\n          console.log(array1.reduce(reducer)); // expected output: 10\n          \n          // 5 + 1 + 2 + 3 + 4\n          console.log(array1.reduce(reducer, 5)); // expected output: 15\n        `}\n      </CodePane>\n    </Slide>\n\n    <Slide backgroundColor=\"#0d0d0d\" style={{ display: \"flex\" }}>\n      <Heading margin=\"0px\" fontSize=\"50px\">\n        Array.reduce()\n      </Heading>\n      <Text fontSize={30}>La función reductora recibe cuatro argumentos:</Text>\n      <UnorderedList fontSize={30}>\n        <ListItem>Acumulador (acc)</ListItem>\n        <ListItem>Valor Actual (cur)</ListItem>\n        <ListItem>Índice Actual (idx)</ListItem>\n        <ListItem>Array (src)</ListItem>\n      </UnorderedList>\n      <Text fontSize={30}>\n        El valor devuelto de la función reductora se asigna al acumulador, cuyo\n        valor se recuerda en cada iteración y, en última instancia, se convierte\n        en el valor final, único y resultante.\n      </Text>\n    </Slide>\n\n    <Slide backgroundColor=\"#0d0d0d\" style={{ display: \"flex\" }}>\n      <Heading margin=\"0px\" fontSize=\"50px\">\n        Array.from()\n      </Heading>\n\n      <Text fontSize={30}>\n        El método{\" \"}\n        <a href=\"https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array/from\">\n          from()\n        </a>{\" \"}\n        crea una nueva instancia de Array a partir de un objeto iterable.\n      </Text>\n\n      <CodePane language=\"js\">\n        {`\n          console.log(Array.from('JavaScript'));\n          // expected output: Array [\"J\", \"a\", \"v\", \"a\", \"S\", \"c\", \"r\", \"i\", \"p\", \"t\"];\n\n          console.log(Array.from([1, 2, 3], x => x + x));\n          // expected output: Array [2, 4, 6]\n        `}\n      </CodePane>\n\n      <Text fontSize={30}>\n        Array.from() permite crear Arrays de:\n        <UnorderedList fontSize={30}>\n          <ListItem>\n            Objetos array-like (objetos con propiedad length o elementos\n            indexados).\n          </ListItem>\n          <ListItem>\n            Objetos{\" \"}\n            <a href=\"https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Iteration_protocols\">\n              iterables\n            </a>{\" \"}\n            (objetos de los cuales se pueden obtener sus elementos como Map y\n            Set).\n          </ListItem>\n        </UnorderedList>\n      </Text>\n    </Slide>\n  </>\n);\n","import React from \"react\";\nimport {\n  Slide,\n  Heading,\n  Text,\n  UnorderedList,\n  ListItem,\n  CodePane,\n} from \"spectacle\";\n\nexport default () => (\n  <>\n    <Slide backgroundColor=\"#0d0d0d\">\n      <Heading margin=\"0px\" fontSize=\"50px\">\n        Operador spread\n      </Heading>\n\n      <Text fontSize={30}>\n        El{\" \"}\n        <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax\">\n          operador spread\n        </a>{\" \"}\n        permite a un elemento iterable (por ej. un arreglo o un string) ser\n        expandido en cero o más parámetros (para llamadas a funciones),\n        elementos (para arreglos) o, en el caso de un objeto, ser expandido en\n        cero o más pares de clave-valor.\n      </Text>\n\n      <CodePane language=\"js\">\n        {`\n          var dateFields = [1970, 0, 1];  \n          var d = new Date(...dateFields); // 1 Jan 1970\n          \n          var parts = ['shoulders', 'knees'];\n          var lyrics = ['head', ...parts, 'and', 'toes']; // [\"head\", \"shoulders\", \"knees\", \"and\", \"toes\"]\n          \n          var obj1 = { foo: 'bar', x: 42 };\n          var clonedObj = { ...obj1 }; // Object { foo: \"bar\", x: 42 }\n        `}\n      </CodePane>\n    </Slide>\n\n    <Slide backgroundColor=\"#0d0d0d\" style={{ display: \"flex\" }}>\n      <Heading margin=\"0px\" fontSize=\"50px\">\n        Parámetros rest\n      </Heading>\n      <Text fontSize={30}>\n        Los{\" \"}\n        <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/rest_parameters\">\n          parámetros rest{\" \"}\n        </a>\n        nos permiten recibir un número indefinido de parámetros como un array.\n        La sintáxis es idéntica a la del <strong>operador spread.</strong>\n      </Text>\n      <CodePane language=\"js\">\n        {`\n          function sum(...theArgs) {\n            return theArgs.reduce((previous, current) => {\n              return previous + current;\n            });\n          }\n          \n          console.log(sum(1, 2, 3)); // expected output: 6\n          console.log(sum(1, 2, 3, 4)); // expected output: 10\n\n          function myFun(a, b, ...manyMoreArgs) {\n            console.log(\"a\", a);\n            console.log(\"b\", b);\n            console.log(\"manyMoreArgs\", manyMoreArgs); // ???\n          }\n          \n          myFun(\"one\", \"two\", \"three\", \"four\", \"five\", \"six\");\n        `}\n      </CodePane>\n    </Slide>\n  </>\n);\n","import React from \"react\";\nimport {\n  Slide,\n  Heading,\n  Text,\n  UnorderedList,\n  ListItem,\n  CodePane,\n  Notes,\n} from \"spectacle\";\n\nexport default () => (\n  <>\n    <Slide backgroundColor=\"#0d0d0d\">\n      <Heading margin=\"0px\" fontSize=\"50px\">\n        Sintáxis de desestructuración\n      </Heading>\n\n      <Text fontSize={30}>\n        En algunos casos puede resultarnos conveniente manipular propiedades de\n        un objeto o elementos de un arreglo en particular. La desestructuración\n        es una sintáxis especial que nos permite “desempaquetar” arreglos u\n        objetos en un conjunto de variables. Por ejemplo, cuando necesitamos\n        pasar propiedades o elementos específicos a una función.\n      </Text>\n\n      <UnorderedList fontSize={30}>\n        <ListItem>\n          Desestructuración de <strong>arreglos</strong>\n        </ListItem>\n        <ListItem>\n          Desestructuración de <strong>objetos</strong>\n        </ListItem>\n      </UnorderedList>\n    </Slide>\n\n    <Slide backgroundColor=\"#0d0d0d\" style={{ display: \"flex\" }}>\n      <Heading margin=\"0px\" fontSize=\"50px\">\n        Desestructuración de arreglos\n      </Heading>\n\n      <Text fontSize={30}>\n        La{\" \"}\n        <a href=\"https://javascript.info/destructuring-assignment#array-destructuring\">\n          desestructuración de arreglos\n        </a>{\" \"}\n        nos permite asignar a una o más variables elementos de un arreglo.\n        <UnorderedList fontSize={30}>\n          <ListItem>\n            Sirve con cualquier iterable del lado derecho de la asignación.\n          </ListItem>\n          <ListItem>Podemos ignorar elementos utilizando comas</ListItem>\n          <ListItem>Podemos intercambiar variables</ListItem>\n          <ListItem>\n            Podemos combinarlo para loopear con el método{\" \"}\n            <strong>.entries()</strong>\n          </ListItem>\n        </UnorderedList>\n      </Text>\n\n      <CodePane language=\"js\">\n        {`\n          // We have an array with the name and surname\n          let arr = [\"John\", \"Smith\"]\n          \n          // Destructuring assignment sets firstName = arr[0]\n          // and surname = arr[1]\n          let [firstName, surname] = arr;\n          \n          console.log(firstName); // John\n          console.log(surname);  // Smith\n        `}\n      </CodePane>\n\n      <Notes>\n        Cuando el arreglo contiene más elementos de los que esperamos del lado\n        izquierdo, podemos utilizar el operador spread para obtener los\n        elementos restantes en un arreglo.\n      </Notes>\n    </Slide>\n\n    <Slide backgroundColor=\"#0d0d0d\" style={{ display: \"flex\" }}>\n      <Heading margin=\"0px\" fontSize=\"50px\">\n        Desestructuración de arreglos\n      </Heading>\n\n      <CodePane language=\"js\">\n        {`\n          // Works with any iterable\n          let [a, b, c] = \"abc\"; // [\"a\", \"b\", \"c\"]\n\n          // We can use it to loop over keys and values with .entries()\n          let user = {\n            name: \"John\",\n            age: 30\n          };\n\n          for (let [key, value] of Object.entries(user)) {\n            console.log(key + value); // name:John, and then age:30\n          }\n\n          // Ignore elements using commas\n          let [article, , verb] = [\"The\", \"dog\", \"ran\", \"fast\"];\n\n          console.log(verb); // \"ran\"\n        `}\n      </CodePane>\n    </Slide>\n\n    <Slide backgroundColor=\"#0d0d0d\" style={{ display: \"flex\" }}>\n      <Heading margin=\"0px\" fontSize=\"50px\">\n        Desestructuración de objetos\n      </Heading>\n\n      <Text fontSize={30}>\n        La{\" \"}\n        <a href=\"https://javascript.info/destructuring-assignment#object-destructuring\">\n          desestructuración de objetos\n        </a>{\" \"}\n        nos permite desempaquetar propiedades de un objeto en una o más\n        variables. En este caso, utilizamos llaves <strong>{\"{  }\"}</strong>.\n      </Text>\n\n      <CodePane language=\"js\">\n        {`\n          let options = {\n            title: \"Menu\",\n            width: 100,\n            height: 200\n          };\n          \n          let {title, width, height} = options;\n          \n          console.log(title);  // \"Menu\"\n          console.log(width);  // 100\n          console.log(height); // 200\n\n          // We can overwrite the name of a property\n\n          let {width: w, height: h, title} = options;\n\n          console.log(w, h, title); // 100, 200, \"Menu\"\n\n          // For potentially missing properties, we can set default values using \"=\"\n          let options = {\n            title: \"Menu\"\n          };\n          \n          let {width = 100, height = 200, title} = options;\n          \n          alert(title);  // Menu\n          alert(width);  // 100\n          alert(height); // 200\n        `}\n      </CodePane>\n    </Slide>\n  </>\n);\n","import React from \"react\";\nimport {\n  Slide,\n  Heading,\n  Text,\n  UnorderedList,\n  ListItem,\n  CodePane,\n  Notes,\n} from \"spectacle\";\n\nexport default () => (\n  <>\n    <Slide backgroundColor=\"#0d0d0d\">\n      <Heading margin=\"0px\" fontSize=\"50px\">\n        Encadenamiento opcional\n      </Heading>\n\n      <Text fontSize={30}>\n        El operador de \n        <a href=\"https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Operators/Optional_chaining\">\n          encadenamiento opcional ?.\n        </a>\n        permite leer el valor de una propiedad o un conjunto de propiedades\n        anidadas de un objeto, sin tener que validar expresamente que cada\n        referencia en la “cadena” sea válida.\n      </Text>\n\n      <Text fontSize={30}>\n        Utilizando este operador si una referencia es casi-nula \n        <strong>(null o undefined)</strong> en lugar de causar un error, la\n        expresión hace una evaluación de circuito corto y retorna{\" \"}\n        <strong>undefined</strong>. Cuando se usa con llamadas a funciones,\n        devuelve undefined si la función dada no existe.\n        <Text fontSize={30}>\n          Su sintáxis dependiendo el tipo de dato es la siguiente:\n          <UnorderedList fontSize={30}>\n            <ListItem>obj?.prop</ListItem>\n            <ListItem>obj?.[expr]</ListItem>\n            <ListItem>arr?.[index]</ListItem>\n            <ListItem>func?.(args)</ListItem>\n          </UnorderedList>\n        </Text>\n      </Text>\n\n      <Notes>Conditional chaining fue introducido en ES2020.</Notes>\n    </Slide>\n\n    <Slide backgroundColor=\"#0d0d0d\" style={{ display: \"flex\" }}>\n      <Heading margin=\"0px\" fontSize=\"50px\">\n        Encadenamiento opcional\n      </Heading>\n\n      <CodePane language=\"js\">\n        {`\n          const adventurer = {\n            name: 'Alice',\n            cat: {\n              name: 'Dinah'\n            }\n          };\n          \n          const dogName = adventurer.dog?.name;\n          console.log(dogName); // expected output: undefined\n          \n          console.log(adventurer.someNonExistentMethod?.()); // expected output: undefined\n\n          let arr = [1, 2, 3, 4, 5];\n          console.log(arr?.[42]); // expected output: undefined\n        `}\n      </CodePane>\n    </Slide>\n  </>\n);\n","import React from \"react\";\nimport {\n  Slide,\n  Heading,\n  Text,\n  UnorderedList,\n  ListItem,\n  CodePane,\n  Notes,\n} from \"spectacle\";\n\nexport default () => (\n  <>\n    <Slide backgroundColor=\"#0d0d0d\">\n      <Heading margin=\"0px\" fontSize=\"50px\">\n        Módulos\n      </Heading>\n\n      <Text fontSize={30}>\n        Los programas escritos en JavaScript comenzaron siendo bastante pequeños\n        (tareas de scripting aisladas o adición de interactividad a páginas web)\n        por lo que generalmente no se necesitaban grandes scripts.\n      </Text>\n\n      <Text fontSize={30}>\n        El uso de JavaScript ha ido evolucionando, y ahora tenemos aplicaciones\n        completas que se ejecutan en navegadores utilizando librerías como\n        ReactJS o frameworks como Angular. Además, JS ahora se usa en otros\n        contextos (Node.js por ejemplo).\n      </Text>\n\n      <Text fontSize={30}>\n        En los últimos años se ha comenzado a pensar en proporcionar mecanismos\n        para dividir programas JavaScript en módulos separados que se puedan\n        importar cuando sea necesario. Hay una serie de librerías y sistemas que\n        permiten el uso de módulos, siendo una de las más adoptadas{\" \"}\n        <strong>CommonJS.</strong>\n      </Text>\n    </Slide>\n\n    <Slide backgroundColor=\"#0d0d0d\" style={{ display: \"flex\" }}>\n      <Heading margin=\"0px\" fontSize=\"50px\">\n        CommonJS\n      </Heading>\n\n      <Text fontSize={30}>\n        Es el sistema de módulos utilizado por defecto por{\" \"}\n        <strong>Node.js</strong> y consta de dos directivas:\n        <UnorderedList fontSize={30}>\n          <ListItem>\n            <strong>require()</strong>\n          </ListItem>\n          <ListItem>\n            <strong>module.exports</strong>\n          </ListItem>\n        </UnorderedList>\n      </Text>\n\n      <CodePane language=\"js\">\n        {`\n          const circle = require('./circle.js');\n          console.log(\"The area of a circle of radius 4 is \" + circle.area(4));\n          \n          const { PI } = Math;\n          \n          function area(r){\n            return PI * r ** 2;\n          } \n          \n          function circumference(r){\n            2 * PI * r;\n          }\n\n          module.exports = { area, circumference };\n        `}\n      </CodePane>\n    </Slide>\n\n    <Slide backgroundColor=\"#0d0d0d\">\n      <Heading margin=\"0px\" fontSize=\"50px\">\n        ES6 Modules\n      </Heading>\n\n      <Text fontSize={30}>\n        Sin embargo, con la llegada de ES6 se implementó un sistema de módulos\n        nativo al navegador que le permite al mismo optimizar la carga de\n        módulos sin tener que utilizar una librería.\n      </Text>\n\n      <Text fontSize={30}>\n        Ahora, las directivas utilizadas para importar y exportar funcionalidad\n        desde distintos módulos son las siguientes:\n        <UnorderedList fontSize={30}>\n          <ListItem>\n            <strong>import</strong>\n          </ListItem>\n          <ListItem>\n            <strong>export</strong>\n          </ListItem>\n        </UnorderedList>\n        <Text fontSize={30}>\n          La <strong>principal diferencia</strong> que existe entre CommonJS y\n          el sistema implementado en ES6 es que este último pre-parsea los\n          módulos para resolver las importaciones antes de que el código sea\n          ejecutado. Mientras que en CommonJS, los módulos cargan dependencias\n          bajo demanda en tiempo de ejecución.\n        </Text>\n      </Text>\n    </Slide>\n\n    <Slide backgroundColor=\"#0d0d0d\">\n      <Heading margin=\"0px\" fontSize=\"50px\">\n        ES6 Modules\n      </Heading>\n      <CodePane language=\"js\">\n        {`\n          //  lib/math.js\n          export function sum (x, y) { return x + y }\n          export const pi = 3.141593\n          \n          //  someApp.js\n          import * as math from \"lib/math\"\n          console.log(\"2π = \" + math.sum(math.pi, math.pi))\n          \n          //  otherApp.js\n          import { sum, pi } from \"lib/math\"\n          console.log(\"2π = \" + sum(pi, pi))\n        `}\n      </CodePane>\n\n      <Notes>Mencionar export default.</Notes>\n    </Slide>\n  </>\n);\n","import React from \"react\";\nimport {\n  Slide,\n  Heading,\n  Text,\n  UnorderedList,\n  ListItem,\n  CodePane,\n  Notes,\n} from \"spectacle\";\n\nexport default () => (\n  <>\n    <Slide backgroundColor=\"#0d0d0d\">\n      <Heading margin=\"0px\" fontSize=\"50px\">\n        Arrow functions\n      </Heading>\n      <Text fontSize={30}>\n        Una{\" \"}\n        <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions\">\n          arrow function\n        </a>{\" \"}\n        es una alternativa un poco más compacta a una{\" \"}\n        <strong>function expression</strong> tradicional, aunque tiene algunas\n        limitaciones y no puede utilizarse en todos los casos. Estas\n        limitaciones son principalmente las siguientes:{\" \"}\n        <UnorderedList fontSize={30}>\n          <ListItem>\n            No tienen sus propios enlaces a this o super y no se deben usar como\n            métodos dentro de un objeto o clase.\n          </ListItem>\n          <ListItem>\n            No son aptas para los métodos{\" \"}\n            <a href=\"https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Function/call\">\n              call\n            </a>\n            ,{\" \"}\n            <a href=\"https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Function/apply\">\n              apply\n            </a>{\" \"}\n            y{\" \"}\n            <a href=\"https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Function/bind\">\n              bind\n            </a>\n            , que se basan en establecer un alcance particular.\n          </ListItem>\n          <ListItem>No se pueden utilizar como constructor.</ListItem>\n        </UnorderedList>\n      </Text>\n\n      <Notes>\n        Existen otras limitaciones, como por ejemplo el uso de yield dentro de\n        su cuerpo, pero en las cuales todavía no vale la pena entrar en detalle.\n      </Notes>\n    </Slide>\n\n    <Slide backgroundColor=\"#0d0d0d\" style={{ display: \"flex\" }}>\n      <Heading margin=\"0px\" fontSize=\"50px\">\n        Arrow functions\n      </Heading>\n\n      <Text fontSize={30}>\n        La sintáxis de una <strong>arrow function</strong> es la siguiente:\n      </Text>\n\n      <CodePane language=\"js\">\n        {`\n          const functionName = (param1, param2) => {\n            return param1 * param2;\n          }\n\n          // Return statement is optional as long as there's not additional logic\n          const functionName = (param1, param2) => param1 * param2;\n\n          // A common use case is related with array methods such as .map()\n          const multipliedByTwo = [1, 2, 3].map((num) => num * 2);\n\n        `}\n      </CodePane>\n\n      <Text fontSize={30}>\n        Las arrow functions no bindean su propio this, si no que lo heredan de\n        su <strong>\"bloque padre\"</strong>, a lo que también nos referimos como\n        <strong>\"alcance léxico\"</strong>. En{\" \"}\n        <a href=\"https://www.codementor.io/@dariogarciamoya/understanding-this-in-javascript-with-arrow-functions-gcpjwfyuc\">\n          este artículo\n        </a>{\" \"}\n        se detalla en profundidad la diferencia en el binding de{\" \"}\n        <strong>this</strong> en arrow functions vs funciones normales.\n      </Text>\n\n      <Notes>Notar como en el segundo ejemplo se remueven las llaves.</Notes>\n    </Slide>\n\n    <Slide backgroundColor=\"#0d0d0d\" style={{ display: \"flex\" }}>\n      <Heading margin=\"0px\" fontSize=\"50px\">\n        Arrow functions\n      </Heading>\n\n      <CodePane language=\"js\">\n        {`\n          const myObject = {\n            myMethod: () => {\n              console.log(this);\n            }\n          };\n\n          myObject.myMethod() // this === window or global object\n\n          const myMethod = myObject.myMethod;\n          myMethod() // this === window or global object\n        `}\n      </CodePane>\n    </Slide>\n  </>\n);\n","import React from \"react\";\nimport {\n  Slide,\n  Heading,\n  Text,\n  UnorderedList,\n  ListItem,\n  CodePane,\n  Notes,\n} from \"spectacle\";\n\nexport default () => (\n  <>\n    <Slide backgroundColor=\"#0d0d0d\">\n      <Heading margin=\"0px\" fontSize=\"50px\">\n        Template literals\n      </Heading>\n      <Text fontSize={30}>\n        Los\n        <a href=\"\"> template literals</a> nos proveen una nueva forma de crear\n        strings con algunas características interesantes:{\" \"}\n        <UnorderedList fontSize={30}>\n          <ListItem>\n            Nos permiten tener un mayor control sobre la creación de strings\n            dinámicos.\n          </ListItem>\n          <ListItem>\n            Facilitan y hacen más legible la concatenación de strings.\n          </ListItem>\n          <ListItem>Nos permiten generar “Tagged Templates”</ListItem>\n        </UnorderedList>\n      </Text>\n\n      <Text fontSize={30}>\n        En vez de utilizar comillas simples o dobles, para definir un template\n        literal utilizamos <strong>comillas invertidas `</strong>.\n      </Text>\n\n      <CodePane language=\"js\">\n        {`\n          let example = \\`This is a new string\\`;\n        `}\n      </CodePane>\n    </Slide>\n\n    <Slide backgroundColor=\"#0d0d0d\" style={{ display: \"flex\" }}>\n      <Heading margin=\"0px\" fontSize=\"50px\">\n        Template literals\n      </Heading>\n\n      <Text fontSize={30}>\n        Dentro de un template literal podemos incluir “expresiones”. Una\n        expresión siempre retorna un valor, y en este contexto cada expresión\n        será evaluada y reemplazada por el valor correspondiente.\n      </Text>\n\n      <CodePane language=\"js\">\n        {`\n          let name = “John”; \n          let greeting = \\`Hey \\${name}! How are you doing?\\` // Hey John! How are you doing?\n\n          let num = 32;\n          \n          let result = \\`The number \\${num} is \\${ num % 2 === 0 ? \"even\" : \"odd\"}\\`; // The number 32 is even.\n        `}\n      </CodePane>\n    </Slide>\n\n    <Slide backgroundColor=\"#0d0d0d\" style={{ display: \"flex\" }}>\n      <Heading margin=\"0px\" fontSize=\"50px\">\n        Tagged templates\n      </Heading>\n\n      <Text fontSize={30}>\n        Los <a href=\"\">tagged templates</a> permiten parsear un template literal\n        con una función. El primer parámetro de la función contiene un array con\n        los strings y los parámetros restantes están asociados a las\n        expresiones. La <strong>tag function</strong> puede realizar cualquier\n        tipo de operación sobre estos parámetros y retornar el string procesado.\n      </Text>\n\n      <CodePane language=\"js\">\n        {`\n          let person = 'Mike';\n          let age = 28;\n          \n          function myTag(strings, personExp, ageExp) {\n            let str0 = strings[0]; // \"That \"\n            let str1 = strings[1]; // \" is a \"\n            let str2 = strings[2]; // \".\"\n          \n            let ageStr;\n            if (ageExp > 99){\n              ageStr = 'centenarian';\n            } else {\n              ageStr = 'youngster';\n            }\n          \n            // We can even return a string built using a template literal\n            return \\`\\${str0}\\${personExp}\\${str1}\\${ageStr}\\${str2}\\`;\n          }\n          \n          let output = myTag\\`That \\${ person } is a \\${ age }.\\`;\n          \n          console.log(output); // That Mike is a youngster\n        `}\n      </CodePane>\n    </Slide>\n  </>\n);\n","import React from \"react\";\nimport {\n  Slide,\n  Heading,\n  Text,\n  UnorderedList,\n  ListItem,\n  CodePane,\n  Notes,\n} from \"spectacle\";\n\nexport default () => (\n  <>\n    <Slide backgroundColor=\"#0d0d0d\">\n      <Heading margin=\"0px\" fontSize=\"50px\">\n        Clases\n      </Heading>\n      <Text fontSize={30}>\n        Las clases en JavaScript son una mejora sintáctica sobre la herencia\n        basada en prototipos. La sintáxis de las clases \n        <strong>\n          no introduce un nuevo modelo de herencia orientada a objetos\n        </strong>\n        . Las clases de JavaScript proveen una sintáxis mucho más clara y simple\n        para crear objetos y lidiar con la herencia.\n      </Text>\n\n      <CodePane language=\"js\">\n        {`\n          class Rectangle {\n            constructor(height, width) {\n              this.height = height;\n              this.width = width;\n            }\n          }\n        `}\n      </CodePane>\n\n      <Text fontSize={30}>\n        Para <strong>declarar una clase</strong> utilizamos la palabra clave\n        <i> class</i>.\n        <Text fontSize={30}>\n          Es importante notar que la declaración de clases no se ve afectada por\n          el hoisting en JS. Por lo tanto, si queremos hacer referencia a una\n          clase, esta debe haber sido declarada previamente en el código.\n        </Text>\n      </Text>\n    </Slide>\n\n    <Slide backgroundColor=\"#0d0d0d\">\n      <Heading margin=\"0px\" fontSize=\"50px\">\n        Expresiones de clases\n      </Heading>\n      <Text fontSize={30}>\n        También podemos definir clases utilizando{\" \"}\n        <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes#class_expressions\">\n          expresiones de clases\n        </a>\n        . Las expresiones de clase pueden ser anónimas o nombradas. El nombre\n        asignado a una clase definida con esta notación se encuentra disponible\n        al acceder a la propiedad name.\n      </Text>\n\n      <CodePane language=\"js\">\n        {`\n          // Anonymous\n          let Rectangle = class {\n            constructor(height, width) {\n              this.height = height;\n              this.width = width;\n            }\n          };\n          \n          console.log(Rectangle.name);\n          // output: \"Rectangle\"\n          \n          // Named\n          let Rectangle = class Rectangle2 {\n            constructor(height, width) {\n              this.height = height;\n              this.width = width;\n            }\n          };\n          console.log(Rectangle.name);\n          // output: \"Rectangle2\"\n        `}\n      </CodePane>\n\n      <Notes>\n        Las expresiones de clase tampoco son elevadas durante el proceso de\n        hoisting.\n      </Notes>\n    </Slide>\n\n    <Slide backgroundColor=\"#0d0d0d\" style={{ display: \"flex\" }}>\n      <Heading margin=\"0px\" fontSize=\"50px\">\n        Class body\n      </Heading>\n\n      <Text fontSize={30}>\n        El contenido de una clase es la parte que se encuentra entre llaves y es\n        aquí donde se definen los miembros de clase, como los métodos, variables\n        o constructores.\n      </Text>\n\n      <Text fontSize={30}>\n        El método <strong>constructor</strong> es un método especial para crear\n        e inicializar un objeto creado con una clase. Solo puede haber un método\n        especial con el nombre \"constructor\" en una clase.\n        <Text fontSize={30}>\n          Un constructor puede usar la palabra reservada super para llamar al\n          constructor de una superclase.\n        </Text>\n      </Text>\n\n      <Text fontSize={30}>\n        <i>\n          Dentro de un método de una clase <strong>this</strong> hace referencia\n          al objeto actual. Es decir, a la instancia de clase donde el método\n          fue invocado.\n        </i>\n      </Text>\n    </Slide>\n\n    <Slide backgroundColor=\"#0d0d0d\" style={{ display: \"flex\" }}>\n      <Heading margin=\"0px\" fontSize=\"50px\">\n        Métodos de instancia\n      </Heading>\n\n      <CodePane language=\"js\">\n        {`\n          class Rectangle {\n            constructor(height, width) {\n              this.height = height;\n              this.width = width;\n            }\n            // Getter\n            get area() {\n              return this.calcArea();\n            }\n\n            // Setter\n            set height(h) {\n              if (h > 0) {\n                this.height = h;\n              }\n            }\n\n            // Method\n            calcArea() {\n              return this.height * this.width;\n            }\n          }\n          \n          const square = new Rectangle(10, 10);\n          \n          console.log(square.area); // 100\n        `}\n      </CodePane>\n    </Slide>\n\n    <Slide backgroundColor=\"#0d0d0d\" style={{ display: \"flex\" }}>\n      <Heading margin=\"0px\" fontSize=\"50px\">\n        Getters and setters\n      </Heading>\n\n      <Text fontSize={30}>\n        Como vimos en el ejemplo anterior, se pueden definir métodos getters y\n        setters con las palabras claves <strong>get</strong> y{\" \"}\n        <strong>set</strong> respectivamente, seguidas del nombre de la variable\n        a la que afectan.\n      </Text>\n\n      <Text fontSize={30}>\n        El método setter correspondiente se ejecutará cuando se quiera asignar\n        un valor a una propiedad del objeto.\n      </Text>\n\n      <Text fontSize={30}>\n        Podemos definir{\" \"}\n        <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/Private_class_fields\">\n          variables y métodos privados\n        </a>{\" \"}\n        utilizando el prefijo <strong>#</strong>. Si se quiere acceder a un\n        método o variable privada desde fuera de la clase, se recibirá un\n        SyntaxError.\n      </Text>\n\n      <Notes>\n        Comentar que cuando se definen campos estáticos y privados la herencia\n        de clases se comporta de manera extraña, y hacer hincapié en ir al link\n        de la diapo.\n      </Notes>\n    </Slide>\n\n    <Slide backgroundColor=\"#0d0d0d\" style={{ display: \"flex\" }}>\n      <Heading margin=\"0px\" fontSize=\"50px\">\n        Métodos y variables estáticas\n      </Heading>\n\n      <Text fontSize={30}>\n        La palabra clave \n        <strong>\n          <i>static </i>\n        </strong>\n        define un método o variable estática para una clase. Los métodos y\n        variables estáticas son llamadas sin instanciar a la clase y no pueden\n        ser llamadas mediante una instancia de clase.\n        <Text fontSize={30}>\n          Se utilizan generalmente para crear funciones helpers o servicios.\n        </Text>\n      </Text>\n\n      <CodePane language=\"js\">\n        {`\n          class Point {\n            constructor(x, y) {\n              this.x = x;\n              this.y = y;\n            }\n          \n            static displayName = \"Point\";\n            static distance(a, b) {\n              const dx = a.x - b.x;\n              const dy = a.y - b.y;\n          \n              return Math.hypot(dx, dy);\n            }\n          }\n        `}\n      </CodePane>\n    </Slide>\n\n    <Slide backgroundColor=\"#0d0d0d\" style={{ display: \"flex\" }}>\n      <Heading margin=\"0px\" fontSize=\"50px\">\n        Herencia\n      </Heading>\n\n      <Text fontSize={30}>\n        Podemos utilizar la palabra clave <strong>extends</strong> para crear\n        subclases.\n      </Text>\n\n      <CodePane language=\"js\">\n        {`\n          class Animal {\n            constructor(name) {\n              this.name = name;\n            }\n          \n            speak() {\n              console.log(\\`\\${this.name} makes a noise.\\`);\n            }\n          }\n          \n          class Dog extends Animal {\n            constructor(name) {\n              super(name); // call the super class constructor and pass in the name parameter\n            }\n          \n            speak() {\n              console.log(\\`\\${this.name} barks.\\`);\n            }\n          }\n          \n          let d = new Dog('Mitzie');\n          d.speak(); // Mitzie barks.\n        `}\n      </CodePane>\n\n      <Notes>\n        Si la subclase define un constructor entonces debe primero invocar a\n        super() usando \"this\".\n      </Notes>\n    </Slide>\n  </>\n);\n","import React from \"react\";\nimport {\n  Slide,\n  Heading,\n  Text,\n  UnorderedList,\n  ListItem,\n  CodePane,\n  Notes,\n} from \"spectacle\";\n\nexport default () => (\n  <>\n    <Slide backgroundColor=\"#0d0d0d\">\n      <Heading margin=\"0px\" fontSize=\"50px\">\n        Modo estricto\n      </Heading>\n      <Text fontSize={30}>\n        Con ES5 llegó el{\" \"}\n        <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode\">\n          \"modo estricto\"\n        </a>{\" \"}\n        que permite elegir una <i>variante restringida</i> de JavaScript. Este\n        modo no es sólo un subconjunto si no que tiene intencionalmente\n        diferencias semánticas con el código normal.\n      </Text>\n\n      <Text fontSize={30}>\n        Los navegadores que no admiten el modo estricto ejecutarán el código con\n        un comportamiento diferente a los que sí lo soportan, por lo tanto no\n        confíes en el modo estricto sin antes hacer pruebas de sus\n        características más relevantes.\n      </Text>\n\n      <Text fontSize={30}>\n        Los modos estricto y no estricto pueden coexistir, por lo tanto el\n        código se puede transformar a modo estricto incrementalmente.\n      </Text>\n    </Slide>\n\n    <Slide backgroundColor=\"#0d0d0d\" style={{ display: \"flex\" }}>\n      <Heading margin=\"0px\" fontSize=\"50px\">\n        Modo estricto\n      </Heading>\n\n      <Text fontSize={30}>\n        El modo estricto tiene varios cambios en la semántica normal de\n        JavaScript:\n      </Text>\n\n      <UnorderedList fontSize={30}>\n        <ListItem>\n          Elimina algunos errores silenciosos de JavaScript cambiándolos para\n          que lancen errores.\n        </ListItem>\n        <ListItem>\n          Corrige errores que hacen difícil para los motores de JavaScript\n          realizar optimizaciones: a veces, el código en modo estricto puede\n          correr más rápido que un código idéntico pero no estricto.\n        </ListItem>\n        <ListItem>\n          Prohíbe cierta sintaxis que probablemente sea definida en futuras\n          versiones de ECMAScript.\n        </ListItem>\n      </UnorderedList>\n\n      <Text fontSize={30}>\n        La lista de cambios que genera el modo estricto es bastante larga y\n        puede encontrarse en detalle{\" \"}\n        <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode#changes_in_strict_mode\">\n          aquí\n        </a>\n        .\n      </Text>\n    </Slide>\n\n    <Slide backgroundColor=\"#0d0d0d\" style={{ display: \"flex\" }}>\n      <Heading margin=\"0px\" fontSize=\"50px\">\n        Modo estricto\n      </Heading>\n\n      <Text fontSize={30}>\n        Para activar el modo estricto en un script o función debemos escribir{\" \"}\n        <strong>\"use strict\"</strong> antes de definir cualquier otra expresión.\n      </Text>\n\n      <CodePane language=\"js\">\n        {`\n          function strict() {\n            // Function-level strict mode syntax\n            'use strict';\n\n            function nested() { return 'And so am I!'; }\n\n            return \"Hi!  I'm a strict mode function!  \" + nested();\n          }\n        `}\n      </CodePane>\n\n      <Text fontSize={30}>\n        Los módulos y las clases se encuentran por defecto definidas en modo\n        estricto.\n      </Text>\n    </Slide>\n  </>\n);\n","import React from \"react\";\nimport {\n  Slide,\n  Heading,\n  Text,\n  UnorderedList,\n  ListItem,\n  CodePane,\n  Notes,\n} from \"spectacle\";\n\nexport default () => (\n  <>\n    <Slide backgroundColor=\"#0d0d0d\">\n      <Heading margin=\"0px\" fontSize=\"50px\">\n        Colecciones\n      </Heading>\n      <Text fontSize={30}>\n        ES6 introdujo 2 nuevas estructuras de datos:\n        <UnorderedList fontSize={30}>\n          <ListItem>\n            <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map\">\n              Map\n            </a>\n            : es una colección de pares clave-valor.\n          </ListItem>\n          <ListItem>\n            <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set\">\n              Set\n            </a>\n            : es una estructura similar a un arreglo pero que no admite\n            elementos duplicados.\n          </ListItem>\n        </UnorderedList>\n      </Text>\n\n      <Text fontSize={30}>\n        Además, se definen dos variantes de cada una de estas:{\" \"}\n        <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap\">\n          WeakMap\n        </a>{\" \"}\n        y{\" \"}\n        <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WEakSet\">\n          WeakSet\n        </a>{\" \"}\n        que agregan algunas diferencias.\n      </Text>\n    </Slide>\n\n    <Slide backgroundColor=\"#0d0d0d\" style={{ display: \"flex\" }}>\n      <Heading margin=\"0px\" fontSize=\"50px\">\n        Map\n      </Heading>\n\n      <CodePane language=\"js\">\n        {`\n          // Create a new empty Map\n          let map = new Map(); \n          map.set('name','Tutorial Point'); \n          map.get('name'); // Tutorial point\n\n          // Get the amount of key-value pairs of map.\n          map.size; // 1\n\n          // Check if map has a given key.\n          map.has('age') // false\n        `}\n      </CodePane>\n\n      <CodePane language=\"js\">\n        {`\n          // We can also instantiate a Map with elements\n          let roles = new Map([ \n              ['r1', 'User'], \n              ['r2', 'Guest'], \n              ['r3', 'Admin'], \n          ]);  \n          console.log(roles.get('r2'))\n        `}\n      </CodePane>\n\n      <Notes>\n        Existen otros métodos en la interfaz de Map como clear() que pueden\n        verse en los links de la primer diapo.\n      </Notes>\n    </Slide>\n\n    <Slide backgroundColor=\"#0d0d0d\" style={{ display: \"flex\" }}>\n      <Heading margin=\"0px\" fontSize=\"50px\">\n        WeakMap\n      </Heading>\n\n      <Text fontSize={30}>\n        Un WeakMap es idéntico a un Map con algunas excepciones:\n        <UnorderedList fontSize={30}>\n          <ListItem>\n            Sus claves <strong>deben</strong> ser objetos.\n          </ListItem>\n          <ListItem>\n            Las claves de un WeakMap pueden ser recolectadas por el Garbage\n            Collector.\n          </ListItem>\n          <ListItem>\n            Un WeakMap no puede ser iterado o limpiado. Es decir, no se pueden\n            invocar los métodos <strong>forEach()</strong> ni{\" \"}\n            <strong>clear()</strong>\n          </ListItem>\n        </UnorderedList>\n      </Text>\n    </Slide>\n\n    <Slide backgroundColor=\"#0d0d0d\" style={{ display: \"flex\" }}>\n      <Heading margin=\"0px\" fontSize=\"50px\">\n        Set\n      </Heading>\n\n      <CodePane language=\"js\">\n        {`\n          let mySet = new Set();\n\n          mySet1.add(1) // Set [ 1 ]\n          mySet1.add(5) // Set [ 1, 5 ]\n          mySet1.add(5) // Set [ 1, 5 ]\n\n          mySet1.add('some text') // Set [ 1, 5, 'some text' ]\n\n          const o = {a: 1, b: 2}\n          mySet1.add(o)\n          \n          mySet1.add({a: 1, b: 2}) // o is referencing a different object, so this is okay\n\n          mySet1.delete(5) // removes 5 from the set\n\n          mySet1.size // 4, since we just removed one value\n\n          mySet1.clear() // Set []\n        `}\n      </CodePane>\n\n      <Notes>\n        Un WeakSet es identico a un Set solo que estos pueden contener\n        unicamente objetos, y estos objetos pueden ser removidos por el Garbage\n        Collector. Además, no pueden ser iterados ni limpiados.\n      </Notes>\n    </Slide>\n  </>\n);\n","import React from \"react\";\nimport { Slide, Heading, OrderedList, ListItem } from \"spectacle\";\n\nexport default () => (\n  <>\n    <Slide backgroundColor=\"#0d0d0d\" className=\"flex-center-column\">\n      <Heading margin=\"0px\" fontSize=\"50px\">\n        Agenda\n      </Heading>\n\n      <OrderedList fontSize={30}>\n        <ListItem>Introducción a ES6</ListItem>\n\n        <ListItem>Nuevos métodos de Array</ListItem>\n\n        <ListItem>Operador spread</ListItem>\n\n        <ListItem>Destructuring</ListItem>\n\n        <ListItem>Encadenamiento opcional</ListItem>\n\n        <ListItem>Módulos</ListItem>\n\n        <ListItem>Clases</ListItem>\n\n        <ListItem>Arrow functions</ListItem>\n\n        <ListItem>Template literals</ListItem>\n\n        <ListItem>Modo estricto</ListItem>\n\n        <ListItem>Nuevas estructuras de datos</ListItem>\n      </OrderedList>\n    </Slide>\n  </>\n);\n","import React from \"react\";\nimport { Slide, Heading, Text } from \"spectacle\";\n\nexport default () => (\n  <>\n    <Slide backgroundColor=\"#0d0d0d\" className=\"flex-center-column\">\n      <Heading margin=\"0px\" fontSize=\"50px\">\n        Práctica\n      </Heading>\n\n      <Text fontSize={50}>\n        <a href=\"https://codesandbox.io/s/clase-3-ejercicios-jcwep\">\n          Ejercicios\n        </a>\n      </Text>\n    </Slide>\n  </>\n);\n","import React from \"react\";\nimport \"../../styles/styles.css\";\nimport * as Slides from \"./slides\";\n\nexport default () => (\n  <>\n    <Slides.Agenda />\n\n    <Slides.ExecutionContext />\n\n    <Slides.BlockingCode />\n\n    <Slides.Promises />\n\n    <Slides.AsyncAwait />\n\n    <Slides.AJAX />\n  </>\n);\n","import React from 'react';\nimport {\n  Slide,\n  Heading,\n  OrderedList,\n  ListItem,\n} from 'spectacle';\n\nexport default () => (\n  <>\n    <Slide backgroundColor=\"#0d0d0d\" className=\"flex-center-column\">\n      <Heading margin=\"0px\" fontSize=\"50px\">\n        Agenda\n      </Heading>\n\n      <OrderedList>\n        <ListItem>\n          Contextos de ejecución\n        </ListItem>\n\n        <ListItem>\n          Código bloqueante y JS asincrónico\n        </ListItem>\n\n        <ListItem>\n          Promesas\n        </ListItem>\n\n        <ListItem>\n          Async/Await\n        </ListItem>\n\n        <ListItem>\n          AJAX\n        </ListItem>\n\n        <ListItem>\n          XMLHttpRequest (XHR)\n        </ListItem>\n\n        <ListItem>\n          Fetch API\n        </ListItem>\n\n        <ListItem>\n          FormData\n        </ListItem>\n\n        <ListItem>\n          Ejercicios\n        </ListItem>\n      </OrderedList>\n    </Slide>\n  </>\n);\n","import React from \"react\";\nimport { Slide, Heading, Text, UnorderedList, ListItem, OrderedList, Notes } from \"spectacle\";\n\nexport default () => (\n  <>\n    <Slide backgroundColor=\"#0d0d0d\">\n      <Heading margin=\"0px\" fontSize=\"50px\">\n        <a href=\"https://www.javascripttutorial.net/javascript-execution-context/\">Execution context</a>\n      </Heading>\n\n      <Text fontSize={30}>\n        Cuando el motor de JavaScript ejecuta un script, crea \"contextos de ejecución\". Podemos ver al contexto de ejecución como el entorno en el que JS es ejecutado.\n      </Text>\n\n      <UnorderedList fontSize={30}>\n        <ListItem>\n          Global execution context (GEC): Contexto de ejecución por defecto. Es creado cuando el archivo es cargado en el navegador. Todo el código que no se encuentra dentro de funciones u objetos se ejecuta en el GEC. Solo existe un GEC.\n        </ListItem>\n\n        <ListItem>\n          Functional execution context (FEC): Este contexto es creado por JS cada vez que encuentra una invocación a una función. Cada función tiene su propio FEC y además tiene acceso a todo el código definido en el GEC. Si el código es ejecutado en modo estricto, el valor de this es undefinded, sino es window.\n        </ListItem>\n\n        <ListItem>\n          Eval: Contexto de ejecución dentro de la función <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval\">eval</a>.\n        </ListItem>\n      </UnorderedList>\n\n      <Text fontSize={30}>\n        Cada contexto consta de 2 fases: creation phase y execution phase.\n      </Text>\n    </Slide>\n\n    <Slide backgroundColor=\"#0d0d0d\">\n      <Heading margin=\"0px\" fontSize=\"50px\">\n        Creation phase\n      </Heading>\n\n      <OrderedList fontSize={30}>\n        <ListItem>\n          Se crea el objeto global.\n          <UnorderedList fontSize={30}>\n            <ListItem>\n              En el caso del GEC, si se ejecuta en un navegador web se crea el objeto <b>window</b>, y si se ejecuta en Node se crea el objeto <b>global</b>. \n            </ListItem>\n\n            <ListItem>\n              En el caso del FEC, se crea el objeto arguments que contiene una referencia a todos los parámetros pasados a la función.\n            </ListItem>\n          </UnorderedList>\n        </ListItem>\n\n        <ListItem>\n          Se crea la asociación de <b>this</b> con el objeto global.\n          <UnorderedList fontSize={30}>\n            <ListItem>\n              En el caso del FEC, si se está ejecutando el script en modo estricto, el valor de this será undefined. Sino será el objeto global (window o global).\n            </ListItem>\n          </UnorderedList>\n        </ListItem>\n\n        <ListItem>\n          Se crea una heap en memoria para almacenar las variables y funciones.\n        </ListItem>\n\n        <ListItem>\n          Se almacenan las declaraciones de funciones y variables en la heap, con un valor inicial de undefined.\n        </ListItem>\n      </OrderedList>\n      \n      <Notes>\n        Cada vez que se crea un contexto de ejecución, antes de que el código se ejecute, el contexto pasa por esta fase.\n      </Notes>\n    </Slide>\n\n    <Slide backgroundColor=\"#0d0d0d\">\n      <Heading margin=\"0px\" fontSize=\"50px\">\n        Execution phase\n      </Heading>\n\n      <Text fontSize={30}>\n        Durante esta fase el motor de JS ejecuta el script línea por línea. Se asignan los valores a las variables y se ejecutan los llamados a funciones.\n      </Text>\n\n      <Text fontSize={30}>\n        Para monitorear los contextos de ejecución, JS usa una <a href=\"https://www.javascripttutorial.net/javascript-call-stack/\">call stack</a> (pila LIFO). Más info <a href=\"https://javascript.plainenglish.io/node-call-stack-explained-fd9df1c49d2e\">aquí</a>.\n      </Text>\n\n      <div className=\"align-center\">\n        <img\n          src={`${process.env.PUBLIC_URL}/images/call_stack.png`}\n          alt=\"Call Stack\"\n          height=\"75%\"\n          width=\"60%\"\n        />\n      </div>\n    </Slide>\n\n    <Slide backgroundColor=\"#0d0d0d\">\n      <Heading margin=\"0px\" fontSize=\"50px\">\n        This\n      </Heading>\n\n      <Text fontSize={30}>\n        Como vimos, el valor de this depende de muchas factores, entre ellos la forma en la que una funcion es invocada, si se utiliza modo estricto o no, arrow functions, clases, etc.\n      </Text>\n\n      <Text fontSize={30}>\n        En JS tenemos disponible tambien el objeto <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/globalThis\">globalThis</a>, el cual siempre apunta al objeto global, sin importar el contexto de ejecución.\n      </Text>\n\n      <Text fontSize={30}>\n        En <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this\"> este artículo</a> se detallan una gran variedad de escenarios distintos donde cambia también el valor asignado a this.\n      </Text>\n    </Slide>\n  </>\n);\n","import React from \"react\";\nimport { Slide, Heading, Text, CodePane } from \"spectacle\";\n\nexport default () => (\n  <>\n    <Slide backgroundColor=\"#0d0d0d\">\n      <Heading margin=\"0px\" fontSize=\"50px\">\n        Código bloqueante\n      </Heading>\n\n      <Text fontSize={30}>\n        <b><i>JavaScript is a single-threaded non-blocking asynchronous concurrent language</i></b>\n      </Text>\n\n      <Text fontSize={30}>\n        Podemos pensar en un thread (hilo) como un proceso que los programas utilizan para ejecutar tareas, y cada thread solo puede ejecutar una tarea a la vez. JavaScript ejecuta todo el código en un solo thread (<a href=\"https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Asynchronous/Concepts#javascript_is_single_threaded\">JavaScript is single-threaded</a>), llamado <b>main thread</b>.\n      </Text>\n\n      <Text fontSize={30}>\n        Todo lo que vimos hasta ahora es código sincrónico. Una sentencia se ejecuta una vez que la anterior finaliza.\n      </Text>\n\n      <Text fontSize={30}>\n        El código sincrónico nos impone algunas limitaciones cuando lo que debemos ejecutar es costoso, ya que JS no le devuelve el control al browser y éste puede parecer congelado, imposibilitando que maneje cualquier otra acción o tarea que el usuario solicite. A esto le llamamos código bloqueante.\n      </Text>\n    </Slide>\n\n    <Slide backgroundColor=\"#0d0d0d\">\n      <Heading margin=\"0px\" fontSize=\"50px\">\n        Código bloqueante\n      </Heading>\n\n      <CodePane language=\"js\">\n        {`\n          const result = document.querySelector(\"#result\");\n          const clickHandler = () => {\n            let fecha;\n            for (let i = 0; i < 20000000; i++) {\n              fecha = new Date();\n            }\n            result.value = result.value + fecha;\n          };\n\n          document.querySelector(\"#startBtn\").addEventListener(\"click\", clickHandler);\n        `}\n      </CodePane>\n\n      <iframe src={`${process.env.PUBLIC_URL}/snippets/class4/blockingCode.html`}></iframe>\n    </Slide>\n\n    <Slide backgroundColor=\"#0d0d0d\">\n      <Heading margin=\"0px\" fontSize=\"50px\">\n        Web Workers\n      </Heading>\n\n      <Text fontSize={30}>\n        Los <a href=\"https://github.com/JulianPasquale/Webpack-templating/commit/2192a8391ccdb897ee806412a513227810131135\">Web Workers</a> hacen posible la ejecución de código JS en background, en un thread separado del principal. De esta forma podemos ejecutar tareas laboriosas o costosas sin bloquear completamente el navegador.\n      </Text>\n\n      <Text fontSize={30}>\n        Podemos utilizar el constructor <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Worker/Worker\">Worker</a> para crear un worker a partir de un script. Además un worker puede invocar a otro worker.\n      </Text>\n\n      <Text fontSize={30}>\n        Los workers se comunican entre ellos y también con el main thread a través del pasaje de mensajes utilizando las directivas <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Worker/postMessage\">Worker.postMessage</a> y <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage\">Window.postMessage</a>\n      </Text>\n\n      <Text fontSize={30}>\n        Sin embargo los workers cuentan con algunas limitaciones, como la imposibilidad de manipular el DOM y de acceder a varios atributos y métodos de window. Además no nos proveen una forma de esperar por un resultado, lo que suele ser una complicación cuando alguna tarea depende de otra.\n      </Text>\n    </Slide>\n  </>\n);\n","import React from \"react\";\nimport { Slide, Heading, Text, CodePane, UnorderedList, ListItem, Notes } from \"spectacle\";\n\nexport default () => (\n  <>\n    <Slide backgroundColor=\"#0d0d0d\">\n      <Heading margin=\"0px\" fontSize=\"50px\">\n        Async JS\n      </Heading>\n\n      <Text fontSize={30}>\n        Para solucionar algunos de los problemas que trae el código bloqueante y también las limitaciones que presentan los workers, JavaScript nos permite la ejecución de código asincrónico.\n      </Text>\n\n      <Text fontSize={30}>\n        El código asincrónico se sigue ejecutando en el main thread, sin embargo, JavaScript maneja los eventos de manera tal que asegura la ejecución de una manera asincrónica sin bloquear al navegador.\n      </Text>\n\n      <Text fontSize={30}>\n        Para más información ver <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/EventLoop\">Event loop</a>. Existen además una gran cantidad de artículos y videos que hablan sobre el tema en profundidad, por ejemplo <a href=\"https://dev.to/upplabs/how-asynchronous-works-in-javascript-event-loop-concept-1ddb\">este</a> y <a href=\"https://www.youtube.com/watch?v=8aGhZQkoFbQ\">este</a>.\n      </Text>\n    </Slide>\n\n    <Slide backgroundColor=\"#0d0d0d\">\n      <Heading margin=\"0px\" fontSize=\"50px\">\n        Promesas\n      </Heading>\n\n      <Text fontSize={30}>\n        Una <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\">Promesa</a> es un objeto que representa la eventual finalización o falla de una operación asincrónica.\n      </Text>\n\n      <Text fontSize={30}>\n        Una promesa puede estar en cualquiera de estos estados.\n      </Text>\n\n      <UnorderedList fontSize={30}>\n        <ListItem>\n          pending: Estado inicial.\n        </ListItem>\n        <ListItem>\n          fulfilled: La operación fue completada satisfactoriamente.\n        </ListItem>\n        <ListItem>\n          rejected: La operación falló.\n        </ListItem>\n      </UnorderedList>      \n    </Slide>\n\n    <Slide backgroundColor=\"#0d0d0d\">\n      <Heading margin=\"0px\" fontSize=\"50px\">\n        Promesas\n      </Heading>\n\n      <Text fontSize={30}>\n        Las promesas cuentan con una serie de métodos de instancia que nos permiten ejecutar funciones ante cada cambio de estado.\n      </Text>\n\n      <Text fontSize={30}>\n        Estos métodos reciben funciones callback y siempre retornan una nueva promesa.\n      </Text>\n\n      <UnorderedList fontSize={30}>\n        <ListItem>\n          <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/then\">then</a>\n        </ListItem>\n        <ListItem>\n          <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/catch\">catch</a>\n        </ListItem>\n        <ListItem>\n          <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/finally\">finally</a>\n        </ListItem>\n      </UnorderedList>\n\n      <CodePane language=\"js\">\n        {` promesa.then(successCallback).catch(errorCallback).finally(finalCallback); `}\n      </CodePane>\n\n      <Notes>\n        La función then recibe 2 callbacks. El primer argumento es el callback de éxito que será llamado cuando la promesa esté en estado fulfilled, y el segundo es el callback de error que será llamado cuando la promesa pase a estado rejected. La implementación del catch no es más que un then sin el primer argumento.\n      </Notes>\n    </Slide>\n\n    <Slide backgroundColor=\"#0d0d0d\">\n      <Heading margin=\"0px\" fontSize=\"50px\">\n        Promesas\n      </Heading>\n\n      <img src={`${process.env.PUBLIC_URL}/images/promise_flow.png`} alt=\"Promise flow\" height=\"60%\"/>\n    </Slide>\n\n    <Slide backgroundColor=\"#0d0d0d\">\n      <Heading margin=\"0px\" fontSize=\"50px\">\n        Encadenamiento de promesas\n      </Heading>\n\n      <Text fontSize={30}>\n        En algunos casos es necesario ejecutar dos o más operaciones asincrónicas de manera consecutiva. Debido a que los métodos que tenemos disponibles para trabajar con promesas, siempre devuelven una nueva promesa, es posible encadenar métodos que permitan trabajar con la promesa resultante y utilizar el resultado de la operación anterior.\n      </Text>\n\n      <Text fontSize={30}>\n        Es importante descatar que los callbacks serán ejecutados en el orden en el que fueron provistos.\n      </Text>\n\n      <CodePane language=\"js\">\n        {`\n          doSomething()\n          .then(result => doSomethingElse(result))\n          .then(newResult => doThirdThing(newResult))\n          .then(finalResult => {\n            console.log(\\`Got the final result: \\${finalResult}\\`);\n          })\n          .catch(failureCallback);\n        `}\n      </CodePane>\n\n      <Text fontSize={30}>\n        En caso de que alguna de las promesas de la cadena pase al estado rejected, se ejecutará el callback de failure asociado mediante la función <b>catch</b>.\n      </Text>\n\n      <Notes>\n        Este modelo de manejo de errores imita a lo que sucede con los bloques try-catch en el código sincrónico convencional, donde si se dispara una excepción dentro del bloque try, se ejecutará el código del bloque catch.\n      </Notes>\n    </Slide>\n\n    <Slide backgroundColor=\"#0d0d0d\">\n      <Heading margin=\"0px\" fontSize=\"50px\">\n        Creación de promesas\n      </Heading>\n\n      <Text fontSize={30}>\n        Podemos utilizar el <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/Promise\">constructor</a> para crear promesas.\n      </Text>\n\n      <CodePane language=\"js\">\n        {`\n          const myPromise = new Promise((resolve, reject) => {\n            setTimeout(() => {\n              resolve('foo');\n            }, 300);\n          });       \n        `}\n      </CodePane>\n\n      <Text fontSize={30}>\n        Si nuestra promesa siempre será resuelta de manera exitosa, podemos utilizar <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/resolve\">Promise.resolve(value)</a> para crear una nueva promesa que al resolverse retornará <b>value</b>.\n      </Text>\n\n      <Text fontSize={30}>\n        Si nuestra promesa siempre será resuelta de manera erronea, podemos utilizar <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/reject\">Promise.reject(reason)</a> para crear una nueva promesa que fallará con la razón <b>reason</b>.\n      </Text>\n    </Slide>\n\n    <Slide backgroundColor=\"#0d0d0d\">\n      <Heading margin=\"0px\" fontSize=\"50px\">\n        Promise API\n      </Heading>\n\n      <Text fontSize={30}>\n        Además, la Promise API cuenta con algunos métodos que pueden ser útiles cuando tenemos un conjunto de promesas que debemos procesar.\n      </Text>\n\n      <UnorderedList fontSize={30}>\n        <ListItem>\n          <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/all\">Promise.all</a>: Espera a que todas las promesas sean resueltas o que alguna falle.\n        </ListItem>\n        <ListItem>\n          <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/allSettled\">Promise.allSettled</a>: Espere hasta que todas las promesas se hayan resuelto (cada una puede resolverse o rechazar).\n        </ListItem>\n        <ListItem>\n          <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/any\">Promise.any</a>: Espera a que una de las promesas sea resuelta.\n        </ListItem>\n        <ListItem>\n          <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/race\">Promise.race</a>: Espera a que una de las promesas sea resuelta o falle.\n        </ListItem>\n      </UnorderedList>\n    </Slide>\n  </>\n);\n","import React from \"react\";\nimport { Slide, Heading, Text, CodePane, Notes } from \"spectacle\";\n\nexport default () => (\n  <>\n    <Slide backgroundColor=\"#0d0d0d\">\n      <Heading margin=\"0px\" fontSize=\"50px\">\n        Async/Await\n      </Heading>\n\n      <Text fontSize={30}>\n        Async/Await es un sugar syntax agregado en ECMAScript 2017 que funciona con promesas y hace más fácil leer y escribir código asincrónico.\n      </Text>\n\n      <Text fontSize={30}>\n        La palabra clave <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function\">async</a> permite declarar funciones asincrónicas. Estas funciones al ser invocadas retornan una promesa.\n      </Text>\n\n      <Text fontSize={30}>\n        La palabra clave <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/await\">await</a> es utilizada para esperar por promesas y solo puede ser utilizada dentro de una función asincrónica. Hace que la ejecución del código asincrónico se detenga hasta que la promesa tenga un estado fulfilled. Si la promesa pasa a estado rejected, se lanzará un error con la razón del fallo.\n      </Text>\n\n      <Notes>\n        Si la expresión que sigue a la palabra clave await no es una promesa, se convierte a resolved Promise (Promise.resolve(expression)).\n      </Notes>\n    </Slide>\n\n    <Slide backgroundColor=\"#0d0d0d\">\n      <Heading margin=\"0px\" fontSize=\"50px\">\n        Async/Await\n      </Heading>\n\n      <CodePane language=\"js\">\n        {`\n          function resolveAfter2Seconds(x) {\n            return new Promise(resolve => {\n              setTimeout(() => {\n                resolve(x);\n              }, 2000);\n            });\n          }\n\n          async function main() {\n            const result = await resolveAfter2Seconds(10);\n            console.log(result); // 10\n          }\n\n          main();\n        `}\n      </CodePane>\n    </Slide>\n\n    <Slide backgroundColor=\"#0d0d0d\">\n      <Heading margin=\"0px\" fontSize=\"50px\">\n        Async/Await\n      </Heading>\n\n      <Text fontSize={30}>\n        A diferencia de los métodos convencionales <b>then</b> y <b>catch</b>, no existe un mecanismo particular para el manejo de errores (promesas en estado rejected). Para ese tipo de casos debemos utilizar un bloque try-catch como lo haríamos con código sincrónico.\n      </Text>\n\n      <CodePane language=\"js\">\n        {`\n          async function main() {\n            try {\n              const result = await Promise.reject(30);\n            } catch(e) {\n              console.error(e); // 30\n            }\n          }\n\n          main();\n        `}\n      </CodePane>\n    </Slide>\n  </>\n);\n","import React from \"react\";\nimport { Slide, Heading, Text, CodePane, Notes } from \"spectacle\";\n\nexport default () => (\n  <>\n    <Slide backgroundColor=\"#0d0d0d\">\n      <Heading margin=\"0px\" fontSize=\"50px\">\n        AJAX\n      </Heading>\n\n      <Text fontSize={30}>\n        <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/AJAX\">AJAX</a> es una técnica de programación que permite actualizar partes de un documento HTML sin la necesidad de refrescar la página completa.\n      </Text>\n\n      <Text fontSize={30}>\n        Permite trabajar asincrónicamente, es decir, el código continua ejecutandose mientras que una parte del documento es actualizada.\n      </Text>\n\n      <Text fontSize={30}>\n        Inicialmente AJAX era un acrónimo para Asynchronous JavaScript And XML.\n      </Text>\n\n      <Text fontSize={30}>\n        Para construir sitios complejos que requerían el uso de esta técnica se utilizaba <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/XHR_(XMLHttpRequest)\">XHR</a>, sin embargo esta API no es tan utilizada actualmente.\n      </Text>\n    </Slide>\n  </>\n);\n","export { default as Introduction } from \"./Introduction\";\nexport { default as ArrayMethods } from \"./ArrayMethods\";\nexport { default as RestSpread } from \"./RestSpread\";\nexport { default as Destructuring } from \"./Destructuring\";\nexport { default as ConditionalChaining } from \"./ConditionalChaining\";\nexport { default as Modules } from \"./Modules\";\nexport { default as ArrowFunctions } from \"./ArrowFunctions\";\nexport { default as TemplateLiterals } from \"./TemplateLiterals\";\nexport { default as Classes } from \"./Classes\";\nexport { default as StrictMode } from \"./StrictMode\";\nexport { default as NewDataStructures } from \"./NewDataStructures\";\nexport { default as Agenda } from \"./Agenda\";\nexport { default as Excercises } from \"./Excercises\";\n"],"sourceRoot":""}