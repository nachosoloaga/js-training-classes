(this["webpackJsonpspectacle-presentation"]=this["webpackJsonpspectacle-presentation"]||[]).push([[0],{121:function(e,n,s){"use strict";s.r(n);s(2);var a=s(1),r=(s(122),s(0));n.default=function(){return Object(r.jsxs)(r.Fragment,{children:[Object(r.jsxs)(a.o,{className:"flex-center-column",children:[Object(r.jsx)(a.g,{margin:"0px",className:"font-size-heading",children:Object(r.jsx)("i",{children:"Agenda"})}),Object(r.jsx)(a.l,{children:Object(r.jsxs)(a.f,{gridTemplateColumns:"1fr 1fr",gridColumnGap:15,className:"font-size-medium",children:[Object(r.jsx)(a.j,{children:"Surgimiento de JS"}),Object(r.jsx)(a.j,{children:"Caracter\xedsticas"}),Object(r.jsx)(a.j,{children:"\xbfQu\xe9 es ECMAScript?"}),Object(r.jsx)(a.j,{children:"Sintaxis b\xe1sica"}),Object(r.jsx)(a.j,{children:"Variables - var, let, const"}),Object(r.jsx)(a.j,{children:"Tipos de datos"}),Object(r.jsx)(a.j,{children:"Operadores l\xf3gicos"}),Object(r.jsx)(a.j,{children:"Estructuras de control"}),Object(r.jsx)(a.j,{children:"Excepciones"}),Object(r.jsx)(a.j,{children:"Funciones"}),Object(r.jsx)(a.j,{children:"Window API"}),Object(r.jsx)(a.j,{children:"Debugging"})]})})]}),Object(r.jsxs)(a.o,{children:[Object(r.jsx)(a.g,{margin:"0px",padding:"0px",className:"font-size-heading",children:Object(r.jsx)("i",{children:"Javascript"})}),Object(r.jsxs)(a.t,{className:"font-size-medium",children:['JavaScript fue creado inicialmente con un \xfanico prop\xf3sito, "traer vida a las p\xe1ginas web" - ',Object(r.jsx)("i",{children:"make web pages alive"}),". Hoy en d\xeda se utiliza en muchos otros entornos tambi\xe9n."]}),Object(r.jsx)(a.t,{className:"font-size-medium",children:"Fue desarrollado originalmente por Brendan Eich de Netscape con el nombre de Mocha, el cual fue renombrado posteriormente a LiveScript, para finalmente quedar como JavaScript. Este \xfaltimo cambio de nombre se realiz\xf3 en diciembre de 1995."})]}),Object(r.jsxs)(a.o,{children:[Object(r.jsx)(a.g,{margin:"0px",padding:"0px",className:"font-size-heading",children:Object(r.jsx)("i",{children:"Javascript"})}),Object(r.jsx)(a.t,{className:"font-size-medium",children:"Los programas escritos en JavaScript son llamados scripts y no necesitan de ning\xfan tipo de procesamiento especial o compilaci\xf3n para ser ejecutados. De hecho, pueden ser escritos directamente en el c\xf3digo HTML de una p\xe1gina web y se ejecutar\xe1 cuando \xe9sta sea cargada."}),Object(r.jsx)(a.t,{className:"font-size-medium",children:"Se define como orientado a objetos, basado en prototipos, imperativo, d\xe9bilmente tipado y din\xe1mico."})]}),Object(r.jsxs)(a.o,{children:[Object(r.jsx)(a.g,{margin:"0px",padding:"0px",className:"font-size-heading",children:Object(r.jsx)("i",{children:"Javascript"})}),Object(r.jsx)(a.t,{className:"font-size-medium",children:"Podemos destacar varias cosas \xfanicas del lenguaje"}),Object(r.jsxs)(a.u,{className:"font-size-medium",children:[Object(r.jsx)(a.j,{children:"Es el lenguaje con integraci\xf3n completa con HTML y CSS m\xe1s adoptado de la web."}),Object(r.jsx)(a.j,{children:"Simple de usar."}),Object(r.jsx)(a.j,{children:"Muy utilizado en la industria y actualmente en toda la web."}),Object(r.jsx)(a.j,{children:'En la actualidad existen muchos lenguajes construidos que se "transpilan" luego a JS y extienden o proveen nuevas funcionalidades.'}),Object(r.jsx)(a.j,{children:"Es un lenguaje multi-paradigma."}),Object(r.jsx)(a.j,{children:"Existe una gran variedad de frameworks JS, tanto Frontend como Backend."})]})]}),Object(r.jsxs)(a.o,{children:[Object(r.jsx)(a.g,{margin:"0px",padding:"0px",className:"font-size-heading",children:Object(r.jsx)("i",{children:"ECMAScript"})}),Object(r.jsxs)(a.t,{className:"font-size-medium",children:[Object(r.jsx)("a",{className:"link",href:"https://en.wikipedia.org/wiki/ECMAScript",children:"ECMAScript"})," es un est\xe1ndar que define un lenguaje de tipos din\xe1micos ligeramente inspirado en Java y otros lenguajes del estilo de C. Soporta algunas caracter\xedsticas de la programaci\xf3n orientada a objetos mediante objetos basados en prototipos y pseudoclases."]}),Object(r.jsx)(a.t,{className:"font-size-medium",children:"El objetivo de este estandar es asegurar la interoperabilidad de las p\xe1ginas web entre diferentes navegadores web."}),Object(r.jsx)(a.t,{className:"font-size-medium",children:"JavaScript es un lenguaje de programaci\xf3n que implementa este estandar - ECMAScript est\xe1 basado en JavaScript."})]}),Object(r.jsxs)(a.o,{children:[Object(r.jsx)(a.g,{margin:"0px",className:"font-size-heading",children:"Variables"}),Object(r.jsx)(a.t,{className:"font-size-medium",children:"Las variables son contenedores que nos permiten almacenar valores para su posterior uso y/o manipulaci\xf3n."}),Object(r.jsxs)(a.t,{className:"font-size-medium",children:["Para declarar una variable podemos utilizar la palabra clave ",Object(r.jsx)("a",{className:"link",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let",children:Object(r.jsx)("b",{children:"let"})}),"."]}),Object(r.jsx)(a.b,{language:"js",children:"\n          let myVariable;\n          // Initialize with an initial value\n          let myVariable = 'Hola Snapplerxs!';\n        "})]}),Object(r.jsxs)(a.o,{children:[Object(r.jsx)(a.g,{margin:"0px",className:"font-size-heading",children:"Variables"}),Object(r.jsx)(a.t,{className:"font-size-medium",children:"JavaScript es un lenguaje din\xe1mico y de tipado flexible. En parte esto significa que las variables no est\xe1n asociadas directamente con ning\xfan tipo de valor en particular y se les pueden asignar o reasignar valores de todos los tipos."}),Object(r.jsx)(a.b,{language:"js",children:"\n          let foo = 42; // foo is a number\n          foo = 'bar';  // foo is a string\n          foo = true;   // foo is a boolean\n\n          // Uncaught SyntaxError: Identifier 'foo' has already been declared\n          let foo = 10;\n        "})]}),Object(r.jsxs)(a.o,{children:[Object(r.jsx)(a.g,{margin:"0px",className:"font-size-heading",children:"Variables"}),Object(r.jsxs)(a.t,{className:"font-size-medium",children:["Para definir variables tambi\xe9n podemos utilizar la palabra clave ",Object(r.jsx)("b",{children:"var"}),"."]}),Object(r.jsxs)(a.t,{className:"font-size-medium",children:[Object(r.jsx)("b",{children:"var"})," se comporta distinto a ",Object(r.jsx)("b",{children:"let"})," y su uso actualmente no es muy recomendado. Explicaremos las razones m\xe1s adelante."]}),Object(r.jsx)(a.b,{language:"js",children:"\n          var foo = 42; // foo is a number\n        "})]}),Object(r.jsxs)(a.o,{children:[Object(r.jsx)(a.g,{margin:"0px",className:"font-size-heading",children:"Constantes"}),Object(r.jsx)(a.t,{className:"font-size-medium",children:"A diferencia de las variables, las constantes no pueden cambiar su valor posteriormente. Se debe especificar el valor al momento de su declaraci\xf3n."}),Object(r.jsxs)(a.t,{className:"font-size-medium",children:["Para definir una constante, usamos la palabra clave ",Object(r.jsx)("a",{className:"link",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const",children:"const"}),"."]}),Object(r.jsx)(a.b,{language:"js",children:"\n          const FOO = \"bar\";\n\n          // this will throw an error - Uncaught TypeError: Assignment to constant variable.\n          FOO = 20;\n\n          // trying to redeclare a constant throws an error\n          // Uncaught SyntaxError: Identifier 'FOO' has already been declared\n          const FOO = 20;\n        "}),Object(r.jsx)(a.k,{children:"Las constantes pueden ser declaradas con may\xfasculas o min\xfasculas, pero generalmente se definen con todas sus letras en may\xfascula a modo de convenci\xf3n."})]}),Object(r.jsxs)(a.o,{children:[Object(r.jsx)(a.g,{margin:"0px",padding:"0px",className:"font-size-heading",children:"Comentarios"}),Object(r.jsx)(a.t,{children:"En JavaScript, al igual que en todos los lenguajes, tenemos la posibilidad de agregar comentarios en nuestro c\xf3digo."}),Object(r.jsx)(a.t,{children:"Podemos agregar comentarios single line o multi line."}),Object(r.jsx)(a.b,{language:"js",children:"\n          // This is a single line comment.\n\n          /*\n          You can use this kind of comments\n          for documentation or to explain\n          any complex sentence.\n          */\n        "})]}),Object(r.jsxs)(a.o,{children:[Object(r.jsx)(a.g,{margin:"0px",className:"font-size-heading",children:"Valores y estructuras de datos"}),Object(r.jsx)(a.t,{className:"font-size-medium",children:"Todos los lenguajes de programaci\xf3n tienen estructuras de datos integradas."}),Object(r.jsx)(a.t,{className:"font-size-medium",children:"Generalmente var\xedan sus nombres o formas de utilizaci\xf3n de un lenguaje a otro."})]}),Object(r.jsxs)(a.o,{children:[Object(r.jsx)(a.g,{margin:"0px",className:"font-size-heading",children:"Tipos de datos primitivos"}),Object(r.jsxs)(a.t,{className:"font-size-medium align-center",margin:"0px",padding:"0px",children:["JavaScript cuenta con un conjunto de tipos que son llamados ",Object(r.jsx)("a",{className:"link",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#primitive_values",children:"tipos primitivos"}),". Estos tipos definen valores que son inmutables."]}),Object(r.jsxs)(a.u,{className:"flex-center-column font-size-medium",children:[Object(r.jsx)(a.j,{children:Object(r.jsx)("a",{className:"link",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",children:"Undefined"})}),Object(r.jsx)(a.j,{children:Object(r.jsx)("a",{className:"link",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",children:"Boolean"})}),Object(r.jsx)(a.j,{children:Object(r.jsx)("a",{className:"link",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",children:"Number"})}),Object(r.jsx)(a.j,{children:Object(r.jsx)("a",{className:"link",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",children:"String"})}),Object(r.jsx)(a.j,{children:Object(r.jsx)("a",{className:"link",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt",children:"BigInt"})}),Object(r.jsx)(a.j,{children:Object(r.jsx)("a",{className:"link",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/symbol",children:"Symbol"})})]})]}),Object(r.jsxs)(a.o,{children:[Object(r.jsx)(a.g,{margin:"0px",className:"font-size-heading",children:"Undefined"}),Object(r.jsxs)(a.t,{className:"font-size-medium align-center",children:[Object(r.jsx)("b",{children:"undefined"})," es una variable global que posee como valor inicial el tipo primitivo undefined."]}),Object(r.jsxs)(a.u,{className:"font-size-medium",children:[Object(r.jsx)(a.j,{children:"Una variable que no tiene un valor asignado, es creada con el valor undefined."}),Object(r.jsx)(a.j,{children:"Una funci\xf3n que no posee una sentencia return, devuelve undefined."})]}),Object(r.jsx)(a.b,{language:"js",children:'\n          let foo;\n\n          console.log(foo); // undefined\n          typeof foo // "undefined"\n        '})]}),Object(r.jsxs)(a.o,{children:[Object(r.jsx)(a.g,{margin:"0px",className:"font-size-heading align-center",style:{width:"80%"},children:"Null"}),Object(r.jsxs)("div",{style:{width:"80%"},children:[Object(r.jsx)(a.t,{className:"font-size-medium",children:"Este valor se utiliza para representar la no existencia o invalidez de algo, generalmente de manera intencional."}),Object(r.jsxs)(a.d,{justifyContent:"space-between",style:{width:"80%"},children:[Object(r.jsx)(a.b,{language:"js",children:"\n              const foo = null;\n\n              console.log(foo); // null\n              typeof foo // ?\n            "}),Object(r.jsx)("iframe",{src:"snippets/class1/null.html"})]})]})]}),Object(r.jsxs)(a.o,{backgroundColor:"#ffd84d",children:[Object(r.jsx)(a.g,{margin:"0px",fontSize:"50px",children:"Null vs Undefined"}),Object(r.jsxs)(a.t,{children:["Null y undefined son dos tipos primitivos diferentes y no existe un comportamiento intuitivo cuando estos tipos se comparan con otros. Para m\xe1s info ver este ",Object(r.jsx)("a",{href:"https://javascript.info/comparison#comparison-with-null-and-undefined",children:"link"}),"."]}),Object(r.jsx)(a.t,{children:"Generalmente el valor null es algo que se utiliza de manera intencional para indicar la no existencia de algo, mientras que undefined no suele usarse tanto de manera intencional, y representa que una variable fue declarada pero a\xfan no tiene un valor definido."}),Object(r.jsx)(a.b,{language:"js",children:"\n          const logHi = (str = 'hi') => console.log(str);\n        "}),Object(r.jsx)(a.k,{children:"logHi(undefined); // imprime hi logHi(null); // imprime null"})]}),Object(r.jsxs)(a.o,{backgroundColor:"#ffd84d",children:[Object(r.jsx)(a.g,{margin:"0px",fontSize:"50px",children:"Boolean"}),Object(r.jsxs)(a.t,{children:["Representa una entidad l\xf3gica que solo puede tomar los valores ",Object(r.jsx)("b",{children:"true"})," o ",Object(r.jsx)("b",{children:"false"}),"."]}),Object(r.jsx)(a.t,{children:"Podemos usar la funci\xf3n Boolean para convertir cualquier elemento a boolean."}),Object(r.jsxs)(a.t,{children:['Si el valor es omitido o es 0, -0, null, false, NaN, undefined, o un String vac\xedo (""), el objeto tendr\xe1 un valor inicial ',Object(r.jsx)("b",{children:"false"}),"."]}),Object(r.jsxs)(a.t,{children:['El resto de los valores, incluyendo Arrays vac\xedos y el String "false", crean un objeto con un valor inicial de ',Object(r.jsx)("b",{children:"true"}),"."]})]}),Object(r.jsx)(a.o,{children:Object(r.jsxs)("div",{style:{width:"80%"},children:[Object(r.jsx)(a.g,{margin:"0px",className:"font-size-heading",children:"Boolean"}),Object(r.jsxs)(a.f,{gridTemplateRows:"1fr 1fr",gridRowGap:50,children:[Object(r.jsxs)(a.d,{justifyContent:"space-between",style:{width:"80%"},children:[Object(r.jsx)(a.b,{language:"js",children:'\n                const bool = true;\n                \n                if (bool) {\n                  console.log("Hola Snapplerxs!");\n                };\n                '}),Object(r.jsx)("iframe",{src:"snippets/class1/boolean1.html"})]}),Object(r.jsxs)(a.d,{justifyContent:"space-between",style:{width:"80%"},children:[Object(r.jsx)(a.b,{language:"js",children:'\n                const bool = false;\n\n                if (bool) {\n                  console.log("Hola Snapplerxs!");\n                };\n                '}),Object(r.jsx)("iframe",{src:"snippets/class1/boolean2.html"})]})]})]})}),Object(r.jsxs)(a.o,{children:[Object(r.jsxs)("div",{style:{width:"80%"},children:[Object(r.jsx)(a.g,{margin:"0px",className:"font-size-heading",children:"Boolean"}),Object(r.jsxs)(a.f,{gridTemplateRows:"1fr 1fr",gridRowGap:50,children:[Object(r.jsxs)(a.d,{justifyContent:"space-between",style:{width:"80%"},children:[Object(r.jsx)(a.b,{language:"js",children:'\n                const bool = Boolean(false);\n\n                if (bool) {\n                  console.log("Hola Snapplerxs!");\n                };\n                '}),Object(r.jsx)("iframe",{src:"snippets/class1/boolean3.html"})]}),Object(r.jsxs)(a.d,{justifyContent:"space-between",style:{width:"80%"},children:[Object(r.jsx)(a.b,{language:"js",children:'\n                const bool = new Boolean(false);\n\n                if (bool) {\n                  console.log("Hola Snapplerxs!");\n                };\n                '}),Object(r.jsx)("iframe",{src:"snippets/class1/boolean4.html"})]})]})]}),Object(r.jsx)(a.k,{children:"No confundir el objeto Booelan con los valores primitivos Boolean ni con la funci\xf3n Boolean. La funci\xf3n Boolean puede ser usada para generar valores primitivos, pero al hacer un new estamos creando un objeto, que al ser evaluado tendr\xe1 un valor de verdad verdadero."})]}),Object(r.jsxs)(a.o,{backgroundColor:"#ffd84d",children:[Object(r.jsx)(a.g,{margin:"0px",fontSize:"50px",children:"Number"}),Object(r.jsxs)(a.t,{children:["ECMAScript posee dos tipos distintos de n\xfameros: ",Object(r.jsx)("b",{children:"Number"})," y ",Object(r.jsx)("b",{children:"BigInt"}),"."]}),Object(r.jsxs)(a.t,{children:["Number es un valor binario de 64 bits de doble precisi\xf3n. Representa n\xfameros entre ",Object(r.jsx)("b",{children:"- (2 ^ 53 - 1)"})," y ",Object(r.jsx)("b",{children:"2 ^ 53 - 1"}),"."]}),Object(r.jsx)(a.t,{children:'Adem\xe1s de representar n\xfameros de punto flotante, el tipo de n\xfamero tiene tres valores simb\xf3licos: + Infinito, -Infinito y NaN ("No es un n\xfamero").'})]}),Object(r.jsxs)(a.o,{backgroundColor:"#ffd84d",children:[Object(r.jsx)(a.g,{margin:"0px",fontSize:"50px",children:"Number"}),Object(r.jsxs)(a.t,{children:["Para verificar el valor m\xe1s grande o el valor m\xe1s peque\xf1o disponible dentro de \xb1 Infinito, se pueden usar las constantes ",Object(r.jsx)("b",{children:"Number.MAX_VALUE"})," o ",Object(r.jsx)("b",{children:"Number.MIN_VALUE"})]}),Object(r.jsx)(a.t,{children:"El 0 que puede ser representado como +0 y -0. En la pr\xe1ctica esto no tiene mucho impacto ya que -0 === +0, sin embargo se puede notar algunas diferencias al dividir por 0."}),Object(r.jsx)(a.b,{language:"js",children:"\n          42 / +0 == Infinity\n          42 / -0 == -Infinity\n        "})]}),Object(r.jsxs)(a.o,{backgroundColor:"#ffd84d",children:[Object(r.jsx)(a.g,{margin:"0px",fontSize:"50px",children:"BigInt"}),Object(r.jsx)(a.t,{children:"El tipo BigInt permite representar n\xfameros con una precisi\xf3n arbitraria, es decir que permite operar con n\xfameros que superen los l\xedmites planteados por el tipo Number."}),Object(r.jsx)(a.t,{children:"Un BigInt se crea agregando n al final de un n\xfamero entero o llamando al constructor."}),Object(r.jsx)(a.b,{language:"js",children:"\n          const x = 2n ** 53n; // 9007199254740992n\n\n          const y = BigInt(23) // 23n\n        "})]}),Object(r.jsxs)(a.o,{backgroundColor:"#ffd84d",children:[Object(r.jsx)(a.g,{margin:"0px",fontSize:"50px",children:"Symbol"}),Object(r.jsx)(a.t,{children:"Es un valor primitivo \xfanico e inmutable y se puede utilizar como clave de una propiedad de objeto."}),Object(r.jsx)(a.t,{children:"Se crea invocando la funci\xf3n Symbol, que produce din\xe1micamente un valor \xfanico y an\xf3nimo."}),Object(r.jsx)(a.b,{language:"js",children:'\n          let Sym1 = Symbol("Sym")\n          let Sym2 = Symbol("Sym")\n          \n          console.log(Sym1 === Sym2) // returns "false"\n        '})]}),Object(r.jsxs)(a.o,{backgroundColor:"#ffd84d",children:[Object(r.jsx)(a.g,{margin:"0px",fontSize:"50px",children:"String"}),Object(r.jsx)(a.t,{children:"Sirve para representar una cadena de caracteres. La longitud del string est\xe1 dada por la cantidad de elementos que lo componen."}),Object(r.jsx)(a.t,{children:"El primer elemento est\xe1 en el \xedndice 0, el siguiente en el \xedndice 1, y as\xed sucesivamente. La longitud de una cadena es el n\xfamero de elementos que contiene."}),Object(r.jsx)(a.b,{language:"js",children:"\n          const foo = 'Hello'\n\n          foo.length // 5\n          foo[0]     // H\n        "})]}),Object(r.jsxs)(a.o,{backgroundColor:"#ffd84d",children:[Object(r.jsx)(a.g,{margin:"0px",fontSize:"50px",children:"String"}),Object(r.jsx)(a.t,{children:"Existe una gran cantidad de m\xe9todos que permiten manipular Strings, al igual que en la mayor\xeda de los lenguajes"}),Object(r.jsxs)(a.t,{children:["Algunos ejemplos se pueden encontrar ",Object(r.jsx)("a",{href:"https://developer.mozilla.org/en-US/docs/Learn/JavaScript/First_steps/Useful_string_methods",children:"aqu\xed"}),"."]}),Object(r.jsx)(a.k,{children:"Mencionar split, slice, splice, indexOf, replace, toLowercase, toUppercase, etc."})]}),Object(r.jsxs)(a.o,{backgroundColor:"#ffd84d",children:[Object(r.jsx)(a.g,{margin:"0px",fontSize:"50px",children:"Arreglos"}),Object(r.jsx)(a.t,{children:"Son objetos en forma de lista que poseen una asociaci\xf3n particular entre claves n\xfamericas enteras y la longitud de la lista. Podemos decir que son estructuras indexadas."}),Object(r.jsxs)(a.t,{children:["Para definir un arreglo podemos usar corchetes ([]) o generar una instancia utilizando la funci\xf3n ",Object(r.jsx)("a",{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Array",children:"Array()"}),"."]}),Object(r.jsx)(a.b,{language:"js",children:"\n          const fruits = ['Apple', 'Banana'];\n\n          const moreFruits = new Array('Orange', 'Watermelon');\n        "})]}),Object(r.jsxs)(a.o,{backgroundColor:"#ffd84d",children:[Object(r.jsx)(a.g,{margin:"0px",fontSize:"50px",children:"Arreglos"}),Object(r.jsx)(a.t,{children:"Para acceder a los elementos podemos utilizar un \xedndice num\xe9rico indicando la posici\xf3n."}),Object(r.jsxs)(a.t,{children:["Tambi\xe9n existe una gran variedad de m\xe9todos que nos permiten iterar, duplicar, partir y manipular los arreglos de m\xfaltiples formas distintas. Algunos ejemplos ",Object(r.jsx)("a",{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",children:"aqu\xed"}),"."]}),Object(r.jsx)(a.b,{language:"js",children:"\n          const fruits = ['Apple', 'Banana'];\n\n          console.log(fruits.length); // 2\n          console.log(fruits[0]); // Apple\n        "})]}),Object(r.jsxs)(a.o,{backgroundColor:"#ffd84d",children:[Object(r.jsx)(a.g,{margin:"0px",fontSize:"50px",children:"Objetos"}),Object(r.jsx)(a.t,{children:'Podemos ver a los objetos como una colecci\xf3n de propiedades, cada una de los cuales posee un valor asociado. Las propiedades de un objeto son identificadas por "claves".'}),Object(r.jsx)(a.t,{children:"Las claves de un objeto pueden ser de tipo String o Symbol, pero los valores pueden ser de cualquier tipo, incluso otros objetos."}),Object(r.jsx)(a.k,{children:"Notar que se describe a los objetos como collecci\xf3n de propiedades, no simplemente de claves y valores. Las propiedades tienen un valor, pero adem\xe1s de eso existen otros atributos."})]}),Object(r.jsxs)(a.o,{backgroundColor:"#ffd84d",children:[Object(r.jsx)(a.g,{margin:"0px",fontSize:"50px",children:"Objetos"}),Object(r.jsxs)(a.t,{children:["Podemos crear objetos utilizando la ",Object(r.jsx)("a",{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Grammar_and_types#object_literals",children:"object literal syntax"})," o a trav\xe9s de la instanciaci\xf3n de Object."]}),Object(r.jsx)(a.b,{language:"js",children:"\n          let car = new Object();\n          car.brand = 'Ford';\n          car.model = 'Mustang';\n          car.year = 1969;\n          \n          let car2 = {\n            brand: 'Ford',\n            model: 'Mustang',\n            year: 1969\n          };\n        "})]}),Object(r.jsxs)(a.o,{backgroundColor:"#ffd84d",children:[Object(r.jsx)(a.g,{margin:"0px",fontSize:"50px",children:"Objetos"}),Object(r.jsx)(a.t,{children:"Es muy f\xe1cil acceder, borrar o actualizar los valores de cualquiera de sus claves."}),Object(r.jsx)(a.b,{language:"js",children:"\n          let car = {\n            brand: 'Ford',\n            model: 'Mustang',\n            year: 1969\n          };\n\n          car.brand = 'Chevrolet';\n          \n          console.log(car.brand); // Chevrolet\n\n          delete(car.year);\n          console.log(car); // { brand: 'Chevrolet', model: 'Mustang' }\n        "})]}),Object(r.jsxs)(a.o,{backgroundColor:"#ffd84d",children:[Object(r.jsx)(a.g,{margin:"0px",fontSize:"50px",children:"Objetos"}),Object(r.jsxs)(a.t,{children:["Adem\xe1s del valor, las propiedades poseen otros atributos. ",Object(r.jsx)("a",{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#objects",children:"M\xe1s info"}),"."]}),Object(r.jsx)("div",{style:{textAlign:"center"},children:Object(r.jsx)("img",{src:"/images/property_attributes.png",alt:"property_attributes",width:"80%",height:"80%"})})]}),Object(r.jsxs)(a.o,{backgroundColor:"#ffd84d",children:[Object(r.jsx)(a.g,{margin:"0px",fontSize:"50px",children:"Objetos"}),Object(r.jsxs)(a.t,{children:["Para poder modificar alguno de los otros atributos de una propiedad de un objeto podemos utilizar el m\xe9todo ",Object(r.jsx)("a",{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty",children:"Object.defineProperty()"}),"."]}),Object(r.jsx)(a.b,{language:"js",children:"\n          let car = {\n            brand: 'Ford'\n          };\n\n          Object.defineProperty(car, 'model', {\n            value: 'Mustang',\n            writable: false\n          });\n\n          car.brand = 'Chevrolet';\n          car.model = 'Camaro';\n          \n          console.log(car); // { brand: 'Chevrolet', model: 'Mustang' }\n        "})]}),Object(r.jsx)(a.o,{backgroundColor:"#000000",children:Object(r.jsxs)("div",{className:"flex-center-column",children:[Object(r.jsx)(a.g,{margin:"0px",fontSize:"50px",children:"Operadores l\xf3gicos"}),Object(r.jsx)(a.t,{children:"En JavaScript existen 4 operadores l\xf3gicos:"}),Object(r.jsxs)(a.u,{children:[Object(r.jsx)(a.j,{children:"|| (OR)"}),Object(r.jsx)(a.j,{children:"&& (AND)"}),Object(r.jsx)(a.j,{children:"! (NOT)"}),Object(r.jsx)(a.j,{children:"?? (Nullish Coalescing)"})]})]})}),Object(r.jsx)(a.o,{backgroundColor:"#000000",children:Object(r.jsxs)("div",{className:"flex-center-column",children:[Object(r.jsx)(a.g,{margin:"0px",fontSize:50,children:"|| (OR)"}),Object(r.jsx)(a.t,{fontSize:40,children:"El operador l\xf3gico OR evalua a False cuando ambos operandos son False. Caso contrario, siempre evalua a True."}),Object(r.jsxs)(a.t,{fontSize:40,children:["En JS la evaluaci\xf3n del OR es de ",Object(r.jsx)("b",{children:"circuito corto"}),"."]}),Object(r.jsx)(a.b,{language:"js",children:"\n            let result = value1 || value2 || value3;\n          "}),Object(r.jsxs)(a.t,{fontSize:30,children:["El operador OR har\xe1 lo siguiente:",Object(r.jsxs)(a.l,{children:[Object(r.jsx)(a.j,{fontSize:30,children:"Evaluar\xe1 los operandos de izquierda a derecha."}),Object(r.jsx)(a.j,{fontSize:30,children:"Dependiendo el valor de verdad del operando actual: si el resultado es true, se detiene y retorna el valor original de ese operando."}),Object(r.jsx)(a.j,{fontSize:30,children:"Si se evaluaron todos los operandos (y todos eran False), retorna el \xfaltimo operando."})]})]})]})}),Object(r.jsx)(a.o,{backgroundColor:"#000000",children:Object(r.jsxs)("div",{className:"flex-center-column",children:[Object(r.jsx)(a.g,{fontSize:50,children:"|| (OR)"}),Object(r.jsx)(a.t,{fontSize:50,children:"Siguiendo el ejemplo anterior..."}),Object(r.jsx)(a.b,{language:"js",children:'\n            let firstName = "";\n            let lastName = "";\n            let nickName = "Bob";\n\n            alert( firstName || lastName || nickName || "Anonymous"); // Bob\n          '}),Object(r.jsx)("br",{}),Object(r.jsx)(a.b,{language:"js",children:'\n            let groupOne = [];\n            let groupTwo = [];\n\n            alert( groupOne || groupTwo || ["Bob", "Ana", "Cam"]); // ["Bob", "Ana", "Cam"]\n          '})]})}),Object(r.jsx)(a.o,{backgroundColor:"#000000",children:Object(r.jsxs)("div",{className:"flex-center-column",children:[Object(r.jsx)(a.g,{margin:"0px",fontSize:50,children:"&& (AND)"}),Object(r.jsx)(a.t,{fontSize:40,children:"El operador l\xf3gico AND evalua a True cuando ambos operandos son True. Caso contrario, siempre evalua a False."}),Object(r.jsxs)(a.t,{fontSize:40,children:["En JS la evaluaci\xf3n del AND es de ",Object(r.jsx)("b",{children:"circuito corto"}),"."]}),Object(r.jsx)(a.b,{language:"js",children:"\n            let result = value1 && value2 && value3;\n          "}),Object(r.jsxs)(a.t,{fontSize:30,children:["El operador AND har\xe1 lo siguiente:",Object(r.jsxs)(a.l,{children:[Object(r.jsx)(a.j,{fontSize:30,children:"Evaluar\xe1 los operandos de izquierda a derecha."}),Object(r.jsx)(a.j,{fontSize:30,children:"Dependiendo el valor de verdad del operando actual: si el resultado es false, se detiene y retorna el valor original de ese operando."}),Object(r.jsx)(a.j,{fontSize:30,children:"Si se evaluaron todos los operandos (y todos eran True), retorna el \xfaltimo operando."})]})]})]})}),Object(r.jsx)(a.o,{backgroundColor:"#000000",children:Object(r.jsxs)("div",{className:"flex-center-column",children:[Object(r.jsx)(a.g,{fontSize:50,children:"&& (AND)"}),Object(r.jsx)(a.t,{fontSize:50,children:"Siguiendo el ejemplo anterior..."}),Object(r.jsx)(a.b,{language:"js",children:'\n            // Si el primer operando es "truthy", el AND retornar\xe1 el segundo operando:\n            alert( 1 && 0 ); // 0\n            alert( 1 && 5 ); // 5\n            \n            // Si el primer operando es "falsy", AND lo retorna. El segundo operando es ignorado.\n            alert( null && 5 ); // null\n            alert( 0 && "no matter what" ); // 0\n          '})]})}),Object(r.jsx)(a.o,{backgroundColor:"#000000",children:Object(r.jsxs)("div",{className:"flex-center-column",children:[Object(r.jsx)(a.g,{margin:"0px",fontSize:50,children:"! (NOT)"}),Object(r.jsx)(a.t,{fontSize:35,children:"El operador l\xf3gico NOT es utilizado para invertir el valor de verdad de un valor cualquiera."}),Object(r.jsxs)(a.l,{children:[Object(r.jsxs)(a.j,{fontSize:30,children:["Convierte el operando a su tipo booleano: ",Object(r.jsx)("b",{children:"true"})," / ",Object(r.jsx)("b",{children:"false"}),"."]}),Object(r.jsx)(a.j,{fontSize:30,children:"Retorna el valor inverso."})]}),Object(r.jsx)(a.b,{language:"js",children:"\n            alert( !true ); // false\n            alert( !0 ); // true\n          "}),Object(r.jsx)(a.t,{fontSize:30,children:"Un doble NOT !! se utiliza a veces para convertir valores a su tipo booleano:"}),Object(r.jsx)(a.b,{language:"js",children:'\n            alert( !!"non-empty string" ); // true\n            alert( !!null ); // false\n          '})]})}),Object(r.jsx)(a.o,{backgroundColor:"#000000",children:Object(r.jsxs)("div",{className:"flex-center-column",children:[Object(r.jsx)(a.g,{fontSize:50,children:"?? (Nullish Coalescing)"}),Object(r.jsxs)(a.t,{fontSize:30,children:["El operador de Nullish Coalescing se escribe con dos signos ",Object(r.jsx)("b",{children:"?"}),". Si evaluamos ",Object(r.jsx)("b",{children:"a ?? b"})," lo que sucede es lo siguiente:",Object(r.jsxs)(a.u,{children:[Object(r.jsxs)(a.j,{fontSize:30,children:["Si la variable ",Object(r.jsx)("b",{children:"a"})," est\xe1 definida, entonces se devuelve ",Object(r.jsx)("b",{children:"a"})]}),Object(r.jsxs)(a.j,{fontSize:30,children:["Si la variable ",Object(r.jsx)("b",{children:"a"})," no est\xe1 definida, entonces se devuelve ",Object(r.jsx)("b",{children:"b"}),"."]})]})]}),Object(r.jsxs)(a.t,{fontSize:30,children:["Es importante notar que este operador trata a ",Object(r.jsx)("b",{children:"undefined"})," y ",Object(r.jsx)("b",{children:"Null"})," de igual manera, por lo que decimos que una variable esta definida si no es ni undefined ni Null."]}),Object(r.jsx)(a.b,{language:"js",children:'\n            let user;\n\n            alert(user ?? "Anonymous"); // Anonymous (user not defined)\n          '})]})}),Object(r.jsx)(a.o,{backgroundColor:"#000000",children:Object(r.jsxs)("div",{className:"flex-center-column",children:[Object(r.jsx)(a.g,{margin:"0px",fontSize:"50px",children:"Estructuras de control"}),Object(r.jsx)(a.t,{children:"En JavaScript existen 5 estructuras de control b\xe1sicas:"}),Object(r.jsxs)(a.u,{children:[Object(r.jsx)(a.j,{children:"If / else"}),Object(r.jsx)(a.j,{children:"While"}),Object(r.jsx)(a.j,{children:"Do - while"}),Object(r.jsx)(a.j,{children:"For"}),Object(r.jsx)(a.j,{children:"Switch"})]})]})}),Object(r.jsx)(a.o,{backgroundColor:"#000000",children:Object(r.jsxs)("div",{className:"flex-center-column",children:[Object(r.jsx)(a.g,{margin:"0px",fontSize:"50px",children:"If / else"}),Object(r.jsxs)(a.t,{fontSize:30,children:["La sint\xe1xis de la sentencia if es la siguiente (la cl\xe1usula ",Object(r.jsx)("b",{children:"else"})," es opcional):"]}),Object(r.jsx)(a.b,{language:"js",children:"\n            if (condition) {\n              // if block statements\n            } else {\n              // else block statements\n            }\n          "}),Object(r.jsxs)(a.t,{fontSize:30,children:["La sentencia if eval\xfaa la expresi\xf3n entre par\xe9ntesis y luego utiliza el valor de verdad del resultado de dicha evaluaci\xf3n. Por ejemplo, la siguiente condici\xf3n nunca ejecutar\xe1 el bloque de c\xf3digo ",Object(r.jsx)("b",{children:"block1."})]}),Object(r.jsx)(a.b,{language:"js",children:"\n                if (0) { // 0 is a falsy value\n                  // block1\n                }\n              "})]})}),Object(r.jsx)(a.o,{backgroundColor:"#000000",children:Object(r.jsxs)("div",{className:"flex-center-column",children:[Object(r.jsx)(a.g,{margin:"0px",fontSize:"50px",children:"Conditional operator (?)"}),Object(r.jsxs)(a.t,{fontSize:30,children:["Existe tambi\xe9n el operador condicional ",Object(r.jsx)("b",{children:"?"})," que nos permite escribir una sentencia if de manera mucho m\xe1s corta y simple."]}),Object(r.jsx)(a.b,{language:"js",children:"\n            let result = condition ? value1 : value2;\n          "}),Object(r.jsxs)(a.t,{fontSize:30,children:["En caso que ",Object(r.jsx)("b",{children:"condition"})," evalue a true, entonces se asignar\xe1 ",Object(r.jsx)("b",{children:"value1"})," a la variable ",Object(r.jsx)("b",{children:"result"}),", caso contrario se asignar\xe1 ",Object(r.jsx)("b",{children:"value2"}),"."]})]})}),Object(r.jsx)(a.o,{backgroundColor:"#000000",children:Object(r.jsxs)("div",{children:[Object(r.jsx)(a.g,{margin:"0px",fontSize:"50px",children:"Conditional operator (?) (cont...)"}),Object(r.jsxs)(a.t,{fontSize:30,children:["El ",Object(r.jsx)("b",{children:"?"})," puede combinarse m\xfaltiples veces simulando sentencias ",Object(r.jsx)("b",{children:"if/else"}),":"]}),Object(r.jsx)(a.b,{language:"js",children:'\n              let carBrand = "Peugeot";\n\n              let message = (carBrand == "Suzuki") ? "Nice Suzuki!" :\n                (carBrand == "Fiat") ? \'Nice Fiat!\' :\n                (carBrand == "Peugeot") ? \'Nice Peugeot!\' :\n                \'I don\'t know that brand, nice car!\';\n              \n              alert(message);\n            '})]})}),Object(r.jsx)(a.o,{backgroundColor:"#000000",children:Object(r.jsxs)("div",{children:[Object(r.jsx)(a.g,{margin:"0px",fontSize:"50px",children:"While"}),Object(r.jsxs)(a.t,{fontSize:30,children:["La sint\xe1xis del loop ",Object(r.jsx)("b",{children:"while"})," es la siguiente:"]}),Object(r.jsx)(a.b,{language:"js",children:"\n              while (condition) {\n                // statements\n              }\n            "}),Object(r.jsxs)(a.t,{fontSize:30,children:["El bloque de c\xf3digo que se encuentra dentro del loop while se ejecutar\xe1 mientras la evaluaci\xf3n de la condici\xf3n sea ",Object(r.jsx)("b",{children:"true"}),"."]}),Object(r.jsxs)(a.t,{fontSize:30,children:["Para finalizar la ejecuci\xf3n del loop antes que se cumpla la condici\xf3n podemos utilizar la sentencia ",Object(r.jsx)("b",{children:"break"}),"."]})]})}),Object(r.jsx)(a.o,{backgroundColor:"#000000",children:Object(r.jsxs)("div",{children:[Object(r.jsx)(a.g,{margin:"0px",fontSize:"50px",children:"Do - while"}),Object(r.jsx)(a.t,{fontSize:30,children:"El loop do-while es muy similar al loop while, excepto que en este caso primero se ejecuta el bloque de c\xf3digo contenido dentro del mismo y luego se evalua la condici\xf3n. Su sint\xe1xis es la siguiente:"}),Object(r.jsx)(a.b,{language:"js",children:"\n              do {\n                // statements\n              } while (condition);\n            "}),Object(r.jsxs)(a.t,{fontSize:30,children:["Para finalizar la ejecuci\xf3n del loop antes que se cumpla la condici\xf3n podemos utilizar la sentencia ",Object(r.jsx)("b",{children:"break"}),"."]})]})}),Object(r.jsx)(a.o,{backgroundColor:"#000000",children:Object(r.jsxs)("div",{children:[Object(r.jsx)(a.g,{margin:"0px",fontSize:"50px",children:"For"}),Object(r.jsxs)(a.t,{fontSize:30,children:["La sint\xe1xis del loop ",Object(r.jsx)("b",{children:"For"})," es la siguiente:"]}),Object(r.jsx)(a.b,{language:"js",children:"\n              for (begin; condition; step) {\n                // ... loop body ...\n              }\n            "}),Object(r.jsx)(a.t,{fontSize:30,children:"Por ejemplo, para ejecutar un bloque de c\xf3digo 30 veces deber\xedamos declarar la condici\xf3n del for de la siguiente manera:"}),Object(r.jsx)(a.b,{language:"js",children:"\n            for (let i = 0; i < 30; i++) { // shows 0, then 1, then 2\n              alert(i);\n            }\n          "}),Object(r.jsxs)(a.t,{fontSize:30,children:["Para saltar a la siguiente iteraci\xf3n, podemos utilizar la sentencia ",Object(r.jsx)("b",{children:"continue"})," y para finalizar la ejecuci\xf3n del loop antes que se cumpla la condici\xf3n podemos utilizar la sentencia ",Object(r.jsx)("b",{children:"break"}),"."]})]})}),Object(r.jsx)(a.o,{backgroundColor:"#000000",children:Object(r.jsxs)("div",{children:[Object(r.jsx)(a.g,{margin:"0px",fontSize:"50px",children:"for..in & for..of"}),Object(r.jsxs)(a.t,{fontSize:30,children:["Existen otros tipos de loop ",Object(r.jsx)("b",{children:"for"})," que sirven a distintos casos de uso:"]}),Object(r.jsxs)(a.u,{children:[Object(r.jsxs)(a.j,{children:["for..in",Object(r.jsxs)(a.t,{fontSize:30,children:["La instrucci\xf3n ",Object(r.jsx)("b",{children:"for ... in"}),' itera sobre todas las propiedades enumerables de un objeto. Generalmente se utiliza para recorrer las "claves" o propiedades de un objeto.']})]}),Object(r.jsxs)(a.j,{children:["for..of",Object(r.jsxs)(a.t,{fontSize:30,children:["La instrucci\xf3n ",Object(r.jsx)("b",{children:"for ... of"})," crea un loop que itera sobre objetos iterables, incluidos: String, Array, objetos similares a arreglos (por ejemplo, argumentos o NodeList), TypedArray, Map, Set e iterables definidos por el usuario."]})]})]})]})}),Object(r.jsx)(a.o,{backgroundColor:"#000000",children:Object(r.jsxs)("div",{children:[Object(r.jsx)(a.g,{margin:"0px",fontSize:"50px",children:"Ejemplo de uso for..in"}),Object(r.jsx)(a.b,{language:"js",children:'\n            const car = {\n              brand: "Peugeot",\n              model: "208",\n              year: 2019\n            }\n\n            for (const prop in car) {\n              console.log(prop);\n            }\n\n            // brand\n            // model\n            // year\n          '})]})}),Object(r.jsx)(a.o,{backgroundColor:"#000000",children:Object(r.jsxs)("div",{children:[Object(r.jsx)(a.g,{margin:"0px",fontSize:"50px",children:"Ejemplo de uso for..of"}),Object(r.jsx)(a.b,{language:"js",children:"\n            const array1 = ['a', 'b', 'c'];\n\n            for (const element of array1) {\n              console.log(element);\n            }\n            \n            // expected output: \"a\"\n            // expected output: \"b\"\n            // expected output: \"c\"\n          "})]})}),Object(r.jsx)(a.o,{backgroundColor:"#000000",children:Object(r.jsxs)("div",{children:[Object(r.jsx)(a.g,{margin:"0px",fontSize:"50px",children:"for..in vs for..of"}),Object(r.jsx)(a.b,{language:"js",children:'\n            const array1 = [\'a\', \'b\', \'c\'];\n\n            for (const element of array1) {\n              console.log(element);\n            }\n            \n            // expected output: "a"\n            // expected output: "b"\n            // expected output: "c"\n\n            for (const element in array1) {\n              console.log(element);\n            }\n\n            // expected output: "0"\n            // expected output: "1"\n            // expected output: "2"\n          '})]})}),Object(r.jsx)(a.o,{backgroundColor:"#000000",children:Object(r.jsxs)("div",{children:[Object(r.jsx)(a.g,{margin:"0px",fontSize:"50px",children:"Switch"}),Object(r.jsxs)(a.t,{fontSize:30,children:["El ",Object(r.jsx)("b",{children:"switch"})," puede utilizarse para reemplazar m\xfaltiples sentencias ",Object(r.jsx)("b",{children:"if"})," y su sint\xe1xis es la siguiente:"]}),Object(r.jsx)(a.b,{language:"js",children:"\n              switch(x) {\n                case 'value1':  // if (x === 'value1')\n                  ...\n                  break; // break clause is optional, in case it's not present, following conditions are evaluated.\n                case 'value2':  // if (x === 'value2')\n                  ...\n                  break;\n                default:\n                  ...\n              }\n            "})]})}),Object(r.jsx)(a.o,{backgroundColor:"#000000",children:Object(r.jsxs)("div",{children:[Object(r.jsx)(a.g,{margin:"0px",fontSize:"50px",children:"Switch"}),Object(r.jsxs)(a.t,{fontSize:30,children:["El ",Object(r.jsx)("b",{children:"switch"})," puede utilizarse para reemplazar m\xfaltiples sentencias ",Object(r.jsx)("b",{children:"if"})," y su sint\xe1xis es la siguiente:"]}),Object(r.jsx)(a.b,{language:"js",children:"\n              switch(x) {\n                case 'value1':  // if (x === 'value1')\n                  ...\n                  break; // break clause is optional, in case it's not present, following conditions are evaluated.\n                case 'value2':  // if (x === 'value2')\n                  ...\n                  break;\n                default:\n                  ...\n              }\n            "})]})}),Object(r.jsx)(a.o,{backgroundColor:"#000000",children:Object(r.jsxs)("div",{children:[Object(r.jsx)(a.g,{margin:"0px",fontSize:"50px",children:"Manejo de errores"}),Object(r.jsxs)(a.t,{fontSize:30,children:["JavaScript nos provee los bloques ",Object(r.jsx)("b",{children:"try..catch"})," para capturar errores en tiempo de ejecuci\xf3n que pueden provocar la finalizaci\xf3n de nuestro script."]}),Object(r.jsx)(a.b,{language:"js",children:"\n              try {\n                null = \"this is a null variable\";\n              } catch (err) {\n                console.log(err); // Syntax Error\n                alert('Hey! Something went wrong...');\n              }\n            "}),Object(r.jsxs)(a.t,{fontSize:30,children:["Como se puede ver en el snippet anterior, el bloque catch recibe siempre un objeto error como par\xe1metro. Este objeto error tiene 2 propiedades principales:",Object(r.jsxs)(a.u,{fontSize:30,children:[Object(r.jsx)(a.j,{children:"name: el nombre del error (SyntaxError, TypeError, etc...)"}),Object(r.jsx)(a.j,{children:"message: un mensaje descriptivo que brinda un poco (no tanto) m\xe1s de detalle sobre el error"})]})]})]})}),Object(r.jsx)(a.o,{backgroundColor:"#000000",children:Object(r.jsxs)("div",{children:[Object(r.jsx)(a.g,{margin:"0px",fontSize:"50px",children:"Manejo de errores (cont.)"}),Object(r.jsxs)(a.t,{fontSize:30,children:["Si no necesitamos detalles sobre el error podemos ",Object(r.jsx)("b",{children:"omitir el par\xe1metro error en el bloque catch. "}),"Adem\xe1s, pueden existir casos donde deseemos lanzar un error de manera intencional por comportamiento imprevisto en el c\xf3digo. Para esto utilizamos la palabra clave ",Object(r.jsx)("b",{children:"throw"}),"."]}),Object(r.jsx)(a.b,{language:"js",children:'\n              let json = \'{ "age": 30 }\'; // incomplete data\n\n              try {\n                let user = JSON.parse(json); // <-- no errors\n                if (!user.name) {\n                  throw new SyntaxError("Incomplete data: no name");\n                }\n                alert( user.name );\n              } catch (err) {\n                alert( "JSON Error: " + err.message ); // JSON Error: Incomplete data: no name\n              }\n            '})]})}),Object(r.jsx)(a.o,{backgroundColor:"#000000",children:Object(r.jsxs)("div",{children:[Object(r.jsx)(a.g,{margin:"0px",fontSize:"50px",children:"Manejo de errores (cont.)"}),Object(r.jsx)(a.t,{fontSize:30,children:"Para lanzar errores propios JavaScript nos provee varios constructores para errores com\xfanes: Error, SyntaxError, ReferenceError, TypeError y otros. Su sint\xe1xis es la siguiente:"}),Object(r.jsx)(a.b,{language:"js",children:"\n              let error = new Error(message);\n              // or\n              let error = new SyntaxError(message);\n              let error = new ReferenceError(message);\n              // ...\n            "}),Object(r.jsxs)(a.t,{fontSize:30,children:["En estos casos, la propiedad ",Object(r.jsx)("b",{children:"name"})," tendr\xe1 como valor el nombre del constructor (ej. SyntaxError) y la propiedad ",Object(r.jsx)("b",{children:"message"})," tendr\xe1 como valor lo que hayamos pasado como par\xe1metro al constructor."]})]})}),Object(r.jsx)(a.o,{backgroundColor:"#000000",children:Object(r.jsxs)("div",{children:[Object(r.jsx)(a.g,{margin:"0px",fontSize:"50px",children:"Manejo de errores (cont.)"}),Object(r.jsxs)(a.t,{fontSize:30,children:["Los bloques ",Object(r.jsx)("b",{children:"try..catch"})," pueden contar con una cl\xe1usula extra (opcional) llamada ",Object(r.jsx)("b",{children:"finally"}),". Si est\xe1 presente, el c\xf3digo contenido dentro de ese bloque se ejecutar\xe1 siempre:",Object(r.jsxs)(a.u,{fontSize:30,children:[Object(r.jsxs)(a.j,{children:["Despu\xe9s del ",Object(r.jsx)("b",{children:"try"})," si no hubo errores."]}),Object(r.jsxs)(a.j,{children:["Despu\xe9s del ",Object(r.jsx)("b",{children:"catch"})," si hubo errores."]})]})]}),Object(r.jsx)(a.b,{language:"js",children:"\n              try {\n                ... try to execute the code ...\n             } catch (err) {\n                ... handle errors ...\n             } finally {\n                ... execute always ...\n             }\n            "})]})}),Object(r.jsx)(a.o,{backgroundColor:"#000000",children:Object(r.jsxs)("div",{children:[Object(r.jsx)(a.g,{margin:"0px",fontSize:"50px",children:"Creando nuestro propio error"}),Object(r.jsxs)(a.t,{fontSize:30,children:["Cuando estamos desarrollando es probable que querramos tener nuestras propias clases de errores para reflejar situaciones espec\xedficas que pueden fallar durante la ejecuci\xf3n de nuestros programas. Para esto, JavaScript nos permite definir clases que extienden de la clase base ",Object(r.jsx)("b",{children:"Error"}),"."]}),Object(r.jsx)(a.b,{language:"js",children:'\n            class ValidationError extends Error {\n              constructor(message) {\n                super(message); // (1)\n                this.name = "ValidationError"; // (2)\n              }\n            }\n          \n            function test() {\n              throw new ValidationError("Whoops!");\n            }\n          '})]})}),Object(r.jsx)(a.o,{backgroundColor:"#000000",children:Object(r.jsxs)("div",{children:[Object(r.jsx)(a.g,{margin:"0px",fontSize:"50px",children:"Creando errores custom (cont.)"}),Object(r.jsxs)(a.t,{fontSize:30,children:["En el ejemplo anterior, definimos un nuevo tipo de error para reflejar fallos en validaciones. Si bien al extender de la clase ",Object(r.jsx)("b",{children:"Error"})," nuestra clase hereda las 3 propiedades b\xe1sicas ",Object(r.jsx)("b",{children:"message, name y stack"}),", podriamos definir todas las props extras que querramos."]}),Object(r.jsx)(a.b,{language:"js",children:'\n            class HttpError extends Error {\n              constructor(message, statusCode) {\n                super(message); // (1)\n                this.name = "HttpError"; // (2)\n                this.statusCode = statusCode;\n              }\n            }\n          \n            function test() {\n              throw new HttpError("User not found", 404);\n            }\n          '})]})}),Object(r.jsxs)(a.o,{backgroundColor:"#000000",children:[Object(r.jsx)(a.g,{margin:"0px",fontSize:"50px",children:"Funciones"}),Object(r.jsx)(a.t,{className:"font-size-medium",children:"Javascript nos permite definir funciones para modularizar y evitar repetir nuestro c\xf3digo."}),Object(r.jsxs)(a.t,{className:"font-size-medium",children:["Para esto, podemos utilizar la palabra clave ",Object(r.jsx)("b",{children:"function"}),"."]}),Object(r.jsx)(a.b,{language:"js",children:'\n          function myFunction(arg_1, arg_2) {\n            console.log("This is a function with two arguments!")\n          }\n        '})]}),Object(r.jsxs)(a.o,{backgroundColor:"#000000",children:[Object(r.jsx)(a.g,{margin:"0px",fontSize:"50px",children:"Funciones"}),Object(r.jsx)(a.t,{className:"font-size-medium",children:"En caso de pasar un par\xe1metro de tipo primitivo, por ejemplo un n\xfamero, este par\xe1metro ser\xe1 pasado por valor."}),Object(r.jsx)(a.t,{className:"font-size-medium",children:"En caso de pasar un objeto o array por par\xe1metro, \xe9ste ser\xe1 pasado por referencia."}),Object(r.jsx)(a.b,{language:"js",children:"\n          function myFunction(theObject) {\n            theObject.brand = 'Toyota';\n          }\n\n          let mycar = { brand: 'Honda', model: 'Accord', year: 1998 };\n          console.log(mycar.brand); // \"Honda\"\n\n          myFunc(mycar);\n          console.log(mycar.brand); // \"Toyota\"\n        "})]}),Object(r.jsxs)(a.o,{backgroundColor:"#000000",children:[Object(r.jsx)(a.g,{margin:"0px",fontSize:"50px",children:"Expresiones"}),Object(r.jsxs)(a.t,{className:"font-size-medium",children:["Las funciones tambi\xe9n pueden ser definidas como ",Object(r.jsx)("a",{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/function",children:"expresiones"}),"."]}),Object(r.jsx)(a.t,{className:"font-size-medium",children:"Podemos definir funciones an\xf3nimas, sin proveer un nombre en su declaraci\xf3n."}),Object(r.jsx)(a.b,{language:"js",children:"\n          // This is an expression.\n          const square = function square(number) { return number * number }\n\n          // This is an anonymous function declared as an expression.\n          const square2 = function(number) { return number * number }\n        "})]}),Object(r.jsxs)(a.o,{backgroundColor:"#000000",children:[Object(r.jsx)(a.g,{margin:"0px",fontSize:"50px",children:"Lexical scoping"}),Object(r.jsx)(a.t,{className:"font-size-medium",children:"En JavaScript una funci\xf3n puede definirse dentro de otra. De esta forma, la funci\xf3n de adentro tiene acceso al contexto de la funci\xf3n que la contiene, pudiendo acceder a todo lo que est\xe1 en su alcance."}),Object(r.jsx)(a.b,{language:"js",children:"\n          function init() {\n            var name = 'Mozilla'; // name is a local variable created by init\n            function displayName() { // displayName() is the inner function, a closure\n              alert(name); // use variable declared in the parent function\n            }\n            displayName();\n          }\n          init();\n        "})]}),Object(r.jsxs)(a.o,{backgroundColor:"#000000",children:[Object(r.jsx)(a.g,{margin:"0px",fontSize:"50px",children:"Closures"}),Object(r.jsx)(a.t,{className:"font-size-medium",children:"Un closure es la combinaci\xf3n de una funci\xf3n y el entorno l\xe9xico dentro del cual se declar\xf3 esa funci\xf3n. Este entorno consta de las variables locales que estaban dentro del alcance en el momento en que se cre\xf3 el closure."}),Object(r.jsx)(a.b,{language:"js",children:"\n          function makeFunc() {\n            var name = 'Mozilla';\n            function displayName() {\n              alert(name);\n            }\n            return displayName;\n          }\n\n          var myFunc = makeFunc();\n          myFunc();\n        "}),Object(r.jsxs)(a.k,{children:[Object(r.jsx)("p",{children:"En este ejemplo, la funci\xf3n makeFunc no retorna un valor sino que retorna displayName, que es la funci\xf3n que se define dentro de makeFunc."}),Object(r.jsx)("p",{children:"Debido a que la funci\xf3n displayName utiliza una variable local a makeFunc, al invocarla luego displayName sigue mostrando el nombre Mozilla, a pesar de que ese valor ya no forme parte del contexto de ejecuci\xf3n (form\xf3 parte del contexto de declaraci\xf3n)."})]})]}),Object(r.jsxs)(a.o,{backgroundColor:"#000000",children:[Object(r.jsxs)("div",{style:{width:"80%"},children:[Object(r.jsx)(a.g,{margin:"0px",fontSize:"50px",children:"Hoisting"}),Object(r.jsx)(a.t,{className:"font-size-medium",children:"Si bien el c\xf3digo en JS se ejecuta de manera secuencial (se ejecuta una l\xednea y al terminar se ejecuta la que est\xe1 debajo), el motor de JS procesa la declaraci\xf3n de funciones y variables previo a la ejecuci\xf3n del c\xf3digo."}),Object(r.jsxs)(a.t,{className:"font-size-medium",children:["Para obtener m\xe1s informaci\xf3n, ver ",Object(r.jsx)("a",{href:"https://www.javascripttutorial.net/javascript-execution-context/",children:"Javascript execution Context"}),"."]}),Object(r.jsxs)(a.d,{justifyContent:"space-between",children:[Object(r.jsx)(a.b,{language:"js",children:'\n              catName("Chloe");\n\n              function catName(name) {\n                console.log("My cat\'s name is " + name);\n              }\n            '}),Object(r.jsx)("iframe",{src:"snippets/class1/hoisting1.html"})]})]}),Object(r.jsx)(a.k,{children:'Podr\xedamos pensar como que JS "mueve las declaraciones de variables y funciones al principio de los archivos" y por eso \xe9stas pueden ser utilizadas previo a su declaraci\xf3n.'})]}),Object(r.jsxs)(a.o,{backgroundColor:"#000000",children:[Object(r.jsx)(a.g,{margin:"0px",fontSize:"50px",children:"Hoisting"}),Object(r.jsx)(a.t,{className:"font-size-medium",children:'El hoisting de funciones, solo funciona con "function declarations" y no con "function expressions".'}),Object(r.jsx)(a.b,{language:"js",children:"\n          console.log(square);    // square is hoisted with an initial value undefined.\n          console.log(square(5)); // Uncaught TypeError: square is not a function\n\n          const square = function(n) {\n            return n * n;\n          }\n        "})]}),Object(r.jsxs)(a.o,{backgroundColor:"#000000",children:[Object(r.jsxs)("div",{style:{width:"80%"},children:[Object(r.jsx)(a.g,{margin:"0px",fontSize:"50px",children:"Hoisting"}),Object(r.jsxs)(a.t,{className:"font-size-medium",children:["En el caso de las variables definidas con ",Object(r.jsx)("b",{children:"var"}),", \xe9stas ser\xe1n declaradas e inicializadas con el valor ",Object(r.jsx)("b",{children:"undefined"}),"."]}),Object(r.jsxs)(a.t,{className:"font-size-medium",children:["En el caso de variables definidas con ",Object(r.jsx)("b",{children:"let"})," o constantes utilizando ",Object(r.jsx)("b",{children:"const"}),", cualquier referencia a ellas previa a la l\xednea donde son declaradas lanzar\xe1 una excepci\xf3n."]}),Object(r.jsxs)(a.d,{justifyContent:"space-between",children:[Object(r.jsx)(a.b,{language:"js",children:"\n              console.log(num_var); // Returns 'undefined' from hoisted var declaration (not 6)\n              var num_var; // Declaration\n              num_var = 6; // Initialization\n\n              console.log(num_const) // ReferenceError\n              console.log(num_let) // ReferenceError\n              const num_const = 6;\n              let num_let;\n            "}),Object(r.jsx)("iframe",{src:"snippets/class1/hoisting2.html"})]})]}),Object(r.jsx)(a.k,{children:'El motor de JavaScript solo hace el "hoisting" de la declaraci\xf3n de las variables, es decir que no tiene en cuenta su inicializaci\xf3n.'})]})]})}},122:function(e,n,s){},158:function(e,n){},474:function(e,n,s){var a={"./class1":121,"./class1.jsx":121,"./class2.md":475};function r(e){var n=o(e);return s(n)}function o(e){if(!s.o(a,e)){var n=new Error("Cannot find module '"+e+"'");throw n.code="MODULE_NOT_FOUND",n}return a[e]}r.keys=function(){return Object.keys(a)},r.resolve=o,e.exports=r,r.id=474},475:function(e,n,s){"use strict";s.r(n),n.default=s.p+"static/media/class2.ef13030d.md"},476:function(e,n,s){"use strict";s.r(n);var a=s(2),r=s.n(a),o=s(32),i=s.n(o),t=s(49),c=s(7),l=[{classNumber:1,slidesFilename:"class1.jsx"},{classNumber:2,slidesFilename:"class2.md"}],d=s(0),j=function(){return Object(d.jsxs)("div",{className:"menu",children:[Object(d.jsx)("h1",{className:"menu-header",children:"\ud83d\udc4b JS Training Classes \ud83d\ude80"}),Object(d.jsx)("ul",{className:"menu-list",children:l.map((function(e){var n=e.classNumber;return Object(d.jsx)("li",{children:Object(d.jsx)(t.b,{className:"menu-list-item",to:"classes/".concat(n),children:"\ud83d\udcd6 Clase ".concat(n)})},n)}))})]})},b=s(1),u={colors:{primary:"#ffffff",secondary:"#ffffff",backgroundColor:"##edeff2"},fonts:{header:"Roboto",text:"Roboto"}},x=function(){return Object(d.jsxs)(b.d,{justifyContent:"space-between",position:"absolute",bottom:0,width:1,children:[Object(d.jsx)(b.a,{padding:"0 1em",children:Object(d.jsx)(b.e,{})}),Object(d.jsx)(b.a,{padding:"1em",children:Object(d.jsx)(b.m,{})})]})},m=function(e){var n=e.slides;return Object(d.jsx)(b.c,{theme:u,template:x,children:Object(d.jsx)("div",{style:{backgroundColor:"#ffd84d"},children:n})})},p=function(e){return s(474)("./".concat(e)).default()},h=function(e,n){return Object(d.jsx)(e,{slides:p(n)})},O=function(){return Object(d.jsx)(t.a,{children:Object(d.jsxs)(c.d,{children:[Object(d.jsx)(c.b,{exact:!0,path:"/menu",component:j}),l.map((function(e){var n=e.classNumber,s=e.slidesFilename;return Object(d.jsx)(c.b,{exact:!0,path:"/classes/".concat(n),render:function(){return h(m,s)}},n)})),Object(d.jsx)(c.b,{path:"/",children:Object(d.jsx)(c.a,{to:"menu"})})]})})};s(122);i.a.render(Object(d.jsx)(r.a.StrictMode,{children:Object(d.jsx)(O,{})}),document.getElementById("root"))}},[[476,1,2]]]);
//# sourceMappingURL=main.a41d1653.chunk.js.map